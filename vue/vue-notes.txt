NOTE: versi vue.js yang dipelajari sekarang adalah versi yang ke - 2, bukan yang terbaru yaitu versi 3 nya.

Ada 2 cara untuk menambahkan vue.js ke dalam website buatan kita:
    - dengan npm
    - dengan cdn

Dengan menggunakan vue.js kita bisa dengan mudah memanipulasi dom yang akan langsung terjadi di dalam vue.js nya, tanpa perlu melakukan selection pada elemennya menggunakan getElementById dan sebagainya. 

* Contoh vue.js versi 2 dan cara penulisannya:

di script / file app.js bisa diisikan berikut:
var app = new Vue({
  el: "#app", // el: artinya elemen yang punya id "app".
  data: {
    name: "Naruto Uzumaki",
  },
});

Lalu di index.html bisa diisikan berikut:
    <div id="app">
      <h2>{{ name }}</h2>
    </div>

Nantinya scriptnya akan mencari elemen dengan 'id' app dan mengubah isi datanya dengan data yang dituliskan di dalam key dari 'name' yaitu Naruto Uzumaki.

Contoh diatas disebut dengan 'Reactive Data' yang artinya ketika kita menghubungkan suatu elemen dengan data atau properti yang ada di dalam vue js nya, maka secara otomatis akan terus terhubung dan data yang ada di dalam properti tersebut dapat kita ubah secara real time tanpa perlu loading ulang halaman web nya dan proses perubahannya akan langsung ditampilkan ke halaman web nya.

Berikut contoh ketika menggunakan data object yang terpisah pada app.js:
    const narutoShippuden = {
    name: "naruto uzumaki shippuden",
    deskripsi: "bercerita tentang naruto uzumaki, seorang ninja asal konoha yang ingin menjadi hokage",
    price: "25000",
    image: "https://upload.wikimedia.org/wikipedia/id/9/94/NarutoCoverTankobon1.jpg",
    };

    var app = new Vue({
    el: "#app",
    data: narutoShippuden,
    });

Di file index.html nya bisa diisikan berikut:
    <div id="app">
      <h2>{{ name }}</h2>
      <p>{{ deskripsi }}</p>
      <p>{{ price }}</p>
    </div>

* cara melakukan binding data / menambahkan suatu value ke dalam attribute HTML dengan cara: 
    'directive v-bind', dimana kita bisa isikan sebelum nama attribute nya, contoh <img v-bind:src="image" v-bind:alt="name" class="img-fluid" />

Kita juga bisa isikan dengan cara berikut tanpa menggunakan 'v-bind' seperti berikut:
    <img :src="image" :alt="name" class="img-fluid" />

* Contoh perulangan pada vue.js yang digunakan untuk mengambil data di dalam bentuk array:
        <div class="row d-flex mb-3 align-items-center" v-for="item in products">
            <div class="col-sm-4">
                <img :src="item.image" :alt="item.name" class="img-fluid d-block" />
            </div>
            <div class="col">
                <h3 class="text-info">{{ item.name }}</h3>
                <p class="mb-0">{{ item.description }}</p>
                <div class="h5 float-right">Rp{{ item.price }}</div>
            </div>
      </div>

Untuk menggunakan perulangan pada vue.js, kita perlu menggunakan v-for, dengan isinya berupa variable sementara yang mengambil data dari dalam array, walaupun array tersebut misalnya berada didalam object seperti di file app.js. Nah "item in products" diatas sama dengan perulangan "for..in" pada javascript biasa, dimana "item" adalah nama variable sementara jadi kita bisa ubah menjadi nama lainnya, lalu "in products" dimaksudkan untuk mengambil data pada array "products" walaupun data array tersebut disimpan di dalam suatu object.

* Contoh pengkondisian dengan vue.js, digunakan sama seperti pada javascript dan bahasa lainnya, berikut contohnya:
    <div v-if="item.price <= maximum">
kita gunakan 'item' diatas karena sebelumnya kita telah menambahkan pengulangan dengan v-for, sehingga kita bisa gunakan pengkondisian dengan variable 'item'. Kode diatas dibaca 'vue.js tolong tampilkan data dengan syarat, jika ada item yang memiliki harga kurang dari atau sama dengan nilai maximum yang sudah kita tentukan pada file app.js nya'. Number kita gunakan untuk melakukan parsing dari string ke tipe number.

* Contoh directive v-model, yang sama seperti directive lain diatas, tetapi pada v-model akan kita isikan suatu object data berupa key nya. Berikut contohnya:
    <input type="number" class="form-control w-25" v-model="maximum">
    Tag input diatas akan berisikan data yang nilainya bisa kita sesuaikan dan nilai nya tersebut akan disimpan ke dalam property object dari key 'maximum'.

* Contoh mengakses data menggunakan api
var app = new Vue({
  el: "#app",
  data: {
    maximum: 50,
    products: null,
  },
  mounted: function () {
    fetch("https://hplussport.com/api/products/order/price")
      .then((response) => response.json())
      .then((data) => {
        this.products = data;
      });
  },
});

Pada contoh diatas, kita buat sebuah properti object baru berupa key - value, dengan nama mounted yang berisi value nya adalah function, lalu dengan 'fetch' kita mengambil data api dari alamat web tersebut, lalu hasilnya yang berupa response akan diubah menjadi bentuk 'json', lalu setelah itu response tadi akan disisipkan ke dalam variable 'data' dimana variable data tersebut akan disimpan 'value' nya ke dalam properti 'products' yang ada di dalam properti object dari 'key' dengan nama 'data' tersebut.

* Event dan Method pada Vue,
- Event pada Vue.js ini, tidak berbeda jauh seperti di javascript biasa, contoh ada 'v-on:click' yang sama dengan 'onclick=myFunction()'. Contoh lengkapnya:
    v-on:click="cart.push(item)"
        - cart adalah property yang ada di dalam variable 'app' pada file app.js yang nilainya array kosong,
        - push() adalah contoh function bawaan dari javascript,
        - (item) adalah variable sementara dari perulangan for yang ada di dalam file index.html.

- Lalu method juga sama, yaitu sebuah function yang ada didalam sebuah object. Contoh method nya:
      methods: {
            addItem: function (product) {
            this.cart.push(product);
            },
        },

    - addItem adalah nama function / method,
    - product adalah parameter nya di file app.js, kalau di file index.html parameter nya akan diisi dengan variable sementara 'item',
    - this.cart.push(product) akan melakukan penambahan data pada array cart yang kosong dengan function bawaan push yang berisi nilai parameter / argumen nya yaitu 'item.

* Ada beberapa cara untuk kita melakukan parsing data inputan pada saat data tersebut memiliki elemen / tag HTML maka bisa ditampilkan dengan 'format HTML', intinya adalah tag html seperti b, i, atau strong dapat kita gunakan dan akan memberikan efek yang seharusnya, ini disebut dengan Interpolation template. Caranya bisa kita gunakan directive v-html="name" / bisa juga menggunakan nama key yang ada di dalam object pada file javascript / dari data API. Contohnya:
  Pada file app.js di value pada key 'name' kita isikan seperti berikut,
    data: {
      name: "<b>Fluffy</b> ski coat",
    },

  Maka hasilnya akan menjadi seperti ini jika tidak menggunakan v-html,
    <b>Fluffy</b> ski coat

  Tetapi jika menggunakan v-html, text 'Fluffy' akan memiliki efek tebal / bold, begitu juga jika diberikan tag i akan jadi italic / miring.
    Fluffy ski coat

* Dengan menggunakan directive v-once, maka nilai yang sudah dideklarasikan dari awal tidak akan bisa dirubah rubah lagi kedepannya. Contohnya,

  <span v-once>{{ name }}</span>

Dengan v-once ini juga kita bisa berikan pada elemen parent nya, yang bisa membuat 'seluruh text' yang ada didalam elemen parent tersebut akan tetap dan tidak dapat diubah ubah. Contohnya,

      <p v-once>
        <strong>Unchangeable:</strong><br />
        <span>{{ name }}</span>
      </p>

* <img :src="products[0].image" :alt="products[0].name" :class="imgClass + ' ' + 'w-25'" />

Penjelasan pada class diatas: imgClass adalah properti dari object data di file app.js yang berisi class bootstrap 'img-fluid', lalu untuk menambah class dari bootstrap yang lainnya kita bisa gunakan fungsi 'concatenation' seperti diatas, dimana class w-25 ditambahkan untuk memberikan efek lebar / width sebesar 25 rem.

** Berikut adalah contoh binding data secara langsung dengan tag HTML menggunakan v-bind,

      <img
        v-bind="{
        class: imgClass + ' ' + 'w-25',
        src: products[0].image,
        alt: products[0].name
      }"
      />

Dengan directive v-bind seperti diatas, kita bisa secara langsung menuliskan properti dari tag HTML dan juga properti dari javascript nya secara langsung sehingga lebih mudah untuk dibaca.

* Computed property, untuk menyimpan banyak function yang dapat kita gunakan didalam vue js.

* Fungsi slug, biasanya akan mengubah suatu string atau digunakan pada situs blog untuk mengubah title agar dapat digunakan didalam title agar lebih rapih. Seperti contohnya white-space akan diubah menjadi dash ( - ), beberapa simbol akan dihapus yang jadinya akan terlihat lebih rapih pada saat kita gunakan didalam url, dan slug ini juga mempengaruhi bagaimana mesin pencari mengambil data / melihat suatu struktur website yang kita buat.

Contoh computed property & function slug,
({.......
  ........
  computed: {
    slugetize: function () {
      return this.slugText
        .toLowerCase() // isi slugText akan diubah jadi lowercase
        .replace(/[^\w ]+/g, "") // setiap simbol akan dihapus dengan string kosong. baris kode didalam tanda kurung menggunakan regular expression.
        .replace(/ +/g, "-"); // mengubah setiap whitespace menjadi dash / -
    },
  },
});

// output dari function slugetize: the-quick-brown-29

* Methods & Computed:
  - methods: Properti methods digunakan untuk mendefinisikan fungsi-fungsi dalam komponen Vue.js. Fungsi-fungsi ini dapat dipanggil dari tampilan atau dari bagian lain dalam komponen. Mereka dapat melakukan logika, memanipulasi data, atau melakukan operasi lain yang diperlukan. Ketika fungsi dijalankan, mereka akan mengembalikan nilai yang sesuai. Namun, perlu diperhatikan bahwa fungsi-fungsi dalam methods akan selalu dieksekusi ulang ketika ada perubahan dalam komponen, bahkan jika nilai yang digunakan oleh fungsi tersebut tidak berubah.

  - computed: Properti computed digunakan untuk mendefinisikan properti komputasi dalam komponen Vue.js. Properti ini secara otomatis menghitung nilai berdasarkan dependensi yang telah ditentukan. Dependensi ini adalah data yang digunakan dalam properti komputasi. Jika salah satu dependensi berubah nilainya, properti komputasi akan diperbarui secara otomatis. Hasil dari properti komputasi dapat diakses seperti properti biasa dalam tampilan.

  - Perbedaan utama antara methods dan computed adalah dalam cara kerjanya. Fungsi dalam methods harus dipanggil secara eksplisit dari tampilan atau dari fungsi lain, sedangkan properti dalam computed diperbarui secara otomatis ketika dependensinya berubah. Dengan menggunakan computed, Vue.js dapat mengoptimalkan kinerja dengan hanya memperbarui nilai properti yang diperlukan, sementara fungsi dalam methods akan selalu dieksekusi ulang. Oleh karena itu, 'computed sering digunakan untuk perhitungan sederhana yang membutuhkan pembaruan otomatis', sementara 'methods digunakan untuk logika yang lebih kompleks atau tugas yang memerlukan pemanggilan manual'.


* Perbedaan lain antara Methods dan Computed Property:
  - untuk mengakses function yang ada didalam properti methods maka kita 'perlu' menggunakan tanda kurung () pada akhir nama function nya.

  - untuk mengakses function yang ada didalam properti computed, kita 'tidak perlu' lagi menggunakan tanda kurung () pada akhir nama function, contoh:
    
  computed: {
    now: function () {
      var date = new Date();
      return String(date.getHours()) + String(date.getMinutes()) + String(date.getSeconds());
    },
    slugetize: function () {
      return (
        this.slugText
          .toLowerCase()
          .replace(/[^\w ]+/g, "")
          .replace(/ +/g, "-") +
        "-" +
        this.now // bagian now ini bisa ditulis seperti itu karena function now ada di dalam properti computed.
      );
    },
  },

  - pada computed, terdapat function catch yang berfungsi untuk menyimpan nilai sebelumnya dan pada saat nilai sebelumnya ini tidak ada perubahan atau tidak kita ubah maka hasilnya akan tetap.

  - berbeda pada methods, nilai / hasil dari function yang disimpan didalam methods akan selalu diubah / dijalankan lagi dari awal sehingga perubahannya akan terus terjadi.