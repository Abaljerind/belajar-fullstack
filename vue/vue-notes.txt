NOTE: versi vue.js yang dipelajari sekarang adalah versi yang ke - 2, bukan yang terbaru yaitu versi 3 nya.

Ada 2 cara untuk menambahkan vue.js ke dalam website buatan kita:
    - dengan npm
    - dengan cdn

Dengan menggunakan vue.js kita bisa dengan mudah memanipulasi dom yang akan langsung terjadi di dalam vue.js nya, tanpa perlu melakukan selection pada elemennya menggunakan getElementById dan sebagainya. 

* Contoh vue.js versi 2 dan cara penulisannya:

di script / file app.js bisa diisikan berikut:
var app = new Vue({
  el: "#app", // el: artinya elemen yang punya id "app".
  data: {
    name: "Naruto Uzumaki",
  },
});

Lalu di index.html bisa diisikan berikut:
    <div id="app">
      <h2>{{ name }}</h2>
    </div>

Nantinya scriptnya akan mencari elemen dengan 'id' app dan mengubah isi datanya dengan data yang dituliskan di dalam key dari 'name' yaitu Naruto Uzumaki.

Contoh diatas disebut dengan 'Reactive Data' yang artinya ketika kita menghubungkan suatu elemen dengan data atau properti yang ada di dalam vue js nya, maka secara otomatis akan terus terhubung dan data yang ada di dalam properti tersebut dapat kita ubah secara real time tanpa perlu loading ulang halaman web nya dan proses perubahannya akan langsung ditampilkan ke halaman web nya.

Berikut contoh ketika menggunakan data object yang terpisah pada app.js:
    const narutoShippuden = {
    name: "naruto uzumaki shippuden",
    deskripsi: "bercerita tentang naruto uzumaki, seorang ninja asal konoha yang ingin menjadi hokage",
    price: "25000",
    image: "https://upload.wikimedia.org/wikipedia/id/9/94/NarutoCoverTankobon1.jpg",
    };

    var app = new Vue({
    el: "#app",
    data: narutoShippuden,
    });

Di file index.html nya bisa diisikan berikut:
    <div id="app">
      <h2>{{ name }}</h2>
      <p>{{ deskripsi }}</p>
      <p>{{ price }}</p>
    </div>

* cara melakukan binding data / menambahkan suatu value ke dalam attribute HTML dengan cara: 
    'directive v-bind', dimana kita bisa isikan sebelum nama attribute nya, contoh <img v-bind:src="image" v-bind:alt="name" class="img-fluid" />

Kita juga bisa isikan dengan cara berikut tanpa menggunakan 'v-bind' seperti berikut:
    <img :src="image" :alt="name" class="img-fluid" />

* Contoh perulangan pada vue.js yang digunakan untuk mengambil data di dalam bentuk array:
        <div class="row d-flex mb-3 align-items-center" v-for="item in products">
            <div class="col-sm-4">
                <img :src="item.image" :alt="item.name" class="img-fluid d-block" />
            </div>
            <div class="col">
                <h3 class="text-info">{{ item.name }}</h3>
                <p class="mb-0">{{ item.description }}</p>
                <div class="h5 float-right">Rp{{ item.price }}</div>
            </div>
      </div>

Untuk menggunakan perulangan pada vue.js, kita perlu menggunakan v-for, dengan isinya berupa variable sementara yang mengambil data dari dalam array, walaupun array tersebut misalnya berada didalam object seperti di file app.js. Nah "item in products" diatas sama dengan perulangan "for..in" pada javascript biasa, dimana "item" adalah nama variable sementara jadi kita bisa ubah menjadi nama lainnya, lalu "in products" dimaksudkan untuk mengambil data pada array "products" walaupun data array tersebut disimpan di dalam suatu object.

* Contoh pengkondisian dengan vue.js, digunakan sama seperti pada javascript dan bahasa lainnya, berikut contohnya:
    <div v-if="item.price <= maximum">
kita gunakan 'item' diatas karena sebelumnya kita telah menambahkan pengulangan dengan v-for, sehingga kita bisa gunakan pengkondisian dengan variable 'item'. Kode diatas dibaca 'vue.js tolong tampilkan data dengan syarat, jika ada item yang memiliki harga kurang dari atau sama dengan nilai maximum yang sudah kita tentukan pada file app.js nya'. Number kita gunakan untuk melakukan parsing dari string ke tipe number.

* Contoh directive v-model, yang sama seperti directive lain diatas, tetapi pada v-model akan kita isikan suatu object data berupa key nya. Berikut contohnya:
    <input type="number" class="form-control w-25" v-model="maximum">
    Tag input diatas akan berisikan data yang nilainya bisa kita sesuaikan dan nilai nya tersebut akan disimpan ke dalam property object dari key 'maximum'.

* Contoh mengakses data menggunakan api
var app = new Vue({
  el: "#app",
  data: {
    maximum: 50,
    products: null,
  },
  mounted: function () {
    fetch("https://hplussport.com/api/products/order/price")
      .then((response) => response.json())
      .then((data) => {
        this.products = data;
      });
  },
});

Pada contoh diatas, kita buat sebuah properti object baru berupa key - value, dengan nama mounted yang berisi value nya adalah function, lalu dengan 'fetch' kita mengambil data api dari alamat web tersebut, lalu hasilnya yang berupa response akan diubah menjadi bentuk 'json', lalu setelah itu response tadi akan disisipkan ke dalam variable 'data' dimana variable data tersebut akan disimpan 'value' nya ke dalam properti 'products' yang ada di dalam properti object dari 'key' dengan nama 'data' tersebut.

* Event dan Method pada Vue,
- Event pada Vue.js ini, tidak berbeda jauh seperti di javascript biasa, contoh ada 'v-on:click' yang sama dengan 'onclick=myFunction()'. Contoh lengkapnya:
    v-on:click="cart.push(item)"
        - cart adalah property yang ada di dalam variable 'app' pada file app.js yang nilainya array kosong,
        - push() adalah contoh function bawaan dari javascript,
        - (item) adalah variable sementara dari perulangan for yang ada di dalam file index.html.

- Lalu method juga sama, yaitu sebuah function yang ada didalam sebuah object. Contoh method nya:
      methods: {
            addItem: function (product) {
            this.cart.push(product);
            },
        },

    - addItem adalah nama function / method,
    - product adalah parameter nya di file app.js, kalau di file index.html parameter nya akan diisi dengan variable sementara 'item',
    - this.cart.push(product) akan melakukan penambahan data pada array cart yang kosong dengan function bawaan push yang berisi nilai parameter / argumen nya yaitu 'item.