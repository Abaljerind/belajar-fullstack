Template literals:
contoh:
`Hasil 1 + 1 adalah ${2 + 1}`

harus menggunakan backtick ``

------------------------------------------------

NOTE: tiap tipe data primitif di dalam js, masing masing nya memiliki methods nya sendiri yg bisa di cek di ndn mozilla / web lain.

beberapa method menerima argument yg bisa mengubah hasilnya. Argument itu mirip seperti inputan yang kita isikan tetapi argument disini kita isikan di dalam tanda kurung. 

contoh:
let movie = 'blacklist'
movie.indexOf('k')
output> 4

-------------------------------------------------

tipe data primitif di dalam js:
- number, ciri ciri nya di dalam javascript:
a. hanya memiliki 1 jenis tipe data yaitu number
b. nilainya bisa bilangan positif
c. nilainya bisa bilangan negatif
d. nilainya bisa seluruh angka (int)
e. nilainya bisa angka desimal

NaN, not a number merepresentasikan bahwa suatu input / hasil proses itu bukan sebuah number / angka, tapi NaN ini juga adalah bagian dari number. NaN akan muncul jika kita mengetikkan seperti dibawah ini di dalam console browser:
0 / 0 menghasilkan NaN.
1 + NaN menghasilkan NaN.

- boolean, hanya berisi true dan false saja.

- string, untuk mengetikkan nilai berupa teks (huruf, nilai, simbol dll) yang dibungkus oleh kutip, baik satu kutip atau dua kutip.
contoh string:
> 'selamat "yaa kamu" hahaha'
> "coba ini' ya"

* string memiliki nilai indeks, seperti pada array. nilai indeks nya dimulai dari 0, contoh:
string    C O D E
indeks    0 1 2 3

cara penggunaan indeks:
let x = "code"
x[0]
output> c

untuk mengetahui panjang indeks dari suatu text:
<namaVariable>.length

contoh concate (penggabungan) teks string:
x = x + 'html'
or
y = x + 'javascript'

    ## String Methods, adalah suatu aksi yg disediakan javascript, saat kita ingin:
    - mencari sebuah huruf / kata
    - menggantikan karakter 
    - mengubah huruf besar / kecil


- null, nilai kosong yg sengaja dibuat karna perlu untuk dibuat.

- undefined, variable yg dibuat tapi belum ada isinya / tidak ada sama sekali. contoh:
let nama;

--------------------------------------------------------------------

* variable pada javascript ->
penulisan variable di javascript:
let namaVariable = nilai;

atau bisa ditulis seperti ini juga

let abadKekosongan;
// lalu kita berikan nilai ke variable abadKekosongan
abadKekosongan = 4000;

## aturan penggunaan nama pada variable di javascript:
1. tidak boleh di awali dengan angka
2. boleh di awali dengan simbol
3. di dalam nama variable nya boleh mengandung simbol, angka, huruf besar dan huruf kecil
4. nama variable dapat dibaca dan dimengerti oleh orang lain


pada variable terutama untuk tipe data number, ada shorthand yg memudahkan kita seperti berikut:

versi awal tanpa shorthand;
let score = 0
score = score + 1
score = score - 1
score = score * 1
score = score / 1
score = score % 1

versi shorthand;
let score = 0
score += 1
score -= 1
score *= 1
score /= 1
score %= 1

di dalam variable juga terdapat increment dan decrement;
score++ adalah increment (penambahan 1)
score-- adalah decrement (pengurangan 1)

score++
score--

* variable const mirip seperti konstanta variable yg nilainya tetap tidak bisa diubah di bahasa pemrograman lain.

penulisan di javascript nya:
const namaVariable = nilai;

const di javascript tidak bisa di deklarasikan tanpa nilai awal.

------------------------------------------------

math object, memiliki banyak fungsi dan properti yg berguna untuk operasi matematika. seperti pembulatan, nilai konstan dan lainnya. untuk mengecek secara langsung ada method apa saja di dalam math object, kita bisa gunakan console di browser dan ketikkan "Math".

-------------------------------------------------

pada javascript dikenal juga beberapa tools yg bermanfaat seperti berikut ini:
* console.log(), punya banyak fungsi dalamnya selain log(), ada warn() untuk peringatan, error() untuk error, dan lain lain. Untuk melihat ada fungsi apa saja bisa ketikkan console pada console di dalam browser, nantinya akan muncul fungsi fungsi nya.

* alert, untuk memberikan peringatan tetapi alert akan muncul di halaman tab yg dibuka dengan sebuah pop up.

* prompt, seperti alert tapi pada prompt kita bisa melakukan input data yg nantinya data tersebut akan muncul di dalam log.

--------------------------------------------------

Array

array adalah deretan / urutan data dari sekumpulan nilai. contoh daftar putar lagu, deretan komentar pada aplikasi tiktok dan lain sebagainya.
cara penulisan array:

let namaArray = [];
NOTE: didalam [] bisa di isikan kumpulan string, kumpulan number, bahkan kumpulan campuran antar string, number dan tipe data lainnya.

* cara mengubah nilai pada array:
namaArray[<posisi yang ingin diganti, berupa number>] = "nilai barunya";

* cara menambah nilai pada array:
namaArray[<posisi yang ingin ditempati nilai baru, berupa number>] = "nilai barunya";


ada banyak method pada array yang bisa dilihat dan dibaca dari website website dokumentasi nya.
# Method pada array
    - push, menambahkan item pada akhir array. contoh: namaArray.push( <nilai> || <nilai1>, <nilai2>, ... <nilaiN>);
    - pop, menghapus item dari paling akhir array. contoh: namaArray.pop();
    - shift, menghapus item dari paling awal array. contoh: namaArray.shift();
    - unshift, menambahkan item pada awal array. contoh: namaArray.unshift( <nilai> || <nilai1>, <nilai2>, ... <nilaiN );

    % Method lain pada array yg sering digunakan.
    - concat, menggabungkan array
    - includes, mencari suatu nilai di dalam array
        contoh:
        const fruits = ["Banana", "Orange", "Apple", "Mango"];
        fruits.includes("Mango"); // is true 

    - indexOf, sama seperti penggunaan indexOf pada string
    - join, membuat suatu string dari sebuah array
    - reverse, membalikkan urutan nilai dari array
    - slice, menyalin sebagian nilai dari array
    - splice, menghapus / mengubah element array
    - sort, mengurutkan nilai pada array

NOTE: const / konstanta pada array.
const memang bersifat tetap / isi dari variable nya tidak bisa diubah, tapi ini tidak berlaku untuk object dan array, ini karena object pada javascript bersifat mutable, sehingga value dan properti pada object bisa diubah. 
    Kalau kita mengetikkan typeOf di console pada browser seperti berikut:
        let nilai = [20, 30, 40, 50]
        undefined
        typeof nilai
        "object" 
    bisa dilihat bahwa array nilai memiliki tipe object. jadi pada dasarnya array itu adalah object.


* nested array / array berlapis / bersarang / multidimension array
contoh nested array:
    const board = [
        [null, null, '0'],
        ['X', '0', null],
        ['0', null, 'X']
    ]

--------------------------------------------------

* Object, adalah sekumpulan properti yg merupakan sebuah key-value. object ini mirip seperti array tapi bukan array. Cara mengakses suatu object dengan menggunakan custom keys.
format penulisan object nya seperti berikut:
const namaObject = {
    properti-1 / key-1 : value-1,
    properti-2 / key-2 : value-2,
    properti-3 / key-3 : value-3,
    .
    .
    .
    properti-N : value-N,
}

contoh:

const fitnessData = {
    totalSteps      :   21323,
    totalMiles      :   22.24,
    avgCaloriesBurn :   4233,44
}

# contoh pembuatan object:
const barang = {
  judul: 'Sepatu',
    harga: 200000,
    isReady: true,
    size: [38, 39, 40, 41, 42, 43, 44],
    location: {
                indonesia: 49,
                singapore: 33,
                malaysia: 42,
                brunei: 43
            }
}


# Cara memanggil data dari suatu object
namaObject.<properti>;

    contoh:
    barang.judul;
    barang.location.indonesia;
    barang.size[0];


# Cara mengubah data / nilai dan menambah data baru di suatu object

- format mengubah data di object:
namaObject.<properti> = <nilai baru>;
or
namaObject['properti'] = 'nilai baru';


- format menambah data baru di object:
namaObject.<properti baru> = <nilainya>;


# Object di dalam array dan cara mengakses nya

- contoh kita membuat array yg memiliki object seperti dibawah ini:
const shoppingCart1 = [
    {
    product: 'vue js',
    price: 1.22,
    quantity: 3
},
    {
    product: 'react js',
    price: 2.32,
    quantity: 1
},
    {
    product: 'angular.js',
    price: 3.32,
    quantity: 2
}
]

- cara mengakses data object tersebut bisa dengan cara seperti berikut:
shoppingCart1[0];
output>> Object { product: "vue js", price: 1.22, quantity: 3 }

shoppingCart1[1];
output>> Object { product: "react js", price: 2.32, quantity: 1 }

shoppingCart1[1].product;
output>> "react js"

shoppingCart1[1].price;
output>> 2.32 

shoppingCart1[1].quantity;
output>> 1

--------------------------------------------------

* Perulangan, melakukan hal yg sama sebanyak data / kondisi.

Tipe tipe perulangan:
1. for
for (expression 1; expression 2; expression 3) {
  // code block to be executed
}

- contoh:
for   inisial; | kondisi; | increment / decrement
for (let i = 1; i <= 10; i++) {
    console.log(i);
}

2. while -> melakukan perulangan pada sebuah blok kode selama kondisi yang dicek bernilai true.

while (condition) {
  // code block to be executed
}

- contoh:
while (i < 10) {
  text += "The number is " + i;
  i++;
}

2a. Do while loop -> varian dari while loop. Perulangan ini akan menjalankan blok kode sekali sebelum melakukan pengecekan apakah kondisi nya bernilai true, lalu akan diulang selama kondisi nya bernilai true.
do {
  // code block to be executed
}
while (condition);

- contoh:
do {
  text += "The number is " + i;
  i++;
}
while (i < 10); 



3. for..of -> melakukan perulangan pada values / isi dari sebuah object yang dapat diubah (iterable). Contohnya arrays, strings, maps, NodeLists dan lainnya

for (variable of iterable) {
  // code block to be executed
}

# variable - For every iteration the value of the next property is assigned to the variable. Variable can be declared with const, let, or var.
# iterable - An object that has iterable properties.

- contoh:
// array
const cars = ["BMW", "Volvo", "Mini"];

let text = "";
for (let x of cars) {
  text += x;
}

// string
let language = "JavaScript";

let text = "";
for (let x of language) {
text += x;
}

// set
const letters = new Set(["a","b","c"]);

for (const x of letters) {
  // code block to be executed
}

// map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

for (const x of fruits) {
  // code block to be executed
}


4. for..in -> melakukan perulangan pada properti sebuah object. Bisa juga untuk perulangan pada properti sebuah array.
for (key in object) {
  // code block to be executed
}

for (variable in array) {
  code
}

- contoh:
// object
const person = {fname:"John", lname:"Doe", age:25};

let text = "";
for (let x in person) {
  text += person[x];
} 

Example Explained

    The for in loop iterates over a person object
    Each iteration returns a key (x)
    The key is used to access the value of the key
    The value of the key is person[x]


// array
const numbers = [45, 4, 9, 16, 25];

let txt = "";
for (let x in numbers) {
  txt += numbers[x];
}



--------------------------------------------------

* Perulangan for dengan array

contoh penulisan:
const animals = ['cat', 'deer', 'bird', 'koala'];

for (let i = 0; i < animals.length; i++) {
    console.log(i, animals[i]);
}

NOTE: setiap melakukan perulangan dengan array, selalu awali "nilai awal dengan 0" dan "batasnya sampai panjang data array" yg akan digunakan.

--------------------------------------------------

* nested loop, bisa terjadi jika kita mendapatkan suatu data array yang di dalamnya ada array lagi.

--------------------------------------------------

* Perulangan menggunakan perintah WHILE.
perulangan while akan terus berjalan selama kondisi tesnya bernilai true.

penulisan nya:
let num = 0;
while (num < 10) {
    console.log(num);
    num++;
}

--------------------------------------------------

* Break & Continue

- Break, digunakan untuk menghentikan perulangan baik jika ada kondisi yang harus terpenuhi ataupun jika tidak ada kondisi, yang artinya kita bebas menggunakan break. Tapi di sarankan untuk menggunakan kondisi saja agar lebih aman. Biasanya break digunakan pada switch() statement. Break juga bisa digunakan untuk keluar dari sebuah perulangan,

- contoh:
for (let i = 0; i < 10; i++) {
  if (i === 3) { break; }
  text += "The number is " + i + "<br>";
} 

- Continue, digunakan untuk melakukan break pada 1 buah pengulangan, jika ada kondisi yang terpenuhi terjadi dan berlanjut dengan pengulangan selanjutnya yang ada di dalam loop.

- contoh:
for (let i = 0; i < 10; i++) {
  if (i === 3) { continue; }
  text += "The number is " + i + "<br>";
}

contoh diatas akan melakukan skip pada nilai 3.

--------------------------------------------------

* Function, potongan kode yang memungkinkan untuk digunakan kembali.
cara penulisan:
function namaFunction() {
    isi statement yang diinginkan;
}

untuk menggunakan function nya, kita bisa memanggil namaFunction(); saja.

# parameter & argument, sama tapi tidak serupa. Parameter digunakan pada tanda kurung setelah nama function, sedangkan argument digunakan saat kita memanggil function dengan namanya dan di dalam tanda kurung nya ada argument.
contoh parameter
function namaFunction(parameter) {

}

contoh argument
namaFunction(argument);

## contoh arrow function:
hello = () => {
  return "Hello World!";
} 

// dengan parameter
let myFunction = (a, b) => a * b;

// dengan keyword this
Dengan arrow function, keyword this tidak akan dilakukan binding. sedangkan pada function biasa keyword this merepresentasikan object yang dipanggil function, yang mana bisa jadi window, document, sebuah button atau lainnya. Pada arrow function, keyword this akan selalu merepresentasikan object yang mendefinisikan arrow function itu sendiri. Contoh:

  -- kedua contoh dibawah ini, sama sama memanggil sebuah method 2 kali, yang pertama saat halaman selesai dimuat (loads), dan yang kedua saat user mengklik sebuah button.

  -# contoh 1:
Dengan sebuah function biasa / regular, 'this' merepresentasikan object yang memanggil function nya:
// Regular Function:
hello = function() {
  document.getElementById("demo").innerHTML += this;
}

// The window object calls the function:
window.addEventListener("load", hello);

// A button object calls the function:
document.getElementById("btn").addEventListener("click", hello); 

Hasilnya -> 2 object berbeda, window dan button.


  -# contoh 2:
Dengan sebuah arrow function, 'this merepresentasikan pemilik dari function nya:
// Arrow Function:
hello = () => {
  document.getElementById("demo").innerHTML += this;
}

// The window object calls the function:
window.addEventListener("load", hello);

// A button object calls the function:
document.getElementById("btn").addEventListener("click", hello); 

Hasilnya -> object yang sama, yaitu window, karena window object adalah pemilik function nya.

--------------------------------------------------

* Return, akan mengakhiri proses di dalam fungsi dan akan memberikan nilai yg di definisikan pada saat fungsi dipanggil.
Jika sudah memberikan return pada suatu function maka baris baris statement setelah return tidak akan di jalankan, karna return akan menjadi akhirnya.

--------------------------------------------------

* Scope, visibilitas dari suatu variable yang tergantung dari ruang lingkup nya.

contoh 1:
let linux = 'Redhat';

function easyLinux() {
    let linux = 'Debian';
    console.log('linux'); // Debian
}

console.log('linux'); // Redhat

Contoh 1 diatas adalah contoh dari scope, dimana variable linux ada 2 yaitu di dalam dan diluar function, maka hasil ketika function dan variable diluar nya dipanggil akan menghasilkan output yg berbeda.


contoh 2:
let linux = 'Redhat';

function easyLinux() {
    console.log('linux'); // Redhat
}

console.log('linux'); // Redhat

Contoh 2 diatas, adalah contoh ketika variable yg ada diluar function di deklarasikan dan dipanggil ke dalam function maka output nya akan sama, ini dikarenakan di dalam function tidak di deklarasikan ulang variabel tersebut seperti di contoh 1.


contoh 3:
function easyLinux() {
    let linux = 'Debian';
}

easyLinux()
console.log('linux');

Contoh 3 diatas, adalah contoh ketika variable linux dibuat di dalam function tapi tidak dipanggil lewat console di dalam function nya, melainkan variable linux di panggil dari luar function, dan hasilnya akan error karena variable linux yang ada di dalam function itu tidak bisa diakses dari luar function nya, walaupun sebelum di console.log sudah dipanggil function nya seperti diatas.

--------------------------------------------------

* Method, adalah suatu function yang berada di dalam suatu object, misal seperti Math.random() adalah function yang ada di object Math / bisa dibilang juga random() adalah method yg ada di object Math.

--------------------------------------------------

* this -> mengarah pada sebuah object yang tergantung bagaimana 'this' ini digunakan / dipanggil. Bisa juga dikatakan this adalah keyword atau cara untuk memanggil suatu properti yang dimiliki oleh object yang sama dengan tujuan untuk mendapatkan nilainya. Keyword this merujuk pada object object berbeda tergantung bagaimana this itu digunakan, contoh:

  - Pada sebuah object method (function yang ada didalam sebuah object), this merujuk pada object itu.
## contoh this pada object method bisa dilihat pada properti salam:
const saya = {
    nama: 'naruto',
    hobi: 'berlatih ninjutsu',
    salam: function() {
        return `saya adalah ${this.nama}. Hobi saya adalah ${this.hobi}`
    }
}

  - Jika 'this' sendiri saja, maka merujuk pada global object.
## contoh this dibawah akan merujuk pada global window:
let x = this;
merujuk pada object window.


  - Pada sebuah function, this merujuk pada global object nya.
## contoh this dibawah akan merujuk pada global window juga:
function myFunction() {
  return this;
}

  - Pada sebuah function, dalam 'strict mode', this bernilai 'undefined'.
## contoh:
"use strict";
function myFunction() {
  return this;
}

  - Pada sebuah event, this merujuk pada elemen yang menerima event nya.
## contoh:
<button onclick="this.style.display='none'">
  Click to Remove Me!
</button> 

  - Method Method seperti call(), apply(), dan bind() bisa merujuk pada object manapun.
## contoh dibawah, memanggil person1.fullName() dengan person2 sebagai argument nya. 'this' pada method fullName di person1 akan di isi berdasarkan pada person2, bahkan jika fullName adalah sebuah method dari person1 juga bisa digunakan dengan value dari object lain seperti person2:
const person1 = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}

const person2 = {
  firstName:"John",
  lastName: "Doe",
}

// Return "John Doe":
person1.fullName.call(person2);



  NOTE: this tidak bisa diubah nilainya.

--------------------------------------------------

* try and catch

try {
  Block of code to try
}
catch(err) {
  Block of code to handle errors
} 

try digunakan untuk menjalankan perintah perintah / statement program, sedangkan catch digunakan untuk menangkap error ketika ada kesalahan sehingga tidak akan membuat program break code / blocking.

contoh:
try {
    saya.kenalan();
} catch {
    console.log('error!!');
}

console.log('setelah proses try and catch);

penjelasan: dengan menggunakan try and catch, maka baris console.log dibawah nya akan tetap dijalankan walaupun ada kesalahan / error di bagian try and catch nya dikarenakan object saya dan function / method kenalan belum dibuat.

--------------------------------------------------

* Throw, and Try...Catch...Finally

1. statement try mendefinisikan sebuah blok kode untuk dijalankan (dicoba).


2. statement catch mendefinisikan sebuah blok kode untuk menangani error apapun yang muncul.


3. statement finally mendefinisikan sebuah blok kode untuk dijalankan terlepas dari hasilnya seperti apa. Baru bisa dijalankan setelah try dan catch. Contoh di blok finally, kita jadikan untuk menghapus / mereset isi dari tag input setelah di klik button nya.
try {
  Block of code to try
}
catch(err) {
  Block of code to handle errors
}
finally {
  Block of code to be executed regardless of the try / catch result
} 


4. statement throw mendefinisikan sebuah error yang dibuat secara manual oleh developer. Terjadi ketika error muncul maka kode javascript yang dijalankan akan berhenti secara normal dan membuat sebuah pesan error. Kondisi teknis nya disebut: Javascript akan melakukan 'throw an exception' / 'throw an error'. Kemudian, javascript akan membuat 'Error Object' dengan 2 buah properti, 'name' dan 'message'. Exception tadi bisa berupa String, Number, Boolean atau sebuah object, contohnya:
  throw "Too big";    // throw a text
  throw 500;         // throw a number

# jika menggunakan 'throw' bersamaan dengan try dan catch, kita bisa mengontrol alur program dan membuat pesan error buatan.

--------------------------------------------------

* ForEach method, dapat menggunakan callback function yang berarti dapat memanggil sebuah fungsi sebanyak jumlah element yang dimiliki array.

contoh:

const angka = [1,2,3,4,5,6,7,8,9];

angka.forEach(function(n) {
    console.log(n * n);
    // output: 1,4,9,16...
})

untuk method forEach ini bisa menggunakan anonymous function ataupun function yang kita buat sendiri. contoh diatas adalah forEach dengan anonymous function.

--------------------------------------------------

* Map, adalah suatu function yg dimiliki juga oleh tipe data array dimana map juga salah satu function yg bisa menerima callback function dari suatu array. Callback function / nilai balik adalah array baru yang sudah dimodifikasi melalui callback function dari suatu array / function yang kita buat.  Jadi output dari map adalah array lagi dan array ini memiliki nilai yg bisa berbeda dari sumber array yang digunakan.

contoh:

const expression = ['rofl', 'lol', 'omg', 'ttyl'];
const capsExpression = expression.map(function(exprs) {
    return exprs.toUpperCase();
});

expression; //['rofl', 'lol', 'omg', 'ttyl']
capsExpression; //['ROFL', 'LOL', 'OMG', 'TTYL']

--------------------------------------------------

* setTimeout & setInterval, callback function yg bukan berasal dari array. fungsi nya untuk memberi waktu jeda dan melakukan perulangan di setiap waktu yang ditentukan.

contoh:

setTimeout(() => {
    // proses
}, 3000) // proses akan dieksekusi setelah 3 detik

setInterval(() => {
    // proses
}, 2000) // akan melakukan perulangan proses setiap 2 detik

--------------------------------------------------

* filter, function yg akan mengembalikan nilai array lagi yg sudah di manipulasi sesuai dengan kriteria yang ditetapkan.

contoh:

const angka = [1,2,3,4,5,6,7];
const ganjil = angka.filter(n => {
    return n % 2 === 1;
});

--------------------------------------------------

* every, sebuah function yg akan mengembalikan nilai boolean. true jika seluruh nilai yg ada pada suatu array memiliki kriteria yg sama. false jika sebaliknya.

* some, mirip dengan every, tapi lebih fleksibel. hasilnya akan true jika salah satu isi dari array memiliki kriteria yg sama. akan false jika sama sekali tidak ada yg sesuai kriteria.

contoh every:

const kataKata = ['kita', 'kamu', 'saya', 'aku'];
kata.every(kata => {
    return kata.length === 4;
}); // true

contoh some:

const kataKata = ['kita', 'kamu', 'saya', 'aku'];
kata.some(kata => {
    return kata.length === 4;
}); // true

--------------------------------------------------

* reduce, melakukan proses pengulangan sebanyaknya element milik suatu array. nilai baliknya adalah single value. mirip dengan for loop. bedanya reduce function ini bisa digunakan untuk kondisi seperti if else juga dan lain lain mungkin, bisa dicari lebih tau lagi di internet.

contoh:

const subtotal = [1500, 2000, 2500, 3000, 3500];

const total = subtotal.reduce((currentTotal, singleSubTotal) => {
    return currentTotal + singleSubTotal;
});

--------------------------------------------------

* Date Get Methods

untuk membuat date objects kita gunakan 'new Date()'
karna new Date() mengembalikan object date / tanggal dengan tanggal dan waktu terkini sesuai waktu local nya.

contoh: const date = new Date();

Date Get Methods

Method 	                Description
- getFullYear() 	    Get year as a four digit number (yyyy)
contoh: 
    const d = new Date("2021-03-25");
    d.getFullYear();


- getMonth() 	        Get month as a number (0-11)
contoh:
    const d = new Date("2021-03-25");
    d.getMonth();


- getDate() 	        Get day as a number (1-31)
contoh:
    const d = new Date("2021-03-25");
    d.getDate();    


- getDay() 	            Get weekday as a number (0-6)
contoh:
    const d = new Date("2021-03-25");
    d.getDay();


- getHours() 	        Get hour (0-23)
contoh:
    const d = new Date("2021-03-25");
    d.getHours();


- getMinutes() 	        Get minute (0-59)
contoh:
    const d = new Date("2021-03-25");
    d.getMinutes();


- getSeconds() 	        Get second (0-59)
contoh:
    const d = new Date("2021-03-25");
    d.getSeconds();


- getMilliseconds() 	Get millisecond (0-999)
contoh:
    const d = new Date("2021-03-25");
    d.getMilliseconds();


- getTime() 	        Get time (milliseconds since January 1, 1970)
contoh:
    const d = new Date("2021-03-25");
    d.getTime();


--------------------------------------------------

* Set Date Methods -> melakukan setup waktu dari tahun, bulan, hari, jam, menit, detik sampai mili detik untuk sebuah object date.

Method 	                Description
- setDate() 	        Set the day as a number (1-31)
contoh:
    const d = new Date();
    d.setDate(15);

// untuk menambah hari ke sebuah tanggal
    d.setDate(d.getDate() + 50);


- setFullYear() 	    Set the year (optionally month and day)
contoh:
    const d = new Date();
    d.setFullYear(2020); 

(opsional) -> d.setFullYear(2020, 11, 3);

    
- setHours() 	        Set the hour (0-23)
contoh:
    const d = new Date();
    d.setHours(22);


- setMilliseconds() 	Set the milliseconds (0-999)
- setMinutes() 	        Set the minutes (0-59)
contoh:
    const d = new Date();
    d.setMinutes(30);


- setMonth() 	        Set the month (0-11)
contoh:
    const d = new Date();
    d.setMonth(11);


- setSeconds() 	        Set the seconds (0-59)
contoh:
    const d= new Date();
    d.setSeconds(30);


- setTime() 	        Set the time (milliseconds since January 1, 1970)

--------------------------------------------------

* javascript if, else, dan else if, switch

You can use conditional statements in your code to do this.

In JavaScript we have the following conditional statements:

    - Gunakan if untuk menspesifikasikan sebuah blok kode yang akan dijalankan, if untuk kondisi bernilai true.
    - Gunakan else untuk menspesifikasikan blok kode yang akan dijalankan, jika kondisi yang sebelumnya pada blok if bernilai false.
    - Gunakan else if untuk menspesifikasikan kondisi baru untuk di test, jika kondisi pertama nya salah.
    - Gunakan switch untuk memiliih satu dari banyak nya alternative blok kode untuk dijalankan.

# If statement:
if (condition) {
  //  block of code to be executed if the condition is true
}

- contoh:
if (hour < 18) {
  greeting = "Good day";
} 

# Else statement:
if (condition) {
  //  block of code to be executed if the condition is true
} else {
  //  block of code to be executed if the condition is false
}

- contoh:
if (hour < 18) {
  greeting = "Good day";
} else {
  greeting = "Good evening";
}

# Else if statement:
if (condition1) {
  //  block of code to be executed if condition1 is true
} else if (condition2) {
  //  block of code to be executed if the condition1 is false and condition2 is true
} else {
  //  block of code to be executed if the condition1 is false and condition2 is false
}

- contoh:
if (time < 10) {
  greeting = "Good morning";
} else if (time < 20) {
  greeting = "Good day";
} else {
  greeting = "Good evening";
}

# Switch statement:
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
} 

- contoh:
switch (new Date().getDay()) {
  case 6:
    text = "Today is Saturday";
    break;
  case 0:
    text = "Today is Sunday";
    break;
  default:
    text = "Looking forward to the Weekend";
}

// default keyword -> untuk menspesifikasikan pilihan kode terakhir jika tidak ditemukan adanya persamaan pada blok blok kode sebelumnya.


--------------------------------------------------

* Class -> Template untuk javascript object.

Untuk membuat class, gunakan keyword class dan selalu tambahkan method bernama constructor():
class ClassName {
  constructor() { ... }
}

  - contoh:
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
}

NOTE: name & year diatas adalah properti nya.

Untuk menggunakan sebuah class, kita bisa gunakan class untuk membuat object seperti berikut:
const myCar1 = new Car("Ford", 2014);
const myCar2 = new Car("Audi", 2019);

## Class Methods -> dibuat dengan sintaks kode yang sama seperti method pada object. 
Gunakan keyword class untuk membuat class. Selalu gunakan method constructor lalu tambahkan sejumlah method yang diinginkan.
class ClassName {
  constructor() { ... }
  method_1() { ... }
  method_2() { ... }
  method_3() { ... }
}

  - contoh membuat class method dengan nama 'age', yang mengembalikan umur Car / Car age:
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
  age() {
    const date = new Date();
    return date.getFullYear() - this.year;
  }
}

const myCar = new Car("Ford", 2014);
document.getElementById("demo").innerHTML =
"My car is " + myCar.age() + " years old.";

// bisa juga mengirimkan parameter ke method pada class:
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
  age(x) {
    return x - this.year;
  }
}

const date = new Date();
let year = date.getFullYear();

const myCar = new Car("Ford", 2014);
document.getElementById("demo").innerHTML=
"My car is " + myCar.age(year) + " years old."; 

--------------------------------------------------

* Modules -> javascript modules memudahkan kita untuk membagi bagi kode kita ke beberapa file yang berbeda. Ini memudahkan untuk mengatur sebuah basis kode / base code. Modules bisa diimport dari file external dengan statement 'import'. Modules juga bergantung pada 'type="module"' pada tag script.

  - contoh:
<script type="module">
import message from "./message.js";
</script> 


# export -> modules yang beriisikan function atau variable bisa disimpan pada file external. Ada 2 tipe export: Named export & Default export.

  #- Named export,
  contoh kita membuat sebuah file bernama person.js dan mengisinya dengan hal hal yang mau kita export. Kita bisa membuatnya dengan 2 cara, 'In-line individually' atau 'all at once at the bottom'.
    - contoh In-line individually:
    person.js
      export const name = "Jesse";
      export const age = 40;

    - contoh All at once at the bottom:
    person.js
      const name = "Jesse";
      const age = 40;

      export {name, age};

  #- Default export,
  contoh kita buat sebuah file bernama message.js, untuk default export kita hanya boleh punya 1 saja pada sebuah file. 
    - contoh:
    message.js
      const message = () => {
      const name = "Jesse";
      const age = 40;
      return name + ' is ' + age + 'years old.';
      };

      export default message;


# import -> kita bisa melakukan import dengan 2 cara, berdasarkan file nya apakah dibuat dengan nama 'export' atau 'default export'.
Dengan named export, bisa menggunakan kurung kurawal {}, sedangkan default export tidak bisa menggunakan kurung kurawal.
  - contoh import dari named export dari file person.js diatas tadi:
    import { name, age } from "./person.js";

  - contoh import dari default export dari file message.js diatas tadi:
    import message from "./message.js";

--------------------------------------------------

* Properti Getter & Setter
ES5 memperbolehkan kita untuk mendefinisikan object method dengan sebuah sintaks seperti getting / setting sebuah properti.

- Berikut contoh membuat sebuah getter untuk property bernama fullName:

// Create an object:
var person = {
  firstName: "John",
  lastName : "Doe",
  get fullName() {
    return this.firstName + " " + this.lastName;
  }
};

// Display data from the object using a getter:
document.getElementById("demo").innerHTML = person.fullName; 

// Perlu diperhatikan bahwa digunakan keyword 'get' diatas untuk method fullName nya.

- Berikut contoh membuat sebuah setter dan getter untuk properti language:

var person = {
  firstName: "John",
  lastName : "Doe",
  language : "NO",
  get lang() {
    return this.language;
  },
  set lang(value) {
    this.language = value;
  }
};

// Set an object property using a setter:
person.lang = "en";

// Display data from the object using a getter:
document.getElementById("demo").innerHTML = person.lang;

// Perlu diperhatikan bahwa diatas ada penggunaan keyword 'set' dan 'get pada method lang() nya. Untuk parameter value pada method set, untuk mendeklarasikan variable yang akan digunakan untuk memasukkan nilai dari method set ke properti language nya. Pada saat data language di display di contoh diatas, kita juga bisa mengganti kode person.lang menjadi person.language, bahkan bisa juga diberikan method uppercase.

- Berikut contoh penggunaan setter untuk mengubah language yang akan di set oleh user dengan uppercase:

var person = {
  firstName: "John",
  lastName : "Doe",
  language : "NO",
  set lang(value) {
    this.language = value.toUpperCase();
  }
};

// Set an object property using a setter:
person.lang = "en";

// Display data from the object:
document.getElementById("demo").innerHTML = person.language;


--------------------------------------------------

* Object.defineProperty() -> object baru di ES5. Dengan method ini, kita bisa mendefinisikan object properti / mengubah nilai properti (value) / metadata nya.

  - contoh:

// Create an Object:
var person = {
  firstName: "John",
  lastName : "Doe",
  language : "NO",
};

// Change a Property:
Object.defineProperty(person, "language", {
  value: "EN",
  writable : true,
  enumerable : true,
  configurable : true
});

// memecah / menguraikan isi dari object Properties
var txt = "";
for (var x in person) {
  txt += person[x] + "<br>";
}
document.getElementById("demo").innerHTML = txt;


 - contoh 2, sama seperti diatas hanya saja properti language nya akan di sembunyikan dari enumaration / pengubahan object properti.

// Create an Object:
var person = {
  firstName: "John",
  lastName : "Doe",
  language : "NO",
};

// Change a Property:
Object.defineProperty(person, "language", {
  value: "EN",
  writable : true,
  enumerable : false,
  configurable : true
});

// Enumerate Properties
var txt = "";
for (var x in person) {
  txt += person[x] + "<br>";
}
document.getElementById("demo").innerHTML = txt;

 - contoh 3, membuat setter dan getter untuk mengubah language nya menjadi uppercase:

// Create an Object:
var person = {
  firstName: "John",
  lastName : "Doe",
  language : "NO"
};

// Change a Property:
Object.defineProperty(person, "language", {
  get : function() { return language },
  set : function(value) { language = value.toUpperCase()}
});

// Change Language
person.language = "en";

// Display Language
document.getElementById("demo").innerHTML = person.language; 

--------------------------------------------------

* ES5 Object Methods

--Managing Objects--
// Create object with an existing object as prototype
Object.create(parent, donor)

// Adding or changing an object property
Object.defineProperty(object, property, descriptor)

// Adding or changing object properties
Object.defineProperties(object, descriptors)

// Accessing Properties
Object.getOwnPropertyDescriptor(object, property)

// Returns all properties as an array
Object.getOwnPropertyNames(object)

// Accessing the prototype
Object.getPrototypeOf(object)

// Returns enumerable properties as an array
Object.keys(object)


--Protecting Objects--
// Prevents adding properties to an object
Object.preventExtensions(object)

// Returns true if properties can be added to an object
Object.isExtensible(object)

// Prevents changes of object properties (not values)
Object.seal(object)

// Returns true if object is sealed
Object.isSealed(object)

// Prevents any changes to an object
Object.freeze(object)

// Returns true if object is frozen
Object.isFrozen(object)

--------------------------------------------------

* Function Bind()

dengan method bind(), sebuah object bisa meminjam sebuah method dari object lain.

 - contoh 1, membuat 2 object (person & member). member object akan meminjam method fullName dari object person:

const person = {
  firstName:"John",
  lastName: "Doe",
  fullName: function () {
    return this.firstName + " " + this.lastName;
  }
}

const member = {
  firstName:"Hege",
  lastName: "Nilsen",
}

let fullName = person.fullName.bind(member);

--------------------------------------------------

* The Optional Chaining Operator (?.)
-> mengembalikan undefined jika sebuah object tidak memiliki properti yang dimaksud (jadi tidak mengembalikan sebuah error)

Example
const car = {type:"Fiat", model:"500", color:"white"};
let name = car?.name;

--------------------------------------------------

*** Sisa materi, bisa dipelajari lagi di website codepolitan belajar materi javascript dasar.