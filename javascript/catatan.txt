Template literals:
contoh:
`Hasil 1 + 1 adalah ${2 + 1}`

harus menggunakan backtick ``

------------------------------------------------

NOTE: tiap tipe data primitif di dalam js, masing masing nya memiliki methods nya sendiri yg bisa di cek di ndn mozilla / web lain.

beberapa method menerima argument yg bisa mengubah hasilnya. Argument itu mirip seperti inputan yang kita isikan tetapi argument disini kita isikan di dalam tanda kurung. 

contoh:
let movie = 'blacklist'
movie.indexOf('k')
output> 4

-------------------------------------------------

tipe data primitif di dalam js:
- number, ciri ciri nya di dalam javascript:
a. hanya memiliki 1 jenis tipe data yaitu number
b. nilainya bisa bilangan positif
c. nilainya bisa bilangan negatif
d. nilainya bisa seluruh angka (int)
e. nilainya bisa angka desimal

NaN, not a number merepresentasikan bahwa suatu input / hasil proses itu bukan sebuah number / angka, tapi NaN ini juga adalah bagian dari number. NaN akan muncul jika kita mengetikkan seperti dibawah ini di dalam console browser:
0 / 0 menghasilkan NaN.
1 + NaN menghasilkan NaN.

- boolean, hanya berisi true dan false saja.

- string, untuk mengetikkan nilai berupa teks (huruf, nilai, simbol dll) yang dibungkus oleh kutip, baik satu kutip atau dua kutip.
contoh string:
> 'selamat "yaa kamu" hahaha'
> "coba ini' ya"

* string memiliki nilai indeks, seperti pada array. nilai indeks nya dimulai dari 0, contoh:
string    C O D E
indeks    0 1 2 3

cara penggunaan indeks:
let x = "code"
x[0]
output> c

untuk mengetahui panjang indeks dari suatu text:
<namaVariable>.length

contoh concate (penggabungan) teks string:
x = x + 'html'
or
y = x + 'javascript'

    ## String Methods, adalah suatu aksi yg disediakan javascript, saat kita ingin:
    - mencari sebuah huruf / kata
    - menggantikan karakter 
    - mengubah huruf besar / kecil


- null, nilai kosong yg sengaja dibuat karna perlu untuk dibuat.

- undefined, variable yg dibuat tapi belum ada isinya / tidak ada sama sekali. contoh:
let nama;

--------------------------------------------------------------------

* variable pada javascript ->
penulisan variable di javascript:
let namaVariable = nilai;

atau bisa ditulis seperti ini juga

let abadKekosongan;
// lalu kita berikan nilai ke variable abadKekosongan
abadKekosongan = 4000;

## aturan penggunaan nama pada variable di javascript:
1. tidak boleh di awali dengan angka
2. boleh di awali dengan simbol
3. di dalam nama variable nya boleh mengandung simbol, angka, huruf besar dan huruf kecil
4. nama variable dapat dibaca dan dimengerti oleh orang lain


pada variable terutama untuk tipe data number, ada shorthand yg memudahkan kita seperti berikut:

versi awal tanpa shorthand;
let score = 0
score = score + 1
score = score - 1
score = score * 1
score = score / 1
score = score % 1

versi shorthand;
let score = 0
score += 1
score -= 1
score *= 1
score /= 1
score %= 1

di dalam variable juga terdapat increment dan decrement;
score++ adalah increment (penambahan 1)
score-- adalah decrement (pengurangan 1)

score++
score--

* variable const mirip seperti konstanta variable yg nilainya tetap tidak bisa diubah di bahasa pemrograman lain.

penulisan di javascript nya:
const namaVariable = nilai;

const di javascript tidak bisa di deklarasikan tanpa nilai awal.

------------------------------------------------

math object, memiliki banyak fungsi dan properti yg berguna untuk operasi matematika. seperti pembulatan, nilai konstan dan lainnya. untuk mengecek secara langsung ada method apa saja di dalam math object, kita bisa gunakan console di browser dan ketikkan "Math".

-------------------------------------------------

pada javascript dikenal juga beberapa tools yg bermanfaat seperti berikut ini:
* console.log(), punya banyak fungsi dalamnya selain log(), ada warn() untuk peringatan, error() untuk error, dan lain lain. Untuk melihat ada fungsi apa saja bisa ketikkan console pada console di dalam browser, nantinya akan muncul fungsi fungsi nya.

* alert, untuk memberikan peringatan tetapi alert akan muncul di halaman tab yg dibuka dengan sebuah pop up.

* prompt, seperti alert tapi pada prompt kita bisa melakukan input data yg nantinya data tersebut akan muncul di dalam log.

--------------------------------------------------

* Array

array adalah deretan / urutan data dari sekumpulan nilai. contoh daftar putar lagu, deretan komentar pada aplikasi tiktok dan lain sebagainya.
cara penulisan array:

let namaArray = [];
NOTE: didalam [] bisa di isikan kumpulan string, kumpulan number, bahkan kumpulan campuran antar string, number dan tipe data lainnya.

 -* cara mengubah nilai pada array:
namaArray[<posisi yang ingin diganti, berupa number>] = "nilai barunya";

 -* cara menambah nilai pada array:
namaArray[<posisi yang ingin ditempati nilai baru, berupa number>] = "nilai barunya";

 -* cara mengambil elemen dari array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];

// bisa dengan function at() seperti dibawah ini
let fruit = fruits.at(2);

atau

// bisa dengan [] seperti ini
let fruit = fruits[2];

NOTE: function at() juga bisa digunakan pada string, contoh:
const name = "W3Schools";
let letter = name.at(2);
// atau
let letter = name[2];   // cara biasa


ada banyak method pada array yang bisa dilihat dan dibaca dari website website dokumentasi nya.
# Method pada array
    - push, menambahkan item pada akhir array. contoh: namaArray.push( <nilai> || <nilai1>, <nilai2>, ... <nilaiN>);
    - pop, menghapus item dari paling akhir array. contoh: namaArray.pop();
    - shift, menghapus item dari paling awal array. contoh: namaArray.shift();
    - unshift, menambahkan item pada awal array. contoh: namaArray.unshift( <nilai> || <nilai1>, <nilai2>, ... <nilaiN );

    % Method lain pada array yg sering digunakan.
    - concat, menggabungkan array
    - includes, mencari suatu nilai di dalam array
        contoh:
        const fruits = ["Banana", "Orange", "Apple", "Mango"];
        fruits.includes("Mango"); // is true 

    - indexOf, sama seperti penggunaan indexOf pada string
    - join, membuat suatu string dari sebuah array
    - reverse, membalikkan urutan nilai dari array
    - slice, menyalin sebagian nilai dari array
    - splice, menghapus / mengubah element array
    - sort, mengurutkan nilai pada array

NOTE: const / konstanta pada array.
const memang bersifat tetap / isi dari variable nya tidak bisa diubah, tapi ini tidak berlaku untuk object dan array, ini karena object pada javascript bersifat mutable, sehingga value dan properti pada object bisa diubah. 
    Kalau kita mengetikkan typeOf di console pada browser seperti berikut:
        let nilai = [20, 30, 40, 50]
        undefined
        typeof nilai
        "object" 
    bisa dilihat bahwa array nilai memiliki tipe object. jadi pada dasarnya array itu adalah object.


 -* nested array / array berlapis / bersarang / multidimension array
contoh nested array:
    const board = [
        [null, null, '0'],
        ['X', '0', null],
        ['0', null, 'X']
    ]

--------------------------------------------------

* Object, adalah sekumpulan properti yg merupakan sebuah key-value. object ini mirip seperti array tapi bukan array. Cara mengakses suatu object dengan menggunakan custom keys.
format penulisan object nya seperti berikut:
const namaObject = {
    properti-1 / key-1 : value-1,
    properti-2 / key-2 : value-2,
    properti-3 / key-3 : value-3,
    .
    .
    .
    properti-N : value-N,
}

contoh:

const fitnessData = {
    totalSteps      :   21323,
    totalMiles      :   22.24,
    avgCaloriesBurn :   4233,44
}

# contoh pembuatan object:
const barang = {
  judul: 'Sepatu',
    harga: 200000,
    isReady: true,
    size: [38, 39, 40, 41, 42, 43, 44],
    location: {
                indonesia: 49,
                singapore: 33,
                malaysia: 42,
                brunei: 43
            }
}

--------------------------------------------------

# Cara memanggil data dari suatu object
namaObject.<properti>;

    contoh:
    barang.judul;
    barang.location.indonesia;
    barang.size[0];

--------------------------------------------------

# Cara mengubah data / nilai dan menambah data baru di suatu object

- format mengubah data di object:
namaObject.<properti> = <nilai baru>;
or
namaObject['properti'] = 'nilai baru';

contoh:
myFather.nationality = "English";

- contoh menambah method baru di object:
myFather.name = function () {
  return this.firstName + " " + this.lastName;
};

- format menambah data baru di object:
namaObject.<properti baru> = <nilainya>;

- cara menghapus sebuah properti dari sebuah object:
const person = {
  firstName: "John",
  lastName: "Doe",
  age: 50,
  eyeColor: "blue"
};

delete person.age;
// atau bisa dengan ini,
delete person["age"];

--------------------------------------------------

# Object di dalam array dan cara mengakses nya

- contoh kita membuat array yg memiliki object seperti dibawah ini:
const shoppingCart1 = [
    {
    product: 'vue js',
    price: 1.22,
    quantity: 3
},
    {
    product: 'react js',
    price: 2.32,
    quantity: 1
},
    {
    product: 'angular.js',
    price: 3.32,
    quantity: 2
}
]

- cara mengakses data object tersebut bisa dengan cara seperti berikut:
shoppingCart1[0];
output>> Object { product: "vue js", price: 1.22, quantity: 3 }

shoppingCart1[1];
output>> Object { product: "react js", price: 2.32, quantity: 1 }

shoppingCart1[1].product;
output>> "react js"

shoppingCart1[1].price;
output>> 2.32 

shoppingCart1[1].quantity;
output>> 1


--------------------------------------------------

# Properti Getter & Setter
ES5 memperbolehkan kita untuk mendefinisikan object method dengan sebuah sintaks seperti getting / setting sebuah properti. Dengan menggunakan get untuk mengakses properti function dari dalam object, memudahkan kita untuk membuat kode sintaks yang sederhana. Dengan getter dan setter juga, javascript bisa mengamankan kualitas data nya.

- Berikut contoh membuat sebuah getter untuk property bernama fullName:

// Create an object:
var person = {
  firstName: "John",
  lastName : "Doe",
  get fullName() {
    return this.firstName + " " + this.lastName;
  }
};

// Display data from the object using a getter:
document.getElementById("demo").innerHTML = person.fullName; 

// Perlu diperhatikan bahwa digunakan keyword 'get' diatas untuk method fullName nya.

-------

- Berikut contoh membuat sebuah setter dan getter untuk properti language dan bisa mengamankan kualitas datanya:

var person = {
  firstName: "John",
  lastName : "Doe",
  language : "NO",
  get lang() {
    return this.language;
  },
  set lang(value) {
    this.language = value;
  }
};

// Set an object property using a setter:
person.lang = "en";

// Display data from the object using a getter:
document.getElementById("demo").innerHTML = person.lang;

-------

// Perlu diperhatikan bahwa diatas ada penggunaan keyword 'set' dan 'get pada method lang() nya. Untuk parameter value pada method set, untuk mendeklarasikan variable yang akan digunakan untuk memasukkan nilai dari method set ke properti language nya. Pada saat data language di display di contoh diatas, kita juga bisa mengganti kode person.lang menjadi person.language, bahkan bisa juga diberikan method uppercase.

- Berikut contoh penggunaan setter untuk mengubah language yang akan di set oleh user dengan uppercase:

var person = {
  firstName: "John",
  lastName : "Doe",
  language : "NO",
  set lang(value) {
    this.language = value.toUpperCase();
  }
};

// Set an object property using a setter:
person.lang = "en";

// Display data from the object:
document.getElementById("demo").innerHTML = person.language;


--------------------------------------------------

# Object.defineProperty() -> object baru di ES5. Dengan method ini, kita bisa mendefinisikan object properti / mengubah nilai properti (value) / metadata nya.

  - contoh:

// Create an Object:
var person = {
  firstName: "John",
  lastName : "Doe",
  language : "NO",
};

// Change a Property:
Object.defineProperty(person, "language", {
  value: "EN",
  writable : true,
  enumerable : true,
  configurable : true
});

// Change a Property value:
Object.defineProperty(object, property, {value : value}) 

contoh:
const person = {
  firstName: "John",
  lastName : "Doe",
  language : "EN"
};

// Change a property
Object.defineProperty(person, "language", {value : "NO"}); 

// Changing Meta Data
writable : true      // Property value can be changed
enumerable : true    // Property can be enumerated
configurable : true  // Property can be reconfigured 

writable : false     // Property value can not be changed
enumerable : false   // Property can be not enumerated
configurable : false // Property can be not reconfigured 

contoh language menjadi read-only:
Object.defineProperty(person, "language", {writable:false});


contoh language tidak bisa di hitung:
Object.defineProperty(person, "language", {enumerable:false});


// Listing All Properties dari sebuah object:
 const person = {
  firstName: "John",
  lastName : "Doe",
  language : "EN"
};

Object.defineProperty(person, "language", {enumerable:false});
Object.getOwnPropertyNames(person);  // Returns an array of properties 


// Adding a Property ke sebuah object:
// Create an object:
const person = {
  firstName: "John",
  lastName : "Doe",
  language : "EN"
};

// Add a property
Object.defineProperty(person, "year", {value:"2008"}); 


// memecah / menguraikan isi dari object Properties
var txt = "";
for (var x in person) {
  txt += person[x] + "<br>";
}
document.getElementById("demo").innerHTML = txt;

-------

 - contoh 2, sama seperti diatas hanya saja properti language nya akan di sembunyikan dari enumaration / pengubahan object properti.

// Create an Object:
var person = {
  firstName: "John",
  lastName : "Doe",
  language : "NO",
};

// Change a Property:
Object.defineProperty(person, "language", {
  value: "EN",
  writable : true,
  enumerable : false,
  configurable : true
});

// Enumerate Properties
var txt = "";
for (var x in person) {
  txt += person[x] + "<br>";
}
document.getElementById("demo").innerHTML = txt;

-------

 - contoh 3, membuat setter dan getter untuk mengubah language nya menjadi uppercase:

// Create an Object:
var person = {
  firstName: "John",
  lastName : "Doe",
  language : "NO"
};

// Change a Property:
Object.defineProperty(person, "language", {
  get : function() { return language },
  set : function(value) { language = value.toUpperCase()}
});

// Change Language
person.language = "en";

// Display Language
document.getElementById("demo").innerHTML = person.language; 

-------

 - contoh 4, untuk menambah getters dan setters:
// Define object
const obj = {counter : 0};

// Define setters and getters
Object.defineProperty(obj, "reset", {
  get : function () {this.counter = 0;}
});
Object.defineProperty(obj, "increment", {
  get : function () {this.counter++;}
});
Object.defineProperty(obj, "decrement", {
  get : function () {this.counter--;}
});
Object.defineProperty(obj, "add", {
  set : function (value) {this.counter += value;}
});
Object.defineProperty(obj, "subtract", {
  set : function (value) {this.counter -= value;}
});

// Play with the counter:
obj.reset;
obj.add = 5;
obj.subtract = 1;
obj.increment;
obj.decrement;

--------------------------------------------------

* Class -> Template untuk javascript object.

Untuk membuat class, gunakan keyword class dan selalu tambahkan method bernama constructor():
class ClassName {
  constructor() { ... }
}

  - contoh:
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
}

NOTE: name & year diatas adalah properti nya.

Untuk menggunakan sebuah class, kita bisa gunakan class untuk membuat object seperti berikut:
const myCar1 = new Car("Ford", 2014);
const myCar2 = new Car("Audi", 2019);

-------

## Class Methods -> dibuat dengan sintaks kode yang sama seperti method pada object. 
Gunakan keyword class untuk membuat class. Selalu gunakan method constructor lalu tambahkan sejumlah method yang diinginkan.
class ClassName {
  constructor() { ... }
  method_1() { ... }
  method_2() { ... }
  method_3() { ... }
}

  - contoh membuat class method dengan nama 'age', yang mengembalikan umur Car / Car age:
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
  age() {
    const date = new Date();
    return date.getFullYear() - this.year;
  }
}

const myCar = new Car("Ford", 2014);
document.getElementById("demo").innerHTML =
"My car is " + myCar.age() + " years old.";

-------

// bisa juga mengirimkan parameter ke method pada class:
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
  age(x) {
    return x - this.year;
  }
}

const date = new Date();
let year = date.getFullYear();

const myCar = new Car("Ford", 2014);
document.getElementById("demo").innerHTML=
"My car is " + myCar.age(year) + " years old."; 

--------------------------------------------------

# Class inheritance, dibuat menggunakan keyword 'extends'. Sebuah class yang dibuat dengan class inheritance akan mewarisi semua method dari class lain. Inheritance berguna untuk penggunaan kode berulang / reusability, juga penggunaan ulang pada properti dan method dari class yang ada (parent class) ketika kita membuat class yang baru (child class).
- contoh class Model dibawah ini akan mewarisi method method dari class Car:
class Car {
  constructor(brand) {
    this.carname = brand;
  }
  present() {
    return 'I have a ' + this.carname;
  }
}

class Model extends Car {
  constructor(brand, mod) {
    super(brand);
    this.model = mod;
  }
  show() {
    return this.present() + ', it is a ' + this.model;
  }
}

let myCar = new Model("Ford", "Mustang");
document.getElementById("demo").innerHTML = myCar.show();

// output:
I have a Ford, it is a Mustang

// penjelasan:
method super() diatas merujuk pada parent class nya yaitu Car.
Dengan memanggil method super() di dalam constructor method, kita memanggil method constructor dari parent nya dan mendapat akses ke seluruh properti dan method dari parent class nya.

----------------------

* Getters & Setters, pada class juga bisa digunakan. Untuk menambahkan getters dan setters pada class, gunakan 'get' dan 'set' keyword. Bahkan jika getter nya adalah sebuah method, jangan gunakan tanda kurung () ketika mau melakukan get dari nilai properti.
- contoh membuat sebuah getter dan sebuah setter untuk properti 'carname':

class Car {
  constructor(brand) {
    this.carname = brand;
  }
  get cnam() {
    return this.carname;
  }
  set cnam(x) {
    this.carname = x;
  }
}

const myCar = new Car("Ford");

document.getElementById("demo").innerHTML = myCar.cnam; 

// output:
Ford

// penjelasan:
Nama dari method getter dan setter tidak bisa sama dengan nama dari properti nya, dalam hal ini 'carname'. Banyak programmer menggunakan underscore / _ sebelum nama properti nya untuk memisahkan getter/setter dari properti yang asli.

-------

- contoh penggunaan karakter underscore untuk memisahkan getter dan setter dari properti aslinya:
class Car {
  constructor(brand) {
    this._carname = brand;
  }
  get carname() {
    return this._carname;
  }
  set carname(x) {
    this._carname = x;
  }
}

const myCar = new Car("Ford");

document.getElementById("demo").innerHTML = myCar.carname; 

// output:
Ford

-------

- contoh untuk menggunakan setter, gunakan kode yang sama seperti saat melakukan set pada sebuah properti value, yaitu tanpa tanda kurung. Berikut contoh penggunaan sebuah setter untuk mengubah carname menjadi 'Volvo':

const myCar = new Car("Ford");
myCar.carname = "Volvo";
document.getElementById("demo").innerHTML = myCar.carname; 

// output:
Volvo

----------------------

* Hoisting -> tidak seperti function dan deklarasi kode javascript yang lain, class inheritance tidak bisa dinaikkan ke atas / hoisted. Ini berarti kita wajib mendeklarasikan sebuah class sebelum menggunakannya.
- contoh:
//You cannot use the class yet.
//myCar = new Car("Ford") will raise an error.

class Car {
  constructor(brand) {
    this.carname = brand;
  }
}

//Now you can use the class:
const myCar = new Car("Ford") 

--------------------------------------------------

* Javascript static methods -> didefinisikan pada class itu sendiri. Kita tidak bisa memanggil sebuah method static pada sebuah object, hanya bisa pada sebuah class object.

- contoh:
class Car {
  constructor(name) {
    this.name = name;
  }
  static hello() {
    return "Hello!!";
  }
}

const myCar = new Car("Ford");

// You can call 'hello()' on the Car Class:
document.getElementById("demo").innerHTML = Car.hello();

// But NOT on a Car Object:
// document.getElementById("demo").innerHTML = myCar.hello();
// this will raise an error. 


Jika kita ingin memanggil method static pada sebuah object, seperti contoh diatas myCar.hello(), kita bisa mengirim object nya yaitu 'myCar' sebagai sebuah parameter:

- contoh:
class Car {
  constructor(name) {
    this.name = name;
  }
  static hello(x) {
    return "Hello " + x.name;
  }
}
const myCar = new Car("Ford");
document.getElementById("demo").innerHTML = Car.hello(myCar); 

// output:
Hello Ford

--------------------------------------------------

# JavaScript Object Constructors

 - contoh:
function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}

-------

--- object types (blueprints) (classes)
Pada contoh class diatas, yang dapat kita buat dengan class itu terbatas karna hanya bisa membuat 1 buah objects. Terkadang kita membutuhkan sebuah blueprint untuk membuat banyak object dengan tipe yang sama. Untuk membuat sebuah 'tipe object / object type', dengan menggunakan sebuah 'object constructor function'. Pada contoh function Person() diatas adalah contoh 'object constructor function' nya. Object dengan tipe yang sama dibuat dengan memanggil si constructor function dengan tambahan keyword 'new' seperti contoh berikut:

const myFather = new Person("John", "Doe", 50, "blue");
const myMother = new Person("Sally", "Rally", 48, "green");

-------

--- menambah sebuah properti pada sebuah constructor, harus ditambahkan ke constructor function, contoh:
function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
  this.nationality = "English";   // sama dengan default value
}

-------

--- menambah sebuah method pada sebuah constructor, contoh:
function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
  this.name = function() {
    return this.firstName + " " + this.lastName;
  };
}

--------------------------------------------------

* Using the prototype Property
Properti Javascript 'prototype' mengijinkan kita untuk menambahkan properti baru ke object constructor, contoh:

function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
}

Person.prototype.nationality = "English";

Dengan menambahkan prototype seperti contoh diatas, maka ketika kita mengakses data dengan properti nationality nya akan tampil value "English", tetapi jika tidak ditambahkan 'prototype' nya, walaupun bisa diinput ke dalam constructor tetapi ketika kita akses maka tidak akan tampil value apa apa kecuali 'undefined'.

Properti Javascript 'prototype' juga mengijinkan kita untuk menambahkan method baru ke object constructor, contoh:

function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
}

Person.prototype.name = function() {
  return this.firstName + " " + this.lastName;
};
--------------------------------------------------

# ES5 Object Methods

--Managing Objects--
// Create object with an existing object as prototype
Object.create(parent, donor)

// Adding or changing an object property
Object.defineProperty(object, property, descriptor)

// Adding or changing object properties
Object.defineProperties(object, descriptors)

// Accessing Properties
Object.getOwnPropertyDescriptor(object, property)

// Returns all properties as an array
Object.getOwnPropertyNames(object)

// Accessing the prototype
Object.getPrototypeOf(object)

// Returns enumerable properties as an array
Object.keys(object)

-------

--Protecting Objects--
// Prevents adding properties to an object
Object.preventExtensions(object)

// Returns true if properties can be added to an object
Object.isExtensible(object)

// Prevents changes of object properties (not values)
Object.seal(object)

// Returns true if object is sealed
Object.isSealed(object)

// Prevents any changes to an object
Object.freeze(object)

// Returns true if object is frozen
Object.isFrozen(object)

-------

# Function Bind()

dengan method bind(), sebuah object bisa meminjam sebuah method dari object lain.

 - contoh 1, membuat 2 object (person & member). member object akan meminjam method fullName dari object person:

const person = {
  firstName:"John",
  lastName: "Doe",
  fullName: function () {
    return this.firstName + " " + this.lastName;
  }
}

const member = {
  firstName:"Hege",
  lastName: "Nilsen",
}

let fullName = person.fullName.bind(member);

-------

# The Optional Chaining Operator (?.)
-> mengembalikan undefined jika sebuah object tidak memiliki properti yang dimaksud (jadi tidak mengembalikan sebuah error)

Example
const car = {type:"Fiat", model:"500", color:"white"};
let name = car?.name;

--------------------------------------------------

* Perulangan, melakukan hal yg sama sebanyak data / kondisi.

Tipe tipe perulangan:
1. for
for (expression 1; expression 2; expression 3) {
  // code block to be executed
}

- contoh:
for   inisial; | kondisi; | increment / decrement
for (let i = 1; i <= 10; i++) {
    console.log(i);
}

-------

2. while -> melakukan perulangan pada sebuah blok kode selama kondisi yang dicek bernilai true.

while (condition) {
  // code block to be executed
}

- contoh:
while (i < 10) {
  text += "The number is " + i;
  i++;
}

-------

2a. Do while loop -> varian dari while loop. Perulangan ini akan menjalankan blok kode sekali sebelum melakukan pengecekan apakah kondisi nya bernilai true, lalu akan diulang selama kondisi nya bernilai true.
do {
  // code block to be executed
}
while (condition);

- contoh:
do {
  text += "The number is " + i;
  i++;
}
while (i < 10); 

-------

3. for..of -> melakukan perulangan pada values / isi dari sebuah object yang dapat diubah (iterable). Contohnya arrays, strings, maps, NodeLists dan lainnya

for (variable of iterable) {
  // code block to be executed
}

# variable - For every iteration the value of the next property is assigned to the variable. Variable can be declared with const, let, or var.
# iterable - An object that has iterable properties.

- contoh:
// array
const cars = ["BMW", "Volvo", "Mini"];

let text = "";
for (let x of cars) {
  text += x;
}

// string
let language = "JavaScript";

let text = "";
for (let x of language) {
text += x;
}

-------

// set -> koleksi dari nilai nilai yang unik. Tiap nilai hanya bisa ada 1 saja didalam sebuah set. Sebuah set dapat menyimpan nilai apapun dari tipe data manapun.

Set Methods
Method	        Description
new Set()	      Creates a new Set
add()	          Adds a new element to the Set
delete()	      Removes an element from a Set
has()	          Returns true if a value exists
clear()	        Removes all elements from a Set
forEach()	      Invokes a callback for each element
values()	      Returns an Iterator with all the values in a Set
keys()	        Same as values()
entries()	      Returns an Iterator with the [value,value] pairs from a Set

Property	      Description
size	          Returns the number elements in a Set

-------

 - cara membuat sebuah set
1. Method new Set() -> mengubah sebuah array menjadi constructor 'new Set()':

const letters = new Set(["a","b","c"]);

-------

2. Membuat set dan menambah nilai nilainya:

// Create a Set
const letters = new Set();

// Add Values to the Set
letters.add("a");
letters.add("b");
letters.add("c");

-------

3. Membuat set dan menambah variabel:

// Create Variables
const a = "a";
const b = "b";
const c = "c";

// Create a Set
const letters = new Set();

// Add Variables to the Set
letters.add(a);
letters.add(b);
letters.add(c);

-------

 - method add() -> jika menambah elemen yang sama maka hanya elemen pertamanya saja yang akan disimpan.
letters.add("d");
letters.add("e");

-------

 - method forEach() -> memanggil sebuah function untuk tiap set elemen:
// Create a Set
const letters = new Set(["a","b","c"]);

// List all entries
let text = "";
letters.forEach (function(value) {
  text += value;
})

-------

 - method values() -> mengembalikan sebuah iterator object berisi semua nilai didalam sebuah set:

letters.values()   // Returns [object Set Iterator] 

berikut cara untuk menggunakan iterator object untuk mengakses elemen elemennya:
// Create a Set
const letters = new Set(["a","b","c"]);

// List all Elements
let text = "";
for (const x of letters.values()) {
  text += x + "<br>";
}

document.getElementById("demo").innerHTML = text;

-------

 - method keys() -> sebuah set tidak memiliki keys. keys() mengembalikan nilai yang sama dengan values(). Ini membuat Set kompatibel dengan Maps.
letters.keys()   // Returns [object Set Iterator] 


 - method entries() -> sebuah set tidak memiliki keys. entries() mengembalikan [value, value] dan bukan [key, value]. Ini membuat Set kompatibel dengan Maps.
// Create a Set
const letters = new Set(["a","b","c"]);

// List all entries
const iterator = letters.entries();
let text = "";
for (const entry of iterator) {
  text += entry + "<br>";
}

document.getElementById("demo").innerHTML = text;

// output
a,a 
b,b 
c,c

-------

// map -> menyimpan pasangan key-value dimana key nya bisa tipe data apapun. Sebuah map mengingat urutan asli dari penyisipan / penginputan dari keys nya, dan sebuah map punya sebuah properti yang mewakili ukuran dari map tersebut.

Map Methods
Method	              Description
new Map()	            Creates a new Map object
set()	                Sets the value for a key in a Map
get()	                Gets the value for a key in a Map
clear()	              Removes all the elements from a Map
delete()	            Removes a Map element specified by a key
has()	                Returns true if a key exists in a Map
forEach()	            Invokes a callback for each key/value pair in a Map
entries()	            Returns an iterator object with the [key, value] pairs in a Map
keys()	              Returns an iterator object with the keys in a Map
values()	            Returns an iterator object of the values in a Map

Property	            Description
size	                Returns the number of Map elements


  a. new Map() -> membuat map dengan mengubah sebuah array ke constructor 'new Map()':
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);


  b. Map.set() -> menambahkan elemen elemen ke sebuah map dengan method set():
// Create a Map
const fruits = new Map();

// Set Map Values
fruits.set("apples", 500);
fruits.set("bananas", 300);
fruits.set("oranges", 200);

Method set() juga bisa digunakan untuk mengubah value dari map yang sudah dibuat:
  fruits.set("apples", 500);


  c. Map.get() -> mengambil value dari sebuah key di dalam sebuah map:
fruits.get("apples");    // Returns 500 karna 500 adalah key nya.


  d. Map.size -> mengembalikan nilai dari elemen elemen di dalam sebuah map:
fruits.size;


  e. Map.delete() -> menghapus sebuah elemen dari map:
fruits.delete("apples");


  f. Map.clear() -> menghapus semua elemen dari map:
fruits.clear();


  g. Map.has() -> mengembalikan nilai true jika sebuah key ada di dalam sebuah map:
fruits.has("apples");


  h. Map.forEach() -> memanggil sebuah callback untuk tiap pasangan key value di dalam sebuah map:
// List all entries
let text = "";
fruits.forEach (function(value, key) {
  text += key + ' = ' + value;
})


  i. Map.entries() -> mengembalikan sebuah object iterator dengan [key, value] di dalam sebuah map:
// Create a Map
const fruits = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

// List all entries
let text = "";
for (const x of fruits.entries()) {
  text += x + "<br>";
}


  j. Map.keys() -> mengembalikan sebuah object iterator dengan keys di dalam sebuah map:
// List all keys
let text = "";
for (const x of fruits.keys()) {
  text += x;
}


  k. Map.values() -> mengembalikan sebuah object iterator dengan values di dalam sebuah map:
// List all values
let text = "";
for (const x of fruits.values()) {
  text += x;
}

-------

4. for..in -> melakukan perulangan pada properti sebuah object. Bisa juga untuk perulangan pada properti sebuah array.
for (key in object) {
  // code block to be executed
}

for (variable in array) {
  code
}

- contoh:
// object
const person = {fname:"John", lname:"Doe", age:25};

let text = "";
for (let x in person) {
  text += person[x];
} 

Example Explained

    The for in loop iterates over a person object
    Each iteration returns a key (x)
    The key is used to access the value of the key
    The value of the key is person[x]

-------

// array
const numbers = [45, 4, 9, 16, 25];

let txt = "";
for (let x in numbers) {
  txt += numbers[x];
}



--------------------------------------------------

* Perulangan for dengan array

contoh penulisan:
const animals = ['cat', 'deer', 'bird', 'koala'];

for (let i = 0; i < animals.length; i++) {
    console.log(i, animals[i]);
}

NOTE: setiap melakukan perulangan dengan array, selalu awali "nilai awal dengan 0" dan "batasnya sampai panjang data array" yg akan digunakan.

--------------------------------------------------

* nested loop, bisa terjadi jika kita mendapatkan suatu data array yang di dalamnya ada array lagi.

--------------------------------------------------

* Perulangan menggunakan perintah WHILE.
perulangan while akan terus berjalan selama kondisi tesnya bernilai true.

penulisan nya:
let num = 0;
while (num < 10) {
    console.log(num);
    num++;
}

--------------------------------------------------

* Break & Continue

- Break, digunakan untuk menghentikan perulangan baik jika ada kondisi yang harus terpenuhi ataupun jika tidak ada kondisi, yang artinya kita bebas menggunakan break. Tapi di sarankan untuk menggunakan kondisi saja agar lebih aman. Biasanya break digunakan pada switch() statement. Break juga bisa digunakan untuk keluar dari sebuah perulangan,

- contoh:
for (let i = 0; i < 10; i++) {
  if (i === 3) { break; }
  text += "The number is " + i + "<br>";
} 

-------

- Continue, digunakan untuk melakukan break pada 1 buah pengulangan, jika ada kondisi yang terpenuhi terjadi dan berlanjut dengan pengulangan selanjutnya yang ada di dalam loop.

- contoh:
for (let i = 0; i < 10; i++) {
  if (i === 3) { continue; }
  text += "The number is " + i + "<br>";
}

contoh diatas akan melakukan skip pada nilai 3.

--------------------------------------------------

* Function, potongan kode yang memungkinkan untuk digunakan kembali.
cara penulisan:
function namaFunction() {
    isi statement yang diinginkan;
}

untuk menggunakan function nya, kita bisa memanggil namaFunction(); saja.

-------

# parameter & argument, sama tapi tidak serupa. Parameter digunakan pada tanda kurung setelah nama function, sedangkan argument digunakan saat kita memanggil function dengan namanya dan di dalam tanda kurung nya ada argument.
contoh parameter
function namaFunction(parameter) {

}

contoh argument
namaFunction(argument);

## contoh arrow function:
hello = () => {
  return "Hello World!";
} 

// dengan parameter
let myFunction = (a, b) => a * b;

// dengan keyword this
Dengan arrow function, keyword this tidak akan dilakukan binding. sedangkan pada function biasa keyword this merepresentasikan object yang dipanggil function, yang mana bisa jadi window, document, sebuah button atau lainnya. Pada arrow function, keyword this akan selalu merepresentasikan object yang mendefinisikan arrow function itu sendiri. Contoh:

  -- kedua contoh dibawah ini, sama sama memanggil sebuah method 2 kali, yang pertama saat halaman selesai dimuat (loads), dan yang kedua saat user mengklik sebuah button.

-------

  -# contoh 1:
Dengan sebuah function expression / anonymous function, 'this' merepresentasikan object yang memanggil function nya:
// anonymous Function:
hello = function() {
  document.getElementById("demo").innerHTML += this;
}

// The window object calls the function:
window.addEventListener("load", hello);

// A button object calls the function:
document.getElementById("btn").addEventListener("click", hello); 

Hasilnya -> 2 object berbeda, window dan button.

-------

  -# contoh 2:
Dengan sebuah arrow function, 'this merepresentasikan pemilik dari function nya:
// Arrow Function:
hello = () => {
  document.getElementById("demo").innerHTML += this;
}

// The window object calls the function:
window.addEventListener("load", hello);

// A button object calls the function:
document.getElementById("btn").addEventListener("click", hello); 

Hasilnya -> object yang sama, yaitu window, karena window object adalah pemilik function nya.

--------------------------------------------------

* Return, akan mengakhiri proses di dalam fungsi dan akan memberikan nilai yg di definisikan pada saat fungsi dipanggil.
Jika sudah memberikan return pada suatu function maka baris baris statement setelah return tidak akan di jalankan, karna return akan menjadi akhirnya.

--------------------------------------------------

* Scope, visibilitas dari suatu variable yang tergantung dari ruang lingkup nya.

contoh 1:
let linux = 'Redhat';

function easyLinux() {
    let linux = 'Debian';
    console.log('linux'); // Debian
}

console.log('linux'); // Redhat

Contoh 1 diatas adalah contoh dari scope, dimana variable linux ada 2 yaitu di dalam dan diluar function, maka hasil ketika function dan variable diluar nya dipanggil akan menghasilkan output yg berbeda.

-------

contoh 2:
let linux = 'Redhat';

function easyLinux() {
    console.log('linux'); // Redhat
}

console.log('linux'); // Redhat

Contoh 2 diatas, adalah contoh ketika variable yg ada diluar function di deklarasikan dan dipanggil ke dalam function maka output nya akan sama, ini dikarenakan di dalam function tidak di deklarasikan ulang variabel tersebut seperti di contoh 1.

-------

contoh 3:
function easyLinux() {
    let linux = 'Debian';
}

easyLinux()
console.log('linux');

Contoh 3 diatas, adalah contoh ketika variable linux dibuat di dalam function tapi tidak dipanggil lewat console di dalam function nya, melainkan variable linux di panggil dari luar function, dan hasilnya akan error karena variable linux yang ada di dalam function itu tidak bisa diakses dari luar function nya, walaupun sebelum di console.log sudah dipanggil function nya seperti diatas.

--------------------------------------------------

* Method, adalah suatu function yang berada di dalam suatu object, misal seperti Math.random() adalah function yang ada di object Math / bisa dibilang juga random() adalah method yg ada di object Math.

--------------------------------------------------

* this -> mengarah pada sebuah object yang tergantung bagaimana 'this' ini digunakan / dipanggil. Bisa juga dikatakan this adalah keyword atau cara untuk memanggil suatu properti yang dimiliki oleh object yang sama dengan tujuan untuk mendapatkan nilainya. Keyword this merujuk pada object object berbeda tergantung bagaimana this itu digunakan, contoh:

  - Pada sebuah object method (function yang ada didalam sebuah object), this merujuk pada object itu.
## contoh this pada object method bisa dilihat pada properti salam:
const saya = {
    nama: 'naruto',
    hobi: 'berlatih ninjutsu',
    salam: function() {
        return `saya adalah ${this.nama}. Hobi saya adalah ${this.hobi}`
    }
}

  - Jika 'this' sendiri saja, maka merujuk pada global object.
## contoh this dibawah akan merujuk pada global window:
let x = this;
merujuk pada object window.


  - Pada sebuah function, this merujuk pada global object nya.
## contoh this dibawah akan merujuk pada global window juga:
function myFunction() {
  return this;
}

  - Pada sebuah function, dalam 'strict mode', this bernilai 'undefined'.
## contoh:
"use strict";
function myFunction() {
  return this;
}

  - Pada sebuah event, this merujuk pada elemen yang menerima event nya.
## contoh:
<button onclick="this.style.display='none'">
  Click to Remove Me!
</button> 

  - Method Method seperti call(), apply(), dan bind() bisa merujuk pada object manapun. Ini artinya dengan call(), apply() dan bind(), kita bisa menggunakan method method dari object lain untuk object object lainnya.
  
-------

## call(), contoh dibawah, memanggil person1.fullName() dengan person2 sebagai argument nya. 'this' pada method fullName di person1 akan di isi berdasarkan pada person2, bahkan jika fullName adalah sebuah method dari person1 juga bisa digunakan dengan value dari object lain seperti person2:
const person1 = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}

const person2 = {
  firstName:"John",
  lastName: "Doe",
}

// Return "John Doe":
person1.fullName.call(person2);

NOTE: this tidak bisa diubah nilainya.

-------

- contoh call() dengan arguments:
const person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}

const person1 = {
  firstName:"John",
  lastName: "Doe"
}

person.fullName.call(person1, "Oslo", "Norway");

-------

## apply(), mirip dengan method call() sebelumnya, bedanya method call() mengambil argument argument secara terpisah, sedangkan method apply() mengambil argument argument sebagai sebuah array.
const person = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}

const person1 = {
  firstName: "Mary",
  lastName: "Doe"
}

// This will return "Mary Doe":
person.fullName.apply(person1);

-------

- contoh apply() dengan arguments:
const person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}

const person1 = {
  firstName:"John",
  lastName: "Doe"
}

person.fullName.apply(person1, ["Oslo", "Norway"]);

-------

## bind(), contoh dibawah ini object member meminjam method fullName dari object person:
const person = {
  firstName:"John",
  lastName: "Doe",
  fullName: function () {
    return this.firstName + " " + this.lastName;
  }
}

const member = {
  firstName:"Hege",
  lastName: "Nilsen",
}

let fullName = person.fullName.bind(member);

--------------------------------------------------

* try and catch

try {
  Block of code to try
}
catch(err) {
  Block of code to handle errors
} 

try digunakan untuk menjalankan perintah perintah / statement program, sedangkan catch digunakan untuk menangkap error ketika ada kesalahan sehingga tidak akan membuat program break code / blocking.

contoh:
try {
    saya.kenalan();
} catch {
    console.log('error!!');
}

console.log('setelah proses try and catch);

penjelasan: dengan menggunakan try and catch, maka baris console.log dibawah nya akan tetap dijalankan walaupun ada kesalahan / error di bagian try and catch nya dikarenakan object saya dan function / method kenalan belum dibuat.

--------------------------------------------------

* Throw, and Try...Catch...Finally

1. statement try mendefinisikan sebuah blok kode untuk dijalankan (dicoba).


2. statement catch mendefinisikan sebuah blok kode untuk menangani error apapun yang muncul.


3. statement finally mendefinisikan sebuah blok kode untuk dijalankan terlepas dari hasilnya seperti apa. Baru bisa dijalankan setelah try dan catch. Contoh di blok finally, kita jadikan untuk menghapus / mereset isi dari tag input setelah di klik button nya.
try {
  Block of code to try
}
catch(err) {
  Block of code to handle errors
}
finally {
  Block of code to be executed regardless of the try / catch result
} 


4. statement throw mendefinisikan sebuah error yang dibuat secara manual oleh developer. Terjadi ketika error muncul maka kode javascript yang dijalankan akan berhenti secara normal dan membuat sebuah pesan error. Kondisi teknis nya disebut: Javascript akan melakukan 'throw an exception' / 'throw an error'. Kemudian, javascript akan membuat 'Error Object' dengan 2 buah properti, 'name' dan 'message'. Exception tadi bisa berupa String, Number, Boolean atau sebuah object, contohnya:
  throw "Too big";    // throw a text
  throw 500;         // throw a number

# jika menggunakan 'throw' bersamaan dengan try dan catch, kita bisa mengontrol alur program dan membuat pesan error buatan.

--------------------------------------------------

* ForEach method, dapat menggunakan callback function yang berarti dapat memanggil sebuah fungsi sebanyak jumlah element yang dimiliki array.

contoh:

const angka = [1,2,3,4,5,6,7,8,9];

angka.forEach(function(n) {
    console.log(n * n);
    // output: 1,4,9,16...
})

untuk method forEach ini bisa menggunakan anonymous function ataupun function yang kita buat sendiri. contoh diatas adalah forEach dengan anonymous function.

--------------------------------------------------

* Map, adalah suatu function yg dimiliki juga oleh tipe data array dimana map juga salah satu function yg bisa menerima callback function dari suatu array. Callback function / nilai balik adalah array baru yang sudah dimodifikasi melalui callback function dari suatu array / function yang kita buat.  Jadi output dari map adalah array lagi dan array ini memiliki nilai yg bisa berbeda dari sumber array yang digunakan.

contoh:

const expression = ['rofl', 'lol', 'omg', 'ttyl'];
const capsExpression = expression.map(function(exprs) {
    return exprs.toUpperCase();
});

expression; //['rofl', 'lol', 'omg', 'ttyl']
capsExpression; //['ROFL', 'LOL', 'OMG', 'TTYL']

--------------------------------------------------

* setTimeout & setInterval, callback function yg bukan berasal dari array. fungsi nya untuk memberi waktu jeda dan melakukan perulangan di setiap waktu yang ditentukan.

contoh:

setTimeout(() => {
    // proses
}, 3000) // proses akan dieksekusi setelah 3 detik

setInterval(() => {
    // proses
}, 2000) // akan melakukan perulangan proses setiap 2 detik

--------------------------------------------------

* filter, function yg akan mengembalikan nilai array lagi yg sudah di manipulasi sesuai dengan kriteria yang ditetapkan.

contoh:

const angka = [1,2,3,4,5,6,7];
const ganjil = angka.filter(n => {
    return n % 2 === 1;
});

--------------------------------------------------

* every, sebuah function yg akan mengembalikan nilai boolean. true jika seluruh nilai yg ada pada suatu array memiliki kriteria yg sama. false jika sebaliknya.

contoh every:

const kataKata = ['kita', 'kamu', 'saya', 'aku'];
kata.every(kata => {
    return kata.length === 4;
}); // true

-------

* some, mirip dengan every, tapi lebih fleksibel. hasilnya akan true jika salah satu isi dari array memiliki kriteria yg sama. akan false jika sama sekali tidak ada yg sesuai kriteria.

contoh some:

const kataKata = ['kita', 'kamu', 'saya', 'aku'];
kata.some(kata => {
    return kata.length === 4;
}); // true

--------------------------------------------------

* reduce, melakukan proses pengulangan sebanyaknya element milik suatu array. nilai baliknya adalah single value. mirip dengan for loop. bedanya reduce function ini bisa digunakan untuk kondisi seperti if else juga dan lain lain mungkin, bisa dicari lebih tau lagi di internet.

contoh:

const subtotal = [1500, 2000, 2500, 3000, 3500];

const total = subtotal.reduce((currentTotal, singleSubTotal) => {
    return currentTotal + singleSubTotal;
});

--------------------------------------------------

* Date Get Methods

untuk membuat date objects kita gunakan 'new Date()'
karna new Date() mengembalikan object date / tanggal dengan tanggal dan waktu terkini sesuai waktu local nya.

contoh: const date = new Date();

Date Get Methods

Method 	                Description
- getFullYear() 	    Get year as a four digit number (yyyy)
contoh: 
    const d = new Date("2021-03-25");
    d.getFullYear();


- getMonth() 	        Get month as a number (0-11)
contoh:
    const d = new Date("2021-03-25");
    d.getMonth();


- getDate() 	        Get day as a number (1-31)
contoh:
    const d = new Date("2021-03-25");
    d.getDate();    


- getDay() 	            Get weekday as a number (0-6)
contoh:
    const d = new Date("2021-03-25");
    d.getDay();


- getHours() 	        Get hour (0-23)
contoh:
    const d = new Date("2021-03-25");
    d.getHours();


- getMinutes() 	        Get minute (0-59)
contoh:
    const d = new Date("2021-03-25");
    d.getMinutes();


- getSeconds() 	        Get second (0-59)
contoh:
    const d = new Date("2021-03-25");
    d.getSeconds();


- getMilliseconds() 	Get millisecond (0-999)
contoh:
    const d = new Date("2021-03-25");
    d.getMilliseconds();


- getTime() 	        Get time (milliseconds since January 1, 1970)
contoh:
    const d = new Date("2021-03-25");
    d.getTime();


--------------------------------------------------

* Set Date Methods -> melakukan setup waktu dari tahun, bulan, hari, jam, menit, detik sampai mili detik untuk sebuah object date.

Method 	                Description
- setDate() 	        Set the day as a number (1-31)
contoh:
    const d = new Date();
    d.setDate(15);

// untuk menambah hari ke sebuah tanggal
    d.setDate(d.getDate() + 50);


- setFullYear() 	    Set the year (optionally month and day)
contoh:
    const d = new Date();
    d.setFullYear(2020); 

(opsional) -> d.setFullYear(2020, 11, 3);

    
- setHours() 	        Set the hour (0-23)
contoh:
    const d = new Date();
    d.setHours(22);


- setMilliseconds() 	Set the milliseconds (0-999)
- setMinutes() 	        Set the minutes (0-59)
contoh:
    const d = new Date();
    d.setMinutes(30);


- setMonth() 	        Set the month (0-11)
contoh:
    const d = new Date();
    d.setMonth(11);


- setSeconds() 	        Set the seconds (0-59)
contoh:
    const d= new Date();
    d.setSeconds(30);


- setTime() 	        Set the time (milliseconds since January 1, 1970)

--------------------------------------------------

* javascript if, else, dan else if, switch

You can use conditional statements in your code to do this.

In JavaScript we have the following conditional statements:

    - Gunakan if untuk menspesifikasikan sebuah blok kode yang akan dijalankan, if untuk kondisi bernilai true.
    - Gunakan else untuk menspesifikasikan blok kode yang akan dijalankan, jika kondisi yang sebelumnya pada blok if bernilai false.
    - Gunakan else if untuk menspesifikasikan kondisi baru untuk di test, jika kondisi pertama nya salah.
    - Gunakan switch untuk memiliih satu dari banyak nya alternative blok kode untuk dijalankan.

# If statement:
if (condition) {
  //  block of code to be executed if the condition is true
}

- contoh:
if (hour < 18) {
  greeting = "Good day";
} 

-------

# Else statement:
if (condition) {
  //  block of code to be executed if the condition is true
} else {
  //  block of code to be executed if the condition is false
}

- contoh:
if (hour < 18) {
  greeting = "Good day";
} else {
  greeting = "Good evening";
}

-------

# Else if statement:
if (condition1) {
  //  block of code to be executed if condition1 is true
} else if (condition2) {
  //  block of code to be executed if the condition1 is false and condition2 is true
} else {
  //  block of code to be executed if the condition1 is false and condition2 is false
}

- contoh:
if (time < 10) {
  greeting = "Good morning";
} else if (time < 20) {
  greeting = "Good day";
} else {
  greeting = "Good evening";
}

-------

# Switch statement:
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
} 

- contoh:
switch (new Date().getDay()) {
  case 6:
    text = "Today is Saturday";
    break;
  case 0:
    text = "Today is Sunday";
    break;
  default:
    text = "Looking forward to the Weekend";
}

// default keyword -> untuk menspesifikasikan pilihan kode terakhir jika tidak ditemukan adanya persamaan pada blok blok kode sebelumnya.


--------------------------------------------------

* Modules -> javascript modules memudahkan kita untuk membagi bagi kode kita ke beberapa file yang berbeda. Ini memudahkan untuk mengatur sebuah basis kode / base code. Modules bisa diimport dari file external dengan statement 'import'. Modules juga bergantung pada 'type="module"' pada tag script.

  - contoh:
<script type="module">
import message from "./message.js";
</script> 

-------

# export -> modules yang beriisikan function atau variable bisa disimpan pada file external. Ada 2 tipe export: Named export & Default export.

  #- Named export,
  contoh kita membuat sebuah file bernama person.js dan mengisinya dengan hal hal yang mau kita export. Kita bisa membuatnya dengan 2 cara, 'In-line individually' atau 'all at once at the bottom'.
    - contoh In-line individually:
    person.js
      export const name = "Jesse";
      export const age = 40;

    - contoh All at once at the bottom:
    person.js
      const name = "Jesse";
      const age = 40;

      export {name, age};

  #- Default export,
  contoh kita buat sebuah file bernama message.js, untuk default export kita hanya boleh punya 1 saja pada sebuah file. 
    - contoh:
    message.js
      const message = () => {
      const name = "Jesse";
      const age = 40;
      return name + ' is ' + age + 'years old.';
      };

      export default message;

-------

# import -> kita bisa melakukan import dengan 2 cara, berdasarkan file nya apakah dibuat dengan nama 'export' atau 'default export'.
Dengan named export, bisa menggunakan kurung kurawal {}, sedangkan default export tidak bisa menggunakan kurung kurawal.
  - contoh import dari named export dari file person.js diatas tadi:
    import { name, age } from "./person.js";

  - contoh import dari default export dari file message.js diatas tadi:
    import message from "./message.js";

--------------------------------------------------

* JavaScript Callback -> sebuah function yang dijadikan sebuah argument ke function lain. Teknik ini memperbolehkan sebuah function untuk memanggil function lain. Sebuah callback function bisa berjalan setelah function lain selesai dijalankan.

-------

# Function sequence
function function pada JavaScript di eksekusi / dijalankan sesuai urutan pemanggilannya. Tidak berdasarkan urutan function function tersebut di definisikan. Berikut contoh function yang akan berakhir dengan menampilkan 'Goodbye':

function myFirst() {
  myDisplayer("Hello");
}

function mySecond() {
  myDisplayer("Goodbye");
}

myFirst();
mySecond();

// jika posisi pemanggilannya dibalik, maka akan berakhir dengan menampilkan 'hello':

mySecond();
myFirst(); 

-------

# Sequence control
Kadang kita mau kontrol yang lebih baik pada saat mau menjalankan sebuah function. Misalnya jika kita mau melakukan perhitungan dan menampilkan hasilnya. Berikut contohnya, kita memanggil sebuah function calculator (myCalculator), lalu menyimpan hasilnya, lalu memanggil function lain (myDisplayer) untuk menampilkan hasilnya:

function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

function myCalculator(num1, num2) {
  let sum = num1 + num2;
  return sum;
}

let result = myCalculator(5, 5);
myDisplayer(result); 

-------

// atau kita bisa memanggil sebuah calculator function (myCalculator), dan membiarkan calculator function memanggil function display (myDisplayer):

function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

function myCalculator(num1, num2) {
  let sum = num1 + num2;
  myDisplayer(sum);
}

myCalculator(5, 5);


// masalah dengan contoh pertama diatas adalah kita harus memanggil 2 function untuk menampilkan hasilnya. Sedangkan pada contoh kedua, kita tidak bisa mencegah function calculator dari menampilkan hasilnya. Sekaranglah waktunya untuk membawah sebuah callback.

-------

# JavaScript Callbacks -> sebuah function yang dijadikan sebagai argument di function lain.
Dengan callback kita bisa memanggil function calculator (myCalculator) dengan sebuah callback (myCallback), dan membiarkan function calculator menjalankan callback nya setelah perhitungan nya selesai:

function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

function myCalculator(num1, num2, myCallback) {
  let sum = num1 + num2;
  myCallback(sum);
}

myCalculator(5, 5, myDisplayer);


// contoh diatas, myDisplayer disebut function callback. myDisplayer tersebut dijadikan sebagai argument pada function myCalculator().

NOTE: Ketika menjadikan sebuah function sebagai sebuah argument, ingat untuk jangan menggunakan tanda kurung ().
contoh yang benar: myCalculator(5, 5, myDisplayer);
contoh yang salah: myCalculator(5, 5, myDisplayer());

-------

// Create an Array
const myNumbers = [4, 1, -20, -7, 5, 9, -6];

// Call removeNeg with a callback
const posNumbers = removeNeg(myNumbers, (x) => x >= 0);

// Display Result
document.getElementById("demo").innerHTML = posNumbers;

// Keep only positive numbers
function removeNeg(numbers, callback) {
  const myArray = [];
  for (const x of numbers) {
    if (callback(x)) {
      myArray.push(x);
    }
  }
  return myArray;
}

dari contoh diatas, (x) => x >= 0 adalah sebuah callback function. function anonymous tersebut dijadikan sebuah argument pada function removeNeg().

-------

# When to use a callback?
berdasarkan contoh contoh diatas, semuanya sesederhana mungkin dibuat untuk mengajarkan kita kode dari callback.
Callback akan bersinar dengan penggunaan function asynchronous, dimana 1 function harus menunggu untuk function lainnya (seperti menunggu untuk sebuah file dimuat.)

--------------------------------------------------

* Asynchronous Javascript -> function yang berjalan secara bersamaan dengan function lain disebut asynchronous. Contoh nya javascript setTimeout(). Dalam kehidupan nyata, callback paling sering digunakan dengan function asynchronous. contoh tipe nya adalah javascript setTimeout().

-------

# Waiting for a timeout
Ketika menggunakan function setTimeout(), kita bisa menspesifikasikan sebuah function callback untuk dijalankan pada waktu tertentu, contohnya:

setTimeout(myFunction, 3000);

function myFunction() {
  document.getElementById("demo").innerHTML = "I love You !!";
}

Dari contoh diatas, myFunction digunakan sebagai sebuah callback. myFunction digunakan sebagai argument pada function setTimeout(). 3000 adalah angka milliseconds sebelum waktu yang ditentukan, jadi myFunction() akan dipanggil setelah 3 detik.

NOTE: Ketika menjadikan sebuah function sebagai sebuah argument, ingat untuk jangan menggunakan tanda kurung ().
contoh yang benar: setTimeout(myFunction, 3000);
contoh yang salah: setTimeout(myFunction(), 3000);

Daripada mendeklarasikan function dengan namanya sebagai argument di dalam function lain, kita selalu bisa mendeklarasikan function tersebut secara keseluruhan di dalam function lainnya:

setTimeout(function() { myFunction("I love You !!!"); }, 3000);

function myFunction(value) {
  document.getElementById("demo").innerHTML = value;
}

Dari contoh diatas, function() { myFunction("I love You !!!"); } digunakan sebagai sebuah callback dan merupakan sebuah function yang utuh. Function yang utuh tersebut diberikan kepada function setTimeout() sebagai sebuah argument. 3000 adalah angka milliseconds sebelum waktu yang ditentukan, jadi myFunction() akan dipanggil setelah 3 detik.

-------

# Waiting for intervals
ketika menggunakan function setInterval(), kita bisa menspesifikasikan sebuah callback function untuuk dijalankan pada tiap tiap interval / selang waktu tertentu. Contoh:

setInterval(myFunction, 1000);

function myFunction() {
  let d = new Date();
  document.getElementById("demo").innerHTML=
  d.getHours() + ":" +
  d.getMinutes() + ":" +
  d.getSeconds();
}

Dari contoh diatas, myFunction digunakan sebagai sebuah callback. myFunction digunakan sebagai argument pada function setInterval(). 1000 adalah angka milliseconds diantara interval nya, jadi myFunction() akan dipanggil setiap 1 detik.

-------

# Callback alternatives
Dengan penggunaan asynchronous, program program javascript bisa menjalankan tugas tugas yang lama dan meneruskan tugas tugas lain secara bersamaan. Tetapi, dengan asynchronous, program program tersebut sulit untuk ditulis dan dilakukan debug. Karena hal ini, kebanyakan metode metode javascript asynchronous modern tidak menggunakan callback, melainkan pada javascript, pemrograman asynchronous tersebut diselesaikan dengan menggunakan yang namanya 'Promises'


--------------------------------------------------

* Javascript Promises
"Producing Code" adalah kode yang bisa membutuhkan waktu.
"Consuming Code" adalah kode yang wajib menunggu untuk hasilnya.
Sebuah promise adalah sebuah javascript object yang menghubungkan producing code dengan consuming code.

-------

# Javascript Promise Object -> berisi kedua hal yaitu producing code dan memanggil untuk consuming code:

let myPromise = new Promise(function(myResolve, myReject) {
// "Producing Code" (May take some time)

  myResolve(); // when successful
  myReject();  // when error
});

// "Consuming Code" (Must wait for a fulfilled Promise)
myPromise.then(
  function(value) { /* code if successful */ },
  function(error) { /* code if some error */ }
);

Ketika producing code mendapatkan hasil, producing code akan memanggil 1 dari kedua callback:

Result	        Call
Success	        myResolve(result value)
Error	          myReject(error object)

-------

# Promise Object Properties
- Pending
- Fulfilled
- Rejected

Promise object mendukung 2 buah properti: 'state' dan 'result'. Tetapi kita tidak bisa mengakses kedua properti tersebut. Kita wajib menggunakan sebuah method promise untuk menghandle / mengurus promise.

Ketika sebuah object promise statusnya 'pending' (working), hasilnya adalah undefined.
Ketika sebuah object promise statusnya 'fulfilled', hasilnya adalah sebuah nilai / value.
Ketika sebuah object promise statusnya 'rejected', hasilnya adalah sebuah object error.

-------

# Promise how to use it

myPromise.then(
  function(value) { /* code if successful */ },
  function(error) { /* code if some error */ }
);

Promise.then() mengambil 2 buah argument, sebuah callback untuk ketika sukses dan 1 nya untuk ketika gagal. Keduanya bersifat opsional jadi kita bisa menambahkan sebuah callback untuk kondisi sukses saja / gagal saja.

contoh:

function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

let myPromise = new Promise(function(myResolve, myReject) {
  let x = 0;

// The producing code (this may take some time)

  if (x == 0) {
    myResolve("OK");
  } else {
    myReject("Error");
  }
});

myPromise.then(
  function(value) {myDisplayer(value);},
  function(error) {myDisplayer(error);}
);

// output: OK

-------

# Javascript Promise Examples
untuk mendemonstrasikan kegunaan dari promise, kita akan menggunakan contoh callback dari chapter sebelumnya:
- Waiting for a timeout
// contoh penggunaan callback:

setTimeout(function() { myFunction("I love You !!!"); }, 3000);

function myFunction(value) {
  document.getElementById("demo").innerHTML = value;
}

>> output: I love You !!!

-------

// contoh penggunaan promise:
let myPromise = new Promise(function(myResolve, myReject) {
  setTimeout(function() { myResolve("I love You !!"); }, 3000);
});

myPromise.then(function(value) {
  document.getElementById("demo").innerHTML = value;
});

>> output: I love You !!!

-------

- Waiting for a file
// contoh penggunaan callback:

function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

function getFile(myCallback) {
  let req = new XMLHttpRequest();
  req.onload = function() {
    if (req.status == 200) {
      myCallback(this.responseText);
    } else {
      myCallback("Error: " + req.status);
    }
  }
  req.open('GET', "mycar.html");
  req.send();
}

getFile(myDisplayer); 

>> output: halaman website mycar.html

-------

// contoh penggunaan promise:

function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

let myPromise = new Promise(function(myResolve, myReject) {
  let req = new XMLHttpRequest();
  req.open('GET', "mycar.html");
  req.onload = function() {
    if (req.status == 200) {
      myResolve(req.response);
    } else {
      myReject("File not Found");
    }
  };
  req.send();
});

myPromise.then(
  function(value) {myDisplayer(value);},
  function(error) {myDisplayer(error);}
);

>> output: halaman website mycar.html

--------------------------------------------------

* Javascript Async / Await
async dan await membuat penulisan promises lebih mudah. 
Async membuat sebuah function yang mengembalikan sebuah promise. 
Await membuat sebuah function menunggu untuk sebuah promise.

# Async syntax, keyword async sebelum sebuah function membuat function mengembalikan sebuah promise:
contoh:

async function myFunction() {
  return "Hello";
}

sama dengan:

function myFunction() {
  return Promise.resolve("Hello");
}

-------

Begini caranya menggunakan promise:

myFunction().then(
  function(value) { /* code if successful */ },
  function(error) { /* code if some error */ }
);

-------

contoh:

function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

async function myFunction() {return "Hello";}

myFunction().then(
  function(value) {myDisplayer(value);},
  function(error) {myDisplayer(error);}
);

atau jika lebih simple lagi, karna kita mengharapkan sebuah value yang normal (response normal, bukan sebuah error):

function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

async function myFunction() {return "Hello";}

myFunction().then(
  function(value) {myDisplayer(value);}
);

-------

# Await syntax -> keyword await hanya bisa digunakan di dalam sebuah function async. Keyword await tersebut membuat function tersebut menjeda proses berjalannya dan menunggu untuk sebuah 'resolved promise' sebelum dilanjutkan:

let value = await promise;

contoh penggunaan nya:

async function myDisplay() {
  let myPromise = new Promise(function(resolve, reject) {
    resolve("I love You !!");
  });
  document.getElementById("demo").innerHTML = await myPromise;
}

myDisplay();

-------

kedua argument diatas (resolve dan reject) di definisikan di awal oleh javascript. Kita tidak akan membuat mereka, tetapi kita memanggil salah satunya ketika function eksekutor sudah siap. Sangat jarang kita akan membutuhkan sebuah function reject.

contoh tanpa reject:

async function myDisplay() {
  let myPromise = new Promise(function(resolve) {
    resolve("I love You !!");
  });
  document.getElementById("demo").innerHTML = await myPromise;
}

myDisplay();

>> output: I love You !!

-------

contoh menunggu untuk sebuah timeout:

async function myDisplay() {
  let myPromise = new Promise(function(resolve) {
    setTimeout(function() {resolve("I love You !!");}, 3000);
  });
  document.getElementById("demo").innerHTML = await myPromise;
}

myDisplay();

>> <setelah 3 detik> output: I love You !!

-------

contoh menunggu untuk sebuah file:

async function getFile() {
  let myPromise = new Promise(function(resolve) {
    let req = new XMLHttpRequest();
    req.open('GET', "mycar.html");
    req.onload = function() {
      if (req.status == 200) {
        resolve(req.response);
      } else {
        resolve("File not Found");
      }
    };
    req.send();
  });
  document.getElementById("demo").innerHTML = await myPromise;
}

getFile();

>> output: halaman website mycar.html

--------------------------------------------------

* HTML DOM -> sebuah standar untuk mendapatkan, mengubah, menambah atau menghapus elemen elemen HTML.

-------

* HTML DOM Methods
HTML DOM methods -> aksi aksi yang bisa dilakukan pada elemen elemen HTML. Seperti menambah atau menghapus sebuah elemen HTML.
HTML DOM properti -> nilai nilai dari elemen elemen HTML yang bisa diatur atau diubah. Seperti mengubah isi dari suatu elemen HTML.

contoh dibawah mengubah isi dari elemen p dengan id demo:

<html>
<body>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = "Hello World!";
</script>

</body>
</html>

Pada contoh diatas, getElementById adalah sebuah 'method', sedangkan innerHTML adalah sebuah properti yang sangat berguna untuk mengubah atau mendapatkan isi dari elemen elemen HTML. Bahkan innerHTML juga bisa digunakan untuk mendapatkan atau mengubah elemen HTML manapun termasuk <html> dan <body>.

--------------------------------------------------

* HTML DOM Document

Finding HTML Elements
Method 	                                        Description
document.getElementById(id) 	                  Find an element by element id
document.getElementsByTagName(name) 	          Find elements by tag name
document.getElementsByClassName(name) 	        Find elements by class name


Changing HTML Elements
Property 	                                      Description
element.innerHTML =  new html content 	        Change the inner HTML of an element

----------
element.attribute = new value 	                Change the attribute value of an HTML element
contoh:
<img id="myImage" src="smiley.gif">

<script>
document.getElementById("myImage").src = "landscape.jpg";
</script>

----------

element.style.property = new style 	            Change the style of an HTML element

Method 	                                        Description
element.setAttribute(attribute, value) 	        Change the attribute value of an HTML element


Adding and Deleting Elements
Method 	                                        Description
document.createElement(element) 	              Create an HTML element
document.removeChild(element) 	                Remove an HTML element
document.appendChild(element) 	                Add an HTML element
document.replaceChild(new, old) 	              Replace an HTML element

----------
document.write(text) 	                          Write into the HTML output stream
contoh:
<p>Bla bla bla</p>

<script>
document.write(Date());
</script>

<p>Bla bla bla</p>

NOTE: jangan pernah menggunakan ini setelah document selesai di muat karna akan menghapus semua isi dari document.
----------

Adding Events Handlers
Method 	                                                      Description
document.getElementById(id).onclick = function(){code} 	      Adding event handler code to an onclick event

--------------------------------------------------

* HTML DOM Forms

# Data Validation, is the process of ensuring that user input is clean, correct, and useful.

Typical validation tasks are:

    has the user filled in all required fields?
    has the user entered a valid date?
    has the user entered text in a numeric field?

Most often, the purpose of data validation is to ensure correct user input.

Validation can be defined by many different methods, and deployed in many different ways.

Server side validation is performed by a web server, after input has been sent to the server.

Client side validation is performed by a web browser, before input is sent to a web server.

----------

# HTML Constraint Validation

HTML5 introduced a new HTML validation concept called constraint validation.

HTML constraint validation is based on:

    Constraint validation HTML Input Attributes
    Constraint validation CSS Pseudo Selectors
    Constraint validation DOM Properties and Methods


# Constraint Validation HTML Input Attributes
Attribute 	          Description
disabled 	            Specifies that the input element should be disabled
max 	                Specifies the maximum value of an input element
min 	                Specifies the minimum value of an input element
pattern 	            Specifies the value pattern of an input element
required 	            Specifies that the input field requires an element
type  	              Specifies the type of an input element

full list: https://www.w3schools.com/html/html_form_attributes.asp

----------

Constraint Validation CSS Pseudo Selectors
Selector 	            Description
:disabled 	          Selects input elements with the "disabled" attribute specified
:invalid 	            Selects input elements with invalid values
:optional 	          Selects input elements with no "required" attribute specified
:required 	          Selects input elements with the "required" attribute specified
:valid 	              Selects input elements with valid values

full list: https://www.w3schools.com/css/css_pseudo_classes.asp

--------------------------------------------------

* JS DOM CSS

# Changing HTML Style, untuk mengubah style dari sebuah elemen HTML, gunakan sintaks berikut:

document.getElementById(id).style.property = new style

- contoh dibawah ini untuk mengubah style dari elemen <p>:
<body>

<p id="p2">Hello World!</p>

<script>
document.getElementById("p2").style.color = "blue";
</script>

</body>

----------

# Using Event, event akan dijalankan oleh browser ketika 'sesuatu terjadi' pada elemen HTML nya, antara lain:
- sebuah elemen di klik
- halaman website nya selesai di muat
- terjadi perubahan pada kolom input

- contoh dibawah ini untuk mengubah style dari elemen HTML dengan id = id1, yang terjadi ketika user klik sebuah button:

<body>

<h1 id="id1">My Heading 1</h1>

<button type="button"
onclick="document.getElementById('id1').style.color = 'red'">
Click Me!</button>

</body>

--------------------------------------------------

* JS HTML DOM Events

# Reacting to Events

contoh HTML Events:
- ketika user klik dengan mouse
- ketika sebuah website selesai di muat
- ketika sebuah gambar selesai di muat
- ketika mouse diarahkan ke sebuah elemen
- ketika terjadi perubahan pada kolom input
- ketika sebuah form HTML dikirim (submit)
- ketika user klik sebuah tombol di keyboard

----------

# The onload and onunload Events, akan dijalankan ketika user masuk atau keluar dari halaman website.
Onload event bisa digunakan untuk mengecek tipe browser yang digunakan oleh visitor (pengunjung) dan juga versi browser nya, lalu memuat versi halaman website yang sesuai berdasarkan informasi tersebut. Onload dan onunload events bisa digunakan untuk berurusan dengan cookies.

- contoh:

 <body onload="checkCookies()"> 

----------

# The onchange event, sering digunakan untuk kombinasi dengan validation dari elemen HTML input.

- contoh dibawah ini, function upperCase() akan dipanggil ketika user mengubah isi dari sebuah kolom input:

Enter your name: <input type="text" id="fname" onchange="upperCase()">
<p>When you leave the input field, a function is triggered which transforms the input text to upper case.</p>

<script>
function upperCase() {
  const x = document.getElementById("fname");
  x.value = x.value.toUpperCase();
}
</script>

----------

# The onmouseover dan onmouseout events, bisa digunakan dan akan dijalankan ketika user mengarahkan mouse ke dalam suatu elemen HTML dan keluar dari elemen HTML tersebut. 

----------

# The onmousedown, onmouseup dan onclick events, adalah bagian dari sebuah mouse-click. Pertama ketika sebuah tombol pada mouse di klik, event onmousedown akan dijalankan, lalu ketika tombol mouse tadi dilepas maka event onmouseup akan dijalankan, dan terakhir ketika mouse-click selesai, event onclick baru dijalankan.

--------------------------------------------------

* JS HTML DOM EventListener

# Method addEventListener(), dibawah ini contoh menambah sebuah event listener yang berjalan ketika user klik sebuah button:

document.getElementById("myBtn").addEventListener("click", displayDate);

- Method addEventListener() mengikat sebuah event handler dengan sebuah elemen khusus.
- Method addEventListener() mengikat sebuah event handler dengan sebuah elemen tanpa menimpa event handler yang sudah ada.
- Kita bisa menambahkan banyak event handler pada 1 elemen, bahkan dengan tipe event handler yang sama, contoh ada 2 buah event 'click'.
- Kita bisa menambahkan event listener ke object DOM manapun tidak hanya pada elemen elemen HTML, contohnya object window.
- Method addEventListener() bisa membuat kita lebih mudah mengatur bagaimana event terjadi sampai ke detailnya.
- Ketika menggunakan addEventListener(), javascript terpisah dari HTML, untuk memudahkan dalam membacanya dan mengijinkan kita untuk menambah event listener bahkan ketika kita tidak mengkontrol HTML nya.
- Kita bisa dengan mudah menghapus sebuah event listener menggunakan method removeEventListener()

----------

# Syntax

element.addEventListener(event, function, useCapture);

- parameter pertama adalah tipe event nya, seperti click atau mousedown atau yang lainnya. Pastikan bahwa tidak ada kata 'on' pada event nya, hanya gunakan 'click' saja bukan 'onclick'.
- parameter kedua adalah function yang mau kita panggil ketika event terjadi.
- parameter ketiga adalah sebuah boolean value yang menspesifikasikan untuk menggunakan event bubbling atau event capturing, parameter ini bersifat opsional.

----------

# Event Bubbling atau Event Capturing, keduanya adalah 2 cara dari event propagation pada HTML DOM. Event propagation adalah sebuah cara untuk mendefinisikan urutan elemen ketika terjadinya event. Jika kita punya sebuah elemen <p> didalam elemen <div> dan user mengklik elemen <p> tersebut, yang manakah elemen yang event 'click' nya harus di handle duluan?

Pada bubbling, event milik elemen terdalam yang akan di handle lebih dulu, lalu elemen di luarnya, berarti event click pada elemen <p> yang akan di handle lebih dulu, lalu event click pada elemen <div>.

Pada capturing, event milik elemen yang diluar dulu yang akan dihandle, lalu elemen di dalamnya. berarti event click pada elemen <div> yang akan di handle lebih dulu, lalu event click pada elemen <p>.

Dengan addEventListener() kita bisa menspesifikasikan tipe propagation dengan menggunakan parameter 'useCapture', berikut penulisannya:

addEventListener(event, function, useCapture);

default value nya adalah false, yang mana akan menggunakan bubbling, ketika di ubah menjadi true maka event nya menggunakan capturing.

- contoh:

document.getElementById("myP").addEventListener("click", myFunction, true);

----------

# The removeEventListener() method, akan menghapus event handler yang sudah ditambahkan dengan method addEventListener(), contohnya:

element.removeEventListener("mousemove", myFunction); 

--------------------------------------------------

* Web Fetch API
dengan menggunakan fetch api interface mengijinkan webs browser untuk membuat request HTTP ke server server web. Dengan fetch api ini, kita tidak perlu lagi menggunakan XMLHttpRequest.

contoh dibawah ini kita melakukan fetch pada sebuah file dan menampilkan isinya:

<p id="demo">Fetch a file to change this text.</p>

<script>
getText("fetch_info.txt");

async function getText(file) {
  let myObject = await fetch(file);
  let myText = await myObject.text();
  document.getElementById("demo").innerHTML = myText;
}
</script>

--------------------------------------------------

* AJAX Introduction
dengan menggunakan ajax, kita bisa melakukan hal hal berikut:

- membaca data dari sebuah web server setelah halaman website selesai di muat / loading.
- melakukan update pada sebuah halaman web tanpa melakukan reload / loading halaman website nya. Ini berarti kita bisa mengganti isi dari suatu halaman tanpa perlu menunggu halaman website nya loading.
- mengirim data ke sebuah server web di background nya.

Ajax sendiri bukanlah sebuah bahasa pemrograman, melainkan sebuah teknik untuk mengakses server server web dari sebuah halaman website. AJAX adalah kependekan dari Asynchronous JavaScript And XML.

- contoh:

<!DOCTYPE html>
<html>
<body>

<div id="demo">
  <h2>Let AJAX change this text</h2>
  <button type="button" onclick="loadDoc()">Change Content</button>
</div>

</body>
</html> 


- penjelasan:
halaman html diatas berisi sebuah div section dan sebuah button. 
div section digunakan untuk menampilkan informasi dari sebuah server. 
button nya digunakan untuk memanggil sebuah function ketika di klik. 

berikut adalah function untuk merequest data dari sebuah server web dan menampilkan nya:

function loadDoc() {
  const xhttp = new XMLHttpRequest();
  xhttp.onload = function() {
    document.getElementById("demo").innerHTML = this.responseText;
    }
  xhttp.open("GET", "ajax_info.txt", true);
  xhttp.send();
}

----------

# How AJAX Works
1. sebuah event terjadi di sebuah halaman website. event nya terjadi setelah halaman website sebelumnya sudah dimuat / selesai loading, lalu sebuah button di klik.
2. sebuah object XMLHttpRequest dibuat oleh javascript.
3. object XMLHttpRequest tadi mengirim sebuah request ke sebuah server web.
4. server nya kemudian memproses request yang dikirimkan.
5. server kemudian mengirim sebuah response kembali ke halaman website.
6. response nya kemudian dibaca oleh JavaScript.
7. tindakan yang diperlukan (seperti update halaman website) dilakukan oleh javascript.

bisa juga menggunakan fetch api, karna lebih simple.


--------------------------------------------------

* AJAX XMLHttpRequest Object

Dasar dari AJAX adalah XMLHttpRequest object. Berikut cara kerjanya:

1. membuat sebuah XMLHttpRequest object.
2. mendefinisikan sebuah callback function.
3. mengirim XMLHttpRequest object nya.
4. mengirim sebuah request ke sebuah server.

----------

# XMLHttpRequest object, bisa digunakan untuk bertukar data dengan sebuah server web dibelakang layar. Ini berarti ada kemungkinan untuk mengupdate bagian bagian dari suatu halaman website tanpa perlu melakukan reload ulang seluruh halaman.

----------

# Create an XMLHttpRequest object, berikut adalah sintaks untuk membuat XMLHttpRequest object:

variable = new XMLHttpRequest();

----------

# Define a callback function
callback function adalah sebuah function yang dijadikan sebagai sebuah parameter kepada function lainnya. Dalam hal ini, callback function seharusnya berisikan code untuk dijalankan ketika response nya sudah siap. berikut sintaks pembuatannya:

xhttp.onload = function() {
  // What to do when the response is ready
}

----------

# Send a request
Untuk mengirim sebuah request ke sebuah server, kita bisa menggunakan method open() dan send() dari XMLHttpRequest object. Berikut sintaks pembuatannya:

xhttp.open("GET", "ajax_info.txt");
xhttp.send(); 


- contoh membuat XMLHttpRequest object, mendefinisikan callback function dan mengirim sebuah request:

// Create an XMLHttpRequest object
const xhttp = new XMLHttpRequest();

// Define a callback function
xhttp.onload = function() {
  // Here you can use the Data
}

// Send a request
xhttp.open("GET", "ajax_info.txt");
xhttp.send();


- contoh demo nya:

<!DOCTYPE html>
<html>
<body>

<h2>The XMLHttpRequest Object</h2>

<div id="demo">
<p>Let AJAX change this text.</p>
<button type="button" onclick="loadDoc()">Change Content</button>
</div>

<script>
function loadDoc() {
  const xhttp = new XMLHttpRequest();
  xhttp.onload = function() {
    document.getElementById("demo").innerHTML = this.responseText;
  }
  xhttp.open("GET", "ajax_info.txt");
  xhttp.send();
}
</script>

</body>
</html>

contoh isi file teks yang bisa Anda gunakan untuk mengambil data dengan menggunakan AJAX. Anda dapat menggunakan file teks ini sebagai contoh simulasi data yang diperoleh melalui permintaan AJAX:

```plaintext
Ini adalah contoh isi file teks yang dapat diambil dengan menggunakan AJAX.

Data ini adalah contoh data yang dapat digunakan untuk menguji permintaan AJAX pada proyek Anda. Anda dapat menggantikan konten file ini dengan data sebenarnya yang akan Anda ambil dari server melalui permintaan AJAX.

Pastikan file ini tersedia di server atau lokasi yang dapat diakses melalui permintaan AJAX dalam proyek Anda.

Anda dapat memformat data dalam file ini sesuai dengan kebutuhan proyek Anda, seperti data dalam format JSON, XML, atau format data lainnya yang sesuai.

Ini adalah contoh teks akhir.
```

Anda dapat menyimpan isi file di atas dalam sebuah file teks dengan ekstensi `.txt` di server atau di lokasi yang dapat diakses melalui permintaan AJAX di proyek web Anda. Kemudian, Anda dapat menggunakan permintaan AJAX untuk mengambil isi file tersebut dan menggunakannya dalam aplikasi web Anda sesuai kebutuhan.

----------

# Access across domains

untuk alasan keamanan, browser browser modern tidak di ijinkan untuk mengakses ke seluruh domain domain. ini berarti bahwa kedua halaman website dan file XML yang dicoba untuk dimuat / ditampilkan, wajib diletakkan pada server yang sama. Contoh di W3Schools, semua file file open XML berada di domain W3Schools. Jika kita mau untuk menggunakan contoh diatas tadi pada salah satu halaman website kita, file xml yang di muat wajib diletakkan di server kita sendiri.

----------

# XMLHttpRequest object methods

Method 	                              Description
new XMLHttpRequest() 	                Creates a new XMLHttpRequest object
abort() 	                            Cancels the current request
getAllResponseHeaders() 	            Returns header information
getResponseHeader() 	                Returns specific header information
open(method, url, async, user, psw) 	Specifies the request
                                      method: the request type GET or POST
                                      url: the file location
                                      async: true (asynchronous) or false (synchronous)
                                      user: optional user name
                                      psw: optional password
send() 	                              Sends the request to the server. Used for GET requests
send(string) 	                        Sends the request to the server. Used for POST requests
setRequestHeader() 	                  Adds a label/value pair to the header to be sent

----------

# XMLHttpRequest object properties

Property 	                            Description
onload 	                              Defines a function to be called when the request is received (loaded)
onreadystatechange 	                  Defines a function to be called when the readyState property changes
readyState 	                          Holds the status of the XMLHttpRequest.
                                      0: request not initialized
                                      1: server connection established
                                      2: request received
                                      3: processing request
                                      4: request finished and response is ready
responseText 	                        Returns the response data as a string
responseXML 	                        Returns the response data as XML data
status 	                              Returns the status-number of a request
                                      200: "OK"
                                      403: "Forbidden"
                                      404: "Not Found"
                                      For a complete list go to the Http Messages Reference
statusText 	                          Returns the status-text (e.g. "OK" or "Not Found")

----------

# The onload Property

dengan XMLHttpRequest object, kita bisa mendefinisikan sebuah callback function untuk dijalankan ketika request nya menerima sebuah jawaban. Function nya di definisikan di dalam properti 'onload' dari XMLHttpRequest object, seperti contoh dibawah ini:

xhttp.onload = function() {
  document.getElementById("demo").innerHTML = this.responseText;
}
xhttp.open("GET", "ajax_info.txt");
xhttp.send(); 

----------

# Multiple callback functions

jika kita punya lebih dari 1 tugas AJAX di dalam sebuah website, kita seharusnya membuat 1 function untuk menjalankan XMLHttpRequest object, dan 1 callback function untuk tiap tiap tugas AJAX. pemanggilan dari function nya seharusnya berisikan URL dan function apa yang dipanggil ketika response nya sudah siap.

- contohnya seperti ini:

loadDoc("url-1", myFunction1);

loadDoc("url-2", myFunction2);

function loadDoc(url, cFunction) {
  const xhttp = new XMLHttpRequest();
  xhttp.onload = function() {cFunction(this);}
  xhttp.open("GET", url);
  xhttp.send();
}

function myFunction1(xhttp) {
  // action goes here
}
function myFunction2(xhttp) {
  // action goes here
}

----------

# The onreadystatechange property
properti readyState menyimpan status dari XMLHttpRequest.

properti onreadystatechange mendefinisikan sebuah callback function untuk dijalankan ketika readyState berubah.

properti status dan properti statusText menyimpan status dari XMLHttpRequest object.

Property 	                            Description
onreadystatechange 	                  Defines a function to be called when the readyState property changes
readyState 	                          Holds the status of the XMLHttpRequest.
                                      0: request not initialized
                                      1: server connection established
                                      2: request received
                                      3: processing request
                                      4: request finished and response is ready
status 	                              200: "OK"
                                      403: "Forbidden"
                                      404: "Page not found"
                                      For a complete list go to the Http Messages Reference
statusText 	                          Returns the status-text (e.g. "OK" or "Not Found")

function onreadystatechange dipanggil tiap kali readyState berubah.


ketika readyState nya bernilai 4 dan status nya 200, response nya sudah siap, berikut contohnya:

<!DOCTYPE html>
<html>
<body>

<div id="demo">
<h2>The XMLHttpRequest Object</h2>
<button type="button" onclick="loadDoc()">Change Content</button>
</div>

<script>
function loadDoc() {
  const xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("demo").innerHTML =
      this.responseText;
    }
  };
  xhttp.open("GET", "ajax_info.txt");
  xhttp.send();
}
</script>

</body>
</html>


--------------------------------------------------

* AJAX - XMLHttpRequest, digunakan untuk melakukan request data dari sebuah server.

# Send a request to a server, kita menggunakan method open() dan send() dari XMLHttpRequest object:

xhttp.open("GET", "ajax_info.txt", true);
xhttp.send();


Method 	                      Description
open(method, url, async) 	    Specifies the type of request
                              method: the type of request: GET or POST
                              url: the server (file) location
                              async: true (asynchronous) or false (synchronous)
send() 	                      Sends the request to the server (used for GET)
send(string) 	                Sends the request to the server (used for POST)

----------

# The url - a file on a server
parameter url dari method open(), adalah sebuah alamat untuk ke sebuah file pada sebuah server:

xhttp.open("GET", "ajax_test.asp", true);

file itu bisa jenis file apa saja, seperti .txt dan .xml, atau file server scripting seperti .asp dan .php (yang mana bisa menjalankan aksi aksi pada server tersebut sebelum mengirim response balik).

----------

# Asynchronous - True or False?
server melakukan request yang banyak seharusnya dikirim secara asynchronous (tidak bersamaan / tidak serentak). 

parameter aysnc dari method open() seharusnya di atur menjadi true seperti berikut:

xhttp.open("GET", "ajax_test.asp", true);

dengan mengirimkan nya secara asynchronous / tidak serentak, javascript tidak harus menunggu untuk response server nya, tapi bisa melakukan:
1. menjalankan script lain ketika menunggu untuk response server nya.
2. menangani respons setelah respons siap.

NOTE: nilai default untuk parameter aysnc adalah true. Jadi bisa dikatakan parameter ketiga nya tersebut opsional untuk ditulis atau tidak. synchronous XMLHttpRequest (async = false) tidak direkomendasikan karena javascript akan berhenti menjalankan kodenya sampai response server siap. Jika server sedang sibuk / lambat, aplikasi nya bisa hang atau bahkan stop.

----------

# Get or Post?
Get itu lebih simple dan cepat dibandingkan dengan Post, dan bisa digunakan dalam banyak kasus.

Tetapi, selalu gunakan Post request ketika:
1. sebuah file di cache bukanlah suatu pilihan (sebaiknya perbaharui file atau database di server).
2. mengirim sebuah data yang berukuran besar ke server (Post tidak memiliki batasan untuk ukuran).
3. mengirim input dari user (yang mana bisa berisikan karakter yang tidak diketahui), Post lebih kokoh / kuat dan aman daripada Get.

NOTE: cache -> ruang penyimpanan di hardware, software atau browser yang menyimpan data sementara, yang kemudian digunakan untuk membantu mempercepat loading sistem, aplikasi atau website.

----------

# Get Requests

- contoh sebuah request Get yang simple:

xhttp.open("GET", "demo_get.asp");
xhttp.send(); 


dari contoh diatas, kita mungkin akan mendapatkan hasil sebuah file yang di cache (cache -> ruang penyimpanan di hardware, software atau browser yang menyimpan data sementara, yang kemudian digunakan untuk membantu mempercepat loading sistem, aplikasi atau website). Untuk menghindari ini, tambahkan sebuah ID unik ke URL nya, menjadi seperti berikut:

xhttp.open("GET", "demo_get.asp?t=" + Math.random());
xhttp.send(); 


Jika kita mau mengirim informasi dengan method Get, tambahkan informasi nya ke bagian URL, seperti contoh berikut:

xhttp.open("GET", "demo_get2.asp?fname=Henry&lname=Ford");
xhttp.send(); 

----------

# Post Requests

- contoh sebuah request Post yang simple:

xhttp.open("POST", "demo_post.asp");
xhttp.send(); 

untuk melakukan post data seperti sebuah form HTML, tambahkan sebuah HTTP header dengan setRequestHeader(). Spesifikasikan / jelaskan data yang mau dikirim dalam method send() nya, seperti berikut:

xhttp.open("POST", "ajax_test.asp");
xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xhttp.send("fname=Henry&lname=Ford"); 


Method 	                              Description
setRequestHeader(header, value) 	    Adds HTTP headers to the request
                                      header: specifies the header name
                                      value: specifies the header value

----------

# Synchronous Request

untuk menjalankan sebuah request synchronous, ubah parameter ketiga didalam method open() menjadi false, seperti berikut:

xhttp.open("GET", "ajax_info.txt", false);


Terkadang async = false, digunakan untuk melakukan test cepat. Kita juga akan menemukan request request synchronous di kode javascript yang lama.

Sejak kode akan menunggu untuk penyelesaian server, tidak ada kebutuhan untuk sebuah function onreadystatechange, seperti dibawah ini:

<!DOCTYPE html>
<html>
<body>

<h2>The XMLHttpRequest Object</h2>

<p id="demo">Let AJAX change this text.</p>

<button type="button" onclick="loadDoc()">Change Content</button>

<script>
function loadDoc() {
  var xhttp = new XMLHttpRequest();
  xhttp.open("GET", "ajax_info.txt", false);
  xhttp.send();
  document.getElementById("demo").innerHTML = xhttp.responseText;
}
</script>

</body>
</html>


NOTE: Synchronous XMLHttpRequest (async = false) tidak direkomendasikan karna javascript akan berhenti melakukan eksekusi sampai response dari server nya ready. Jika server sedang sibuk atau lambat, aplikasi akan hang atau stop. Tools developer modern diingatkan mengenai penggunaan request synchronous dan mungkin menyebabkan sebuah exception InvalidAccessError ketika terjadi.


--------------------------------------------------

* AJAX - Server Response

Server response properties

Property 	      Description
responseText 	  get the response data as a string
responseXML 	  get the response data as XML data

----------

# The responseText Property, mengembalikan response si server sebagai sebuah javascript string, dan bisa digunakan berdasarkan seperti dibawah ini:

document.getElementById("demo").innerHTML = xhttp.responseText; 

----------

# The responseXML Property
XMLHttpRequest object memiliki sebuah parser XML bawaan.
parser -> program yang merupakan bagian dari compiler, dan parsing adalah bagian dari proses kompilasi

property responseXML mengembalikan response si server sebagai sebuah XML DOM Object.
dengan menggunakan properti ini, kita bisa melakukan parse response nya sebagai sebuah XML DOM object, seperti dibawah ini, yang melakukan request file cd_catalog.xml dan melakukan parse pada response nya:

<!DOCTYPE html>
<html>
<body>

<h2>The XMLHttpRequest Object</h2>
<p id="demo"></p>
 
<script>
const xhttp = new XMLHttpRequest();
xhttp.onload = function() {
  const xmlDoc = this.responseXML;                  >>> disini bagian parse nya.
  const x = xmlDoc.getElementsByTagName("ARTIST");
  let txt = "";
  for (let i = 0; i < x.length; i++) {
    txt = txt + x[i].childNodes[0].nodeValue + "<br>";
  }
  document.getElementById("demo").innerHTML = txt;
}
xhttp.open("GET", "cd_catalog.xml");
xhttp.send();
</script>

</body>
</html>


----------

# Server Response Methods

Method 	                    Description
getResponseHeader() 	      Returns specific header information from the server response
getAllResponseHeaders() 	  Returns all the header information from the server response

----------

# The getAllResponseHeaders() Method, mengembalikan semua informasi header dari response server nya.

<!DOCTYPE html>
<html>
<body>

<h2>The XMLHttpRequest Object</h2>
<p>The getAllResponseHeaders() function returns all the header information of a resource, like length, server-type, content-type, last-modified, etc:</p>

<p id="demo"></p>

<script>
const xhttp = new XMLHttpRequest();
xhttp.onload = function() {
  document.getElementById("demo").innerHTML =
  this.getAllResponseHeaders();
}
xhttp.open("GET", "ajax_info.txt");
xhttp.send();
</script>

</body>
</html>

----------

# The getResponseHeader() Method, mengembalikan informasi header tertentu secara spesifik dari response server nya.

<!DOCTYPE html>
<html>
<body>

<h2>The XMLHttpRequest Object</h2>

<p>The getResponseHeader() function is used to return specific header information from a resource, like length, server-type, content-type, last-modified, etc:</p>

<p>Last modified: <span id="demo"></span></p>

<script>
const xhttp=new XMLHttpRequest();
xhttp.onload = function() {
  document.getElementById("demo").innerHTML =
  this.getResponseHeader("Last-Modified");
}
xhttp.open("GET", "ajax_info.txt");
xhttp.send();
</script>

</body>
</html>


--------------------------------------------------

* AJAX XML Example
AJAX bisa digunakan untuk komunikasi secara interaktif dengan sebuah file XML.

- contoh berikut akan mendemonstrasikan bagaimana sebuah halaman website bisa melakukan mendapatkan (fetch) informasi dari sebuah file XML dengan AJAX:

<!DOCTYPE html>
<html>
<style>
table,th,td {
  border : 1px solid black;
  border-collapse: collapse;
}
th,td {
  padding: 5px;
}
</style>
<body>

<h2>The XMLHttpRequest Object</h2>

<button type="button" onclick="loadDoc()">Get my CD collection</button>
<br><br>
<table id="demo"></table>

<script>
function loadDoc() {
  const xhttp = new XMLHttpRequest();
  xhttp.onload = function() {
    myFunction(this);
  }
  xhttp.open("GET", "cd_catalog.xml");
  xhttp.send();
}
function myFunction(xml) {
  const xmlDoc = xml.responseXML;
  const x = xmlDoc.getElementsByTagName("CD");
  let table="<tr><th>Artist</th><th>Title</th></tr>";
  for (let i = 0; i <x.length; i++) { 
    table += "<tr><td>" +
    x[i].getElementsByTagName("ARTIST")[0].childNodes[0].nodeValue +
    "</td><td>" +
    x[i].getElementsByTagName("TITLE")[0].childNodes[0].nodeValue +
    "</td></tr>";
  }
  document.getElementById("demo").innerHTML = table;
}
</script>

</body>
</html>


penjelasan:
ketika seorang user melakukan klik pada button bertuliskan "Get my CD collection" diatas, function loadDoc() dijalankan.

function loadDoc() tersebut membuat sebuah XMLHttpRequest object, ditambah function untuk dijalankan ketika response server ready, dan mengirim request ke server nya.

ketika response server sudah siap, sebuah table HTML dibuat, nodes / elements di ekstrak (diambil) dari file XML, dan akhirnya mengupdate elemen 'demo' dengan table HTML yang diisi dengan data XML.

file XML yang digunakan pada contoh diatas dibuat seperti pada link berikut:
https://www.w3schools.com/js/cd_catalog.xml


--------------------------------------------------

* AJAX PHP Example
AJAX digunakan untuk membuat aplikasi yang lebih interaktif.

contohnya ketika ada seorang user mengetikkan sebuah karaketer huruf di dalam kolom input, sebuah function dipanggil showHint() dijalankan. function nya akan terpicu (trigger) dengan event 'onkeyup'. dibawah ini adalah kodenya:

<p>Start typing a name in the input field below:</p>
<p>Suggestions: <span id="txtHint"></span></p>

<form>
First name: <input type="text" onkeyup="showHint(this.value)">
</form>

<script>
function showHint(str) {
  if (str.length == 0) {
    document.getElementById("txtHint").innerHTML = "";
    return;
  } else {
    const xmlhttp = new XMLHttpRequest();
    xmlhttp.onload = function() {
      document.getElementById("txtHint").innerHTML = this.responseText;
    }
  xmlhttp.open("GET", "gethint.php?q=" + str);
  xmlhttp.send();
  }
}
</script> 


penjelasan kode:
pertama, melakukan cek dengan if pada kolom input apakah kosong (str.length == 0). Jika memang kosong, bersihkan isi dari placeholder txtHint dan keluar dari function.

tetapi, jika kolom input tidak kosong, lakukan yang dibawah ini:
- buat sebuah XMLHttpRequest object.
- buat function untuk dijalankan ketika response server sudah siap.
- kirim request ke sebuah file PHP (gethint.php) di server.
- perhatikan bahwa parameter q ditambahkan, gethint.php?q="+str.
- variable str tadi menyimpan isi dari kolom input.

----------

# File PHP - "gethint.php"
file php akan mengecek sebuah array yang berisi kumpulan nama nama, dan mengembalikan nama yang sesuai ke browser nya, seperti contoh berikut:

<?php
// Array with names
$a[] = "Anna";
$a[] = "Brittany";
$a[] = "Cinderella";
$a[] = "Diana";
$a[] = "Eva";
$a[] = "Fiona";
$a[] = "Gunda";
$a[] = "Hege";
$a[] = "Inga";
$a[] = "Johanna";
$a[] = "Kitty";
$a[] = "Linda";
$a[] = "Nina";
$a[] = "Ophelia";
$a[] = "Petunia";
$a[] = "Amanda";
$a[] = "Raquel";
$a[] = "Cindy";
$a[] = "Doris";
$a[] = "Eve";
$a[] = "Evita";
$a[] = "Sunniva";
$a[] = "Tove";
$a[] = "Unni";
$a[] = "Violet";
$a[] = "Liza";
$a[] = "Elizabeth";
$a[] = "Ellen";
$a[] = "Wenche";
$a[] = "Vicky";

// get the q parameter from URL
$q = $_REQUEST["q"];

$hint = "";

// lookup all hints from array if $q is different from ""
if ($q !== "") {
  $q = strtolower($q);
  $len=strlen($q);
  foreach($a as $name) {
    if (stristr($q, substr($name, 0, $len))) {
      if ($hint === "") {
        $hint = $name;
      } else {
        $hint .= ", $name";
      }
    }
  }
}

// Output "no suggestion" if no hint was found or output correct values
echo $hint === "" ? "no suggestion" : $hint;
?> 


--------------------------------------------------

* AJAX ASP Example
AJAX digunakan untuk membuat aplikasi yang lebih interaktif.

contoh jika seorang user mengetikkan sebuah karakter huruf di dalam kolom input, sebuah function yang disebut showHint() dijalankan. function nya itu terpicu oleh event 'onkeyup'. berikut dibawah ini kodenya:

<!DOCTYPE html>
<html>
<body>

<h2>The XMLHttpRequest Object</h2>
<h3>Start typing a name in the input field below:</h3>

<p>Suggestions: <span id="txtHint"></span></p> 
<p>First name: <input type="text" id="txt1" onkeyup="showHint(this.value)"></p>

<script>
function showHint(str) {
  if (str.length == 0) { 
    document.getElementById("txtHint").innerHTML = "";
    return;
  }
  const xhttp = new XMLHttpRequest();
  xhttp.onload = function() {
    document.getElementById("txtHint").innerHTML = this.responseText;
  }
  xhttp.open("GET", "gethint.asp?q="+str);
  xhttp.send();
}
</script>

</body>
</html>


penjelasan kode:
Pertama, kode akan melakukan pengecekan jika kolom input kosong (str.length == 0). Jika memang kosong, bersihkan isi dari placeholder txtHint nya dan keluar dari function.

Akan tetapi, jika kolom input nya tidak kosong, lakukan yang dibawah ini:
- buat sebuah XMLHttpRequest object.
- buat function untuk dijalankan ketika response server sudah siap.
- kirim request ke sebuah file ASP (gethint.asp) pada server.
- perhatikan bahwa parameter q ditambahkan, gethint.asp?q="+str.
- variable str diatas tadi menyimpan isi dari kolom input.

----------

# The ASP File - "gethint.asp"
file ASP mengecek sebuah array yang berisikan nama nama, dan mengembalikan nama yang sesuai ke browser nya, berikut contoh kodenya:

<%
response.expires=-1
dim a(30)
'Fill up array with names
a(1)="Anna"
a(2)="Brittany"
a(3)="Cinderella"
a(4)="Diana"
a(5)="Eva"
a(6)="Fiona"
a(7)="Gunda"
a(8)="Hege"
a(9)="Inga"
a(10)="Johanna"
a(11)="Kitty"
a(12)="Linda"
a(13)="Nina"
a(14)="Ophelia"
a(15)="Petunia"
a(16)="Amanda"
a(17)="Raquel"
a(18)="Cindy"
a(19)="Doris"
a(20)="Eve"
a(21)="Evita"
a(22)="Sunniva"
a(23)="Tove"
a(24)="Unni"
a(25)="Violet"
a(26)="Liza"
a(27)="Elizabeth"
a(28)="Ellen"
a(29)="Wenche"
a(30)="Vicky"

'get the q parameter from URL
q=ucase(request.querystring("q"))

'lookup all hints from array if length of q>0
if len(q)>0 then
  hint=""
  for i=1 to 30
    if q=ucase(mid(a(i),1,len(q))) then
      if hint="" then
        hint=a(i)
      else
        hint=hint & " , " & a(i)
      end if
    end if
  next
end if

'Output "no suggestion" if no hint were found
'or output the correct values
if hint="" then
  response.write("no suggestion")
else
  response.write(hint)
end if
%>


--------------------------------------------------

* AJAX Database Example
AJAX bisa digunakan untuk komunikasi yang interaktif dengan sebuah database.

# AJAX Database Example
dibawah ini adalah contoh demonstrasi bagaimana sebuah halaman website bisa mendapatkan informasi dari sebuah database dengan AJAX:

<!DOCTYPE html>
<html>
<style>
th,td {
  padding: 5px;
}
</style>
<body>

<h2>The XMLHttpRequest Object</h2>

<form action=""> 
  <select name="customers" onchange="showCustomer(this.value)">
    <option value="">Select a customer:</option>
    <option value="ALFKI">Alfreds Futterkiste</option>
    <option value="NORTS ">North/South</option>
    <option value="WOLZA">Wolski Zajazd</option>
  </select>
</form>
<br>
<div id="txtHint">Customer info will be listed here...</div>

<script>
function showCustomer(str) {
  if (str == "") {
    document.getElementById("txtHint").innerHTML = "";
    return;
  }
  const xhttp = new XMLHttpRequest();
  xhttp.onload = function() {
    document.getElementById("txtHint").innerHTML = this.responseText;
  }
  xhttp.open("GET", "getcustomer.php?q="+str);
  xhttp.send();
}
</script>
</body>
</html>

----------

# Example Explained - The showCustomer() function
ketika user memilih seorang customer di daftar dropdown nya, sebuah function yaitu showCustomer() dijalankan. function nya terpicu oleh event onchange, berikut kode javascript nya:

function showCustomer(str) {
  if (str == "") {
    document.getElementById("txtHint").innerHTML = "";
    return;
  }
  const xhttp = new XMLHttpRequest();
  xhttp.onload = function() {
    document.getElementById("txtHint").innerHTML = this.responseText;
  }
  xhttp.open("GET", "getcustomer.php?q="+str);
  xhttp.send();
}

function showCustomer() diatas melakukan hal hal sebagai berikut:
- mengecek jika seorang customer dipilih oleh user dari menu select dropdown.
- membuat sebuah XMLHttpRequest object.
- membuat function untuk dijalankan ketika response server sudah siap.
- mengirim request ke sebuah file di dalam server.
- perhatikan bahwa sebuah parameter q ditambahkan ke URL (dengan isi dari menu select dropdown nya).

----------

# The AJAX Server Page
halaman yang beerada di dalam server yang dipanggil oleh javascript diatas adalah sebuah file PHP yang diberi nama 'getcustomer.php'.
kode kode di dalam file getcustomer.php menjalankan sebuah query pada sebuah database, dan mengembalikan hasilnya dalam bentuk table HTML, berikut source code nya:

<?php
$mysqli = new mysqli("servername", "username", "password", "dbname");
if($mysqli->connect_error) {
  exit('Could not connect');
}

$sql = "SELECT customerid, companyname, contactname, address, city, postalcode, country
FROM customers WHERE customerid = ?";

$stmt = $mysqli->prepare($sql);
$stmt->bind_param("s", $_GET['q']);
$stmt->execute();
$stmt->store_result();
$stmt->bind_result($cid, $cname, $name, $adr, $city, $pcode, $country);
$stmt->fetch();
$stmt->close();

echo "<table>";
echo "<tr>";
echo "<th>CustomerID</th>";
echo "<td>" . $cid . "</td>";
echo "<th>CompanyName</th>";
echo "<td>" . $cname . "</td>";
echo "<th>ContactName</th>";
echo "<td>" . $name . "</td>";
echo "<th>Address</th>";
echo "<td>" . $adr . "</td>";
echo "<th>City</th>";
echo "<td>" . $city . "</td>";
echo "<th>PostalCode</th>";
echo "<td>" . $pcode . "</td>";
echo "<th>Country</th>";
echo "<td>" . $country . "</td>";
echo "</tr>";
echo "</table>";
?> 


--------------------------------------------------

* JSON - Introduction

JSON -> sebuah text format untuk menyimpan dan mengirim data. JSON itu bersifat 'self-describing' dan mudah untuk di mengerti.

- contoh json dalam bentuk string:
'{"name":"John", "age":30, "car":null}'

contoh diatas mendefinisikan sebuah object dengan 3 properti:
- name
- age
- car

tiap tiap properti nya mempunyai sebuah value.

Jika kita mengubah (parse) string JSON nya dengan sebuah program javascript, kita bisa mengakses data nya sebagai sebuah object:
let personName = obj.name;
let personAge = obj.age; 

----------

# Storing Data
ketika menyimpan data, data harus dibuat menjadi sebuah format yang khusus, dan terlepas dari dimana kita memilih untuk menyimpan datanya, 'text' selalu menjadi salah satu dari format format yang diperbolehkan (legal). JSON membuatnya menjadi mungkin untuk menyimpan object javascript sebagai text.

--------------------------------------------------

* JSON Syntax, adalah sebuah bagian dari sintaks javascript.

# JSON Syntax Rules
JSON sintaks berasal dari sintaks notasi object javascript, jadi aturan penulisannya antara lain:
- data ada dalam bentuk pasangan name / value a.k.a key / value
- tiap data dipisahkan oleh koma.
- tanda kurung kurawal {} menyimpan object nya.
- tanda kurung siku [] menyimpan array nya.

----------

# JSON Data - A Name and a Value
sebuah pasangan name / value terdiri dari sebuah kolom nama yang diapit oleh tanda kutip dua, diikuti oleh sebuah titik dua, dan diikuti oleh sebuah value, seperti berikut:

"name":"John"

untuk tiap tiap name pada JSON diperlukan tanda kutip dua.

----------

# JSON - Evaluates to Javascript Objects

pada JSON, keys / names disini wajib dalam bentuk string, ditulis dengan tanda kutip dua:

{"name":"John"}

pada javascript, keys bisa dalam bentuk string, number atau nama pengenal (identifier names):

{name:"John"} 


--------------------------------------------------

* JSON vs XML
JSON dan XMl, keduanya bisa digunakan untuk menerima data dari sebuah web server.

berikut ini adalah contoh JSON dan XMl yang keduanya mendefinisikan sebuah object employees dengan sebuah array dari 3 buah employee:

% contoh JSON
{"employees":[
  { "firstName":"John", "lastName":"Doe" },
  { "firstName":"Anna", "lastName":"Smith" },
  { "firstName":"Peter", "lastName":"Jones" }
]}


% contoh XML
<employees>
  <employee>
    <firstName>John</firstName> <lastName>Doe</lastName>
  </employee>
  <employee>
    <firstName>Anna</firstName> <lastName>Smith</lastName>
  </employee>
  <employee>
    <firstName>Peter</firstName> <lastName>Jones</lastName>
  </employee>
</employees>

----------

# JSON sama dengan XML Karena...
- keduanya bersifat 'self-describing' (dapat dibaca oleh manusia).
- keduanya bersifat hirarkis (terdapat value di dalam kumpulan value).
- keduanya bisa diubah (parse) dan digunakan oleh banyak bahasa pemrograman.
- keduanya bisa didapatkan dengan sebuah XMLHttpRequest.

----------

# JSON tidak sama dengan XML Karena...
- JSON tidak menggunakan tag penutup.
- JSON lebih pendek.
- JSON lebih cepat dibaca dan ditulis.
- JSON bisa menggunakan array.

dan perbedaan terbesarnya adalah:
XML harus diubah dengan sebuah XML parser. Sedangkan JSON bisa diubah oleh sebuah function standar dari javascript.

----------

# Kenapa JSON lebih baik ketimbang XML...
XML lebih sulit untuk diubah ketimbang JSON.
JSON diubah menjadi sebuah object javascript yang siap pakai.

Untuk aplikasi aplikasi AJAX, JSON lebih cepat dan mudah ketimbang XML:

% menggunakan XML:
  - mendapatkan sebuah dokumen XML.
  - menggunakan XML DOM ke perulangan melalui dokumen nya.
  - mengekstrak value value dan menyimpan di dalam variabel variabel.

% menggunakan JSON:
  - mendapat sebuah string JSON.
  - JSON.Parse mengambil string JSON dan mengubahnya menjadi objek JavaScript. 

--------------------------------------------------

* JSON Data Types

# Valid data types
di JSON, value value nya wajib salah satu dari tipe data berikut ini:
- sebuah string, wajib ditulis menggunakan tanda kutip dua.
- sebuah number, wajib dalam bentuk integer atau float.
- sebuah object (JSON Object), value value pada JSON bisa berisikan object.
- sebuah array, value value pada JSON bisa berisikan array.
- sebuah boolean, value value pada JSON bisa bernilai true atau false.
- null, value value pada JSON bisa berisi null.

JSON tidak bisa menggunakan salah satu tipe data dibawah ini:
- sebuah function
- sebuah date
- undefined

tetapi, pada javascript, ketiga tipe data yang tidak bisa digunakan oleh JSON tadi, bisa digunakan oleh object javascript.

--------------------------------------------------

* JSON.parse()
Penggunaan umum JSON digunakan untuk melakukan penukaran data ke atau dari sebuah web server.
Ketika menerima data dari sebuah web server, data nya selalu dalam bentuk sebuah string.
Ubah data dengan JSON.parse(), dan datanya menjadi sebuah object javascript.

----------

# Example - Parsing JSON

1. bayangkan kita menerima text berikut dari sebuah web server:
'{"name":"John", "age":30, "city":"New York"}'

2. gunakan function javascript JSON.parse() untuk mengubah text nya menjadi sebuah object javascript, seperti berikut:
const obj = JSON.parse('{"name":"John", "age":30, "city":"New York"}');

pastikan text nya dalam format JSON, jika tidak kita akan mendapatkan sebuah sintaks error.

3. gunakan object javascript nya didalam halaman website kita:
<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = obj.name;
</script> 


Berikut ini adalah contoh kode lengkapnya:

<!DOCTYPE html>
<html>
<body>

<h2>Creating an Object from a JSON String</h2>

<p id="demo"></p>

<script>
const txt = '{"name":"John", "age":30, "city":"New York"}'                // menerima data text dari web server
const obj = JSON.parse(txt);                                              // mengubah text tadi dengan function parse
document.getElementById("demo").innerHTML = obj.name + ", " + obj.age;    // menggunakan object js yang sudah di parse
</script>

</body>
</html>

----------

# Array as JSON

ketika menggunakan JSON.parse() pada sebuah JSON yang berasal dari sebuah array, method parse nya akan mengembalikan sebuah array javascript, bukan sebuah object javascript.

contohnya:

<!DOCTYPE html>
<html>
<body>

<h2>Parsing a JSON Array.</h2>
<p>Data written as an JSON array will be parsed into a JavaScript array.</p>
<p id="demo"></p>

<script>
const text = '[ "Ford", "BMW", "Audi", "Fiat" ]';
const myArr = JSON.parse(text);
document.getElementById("demo").innerHTML = myArr[0];
</script>

</body>
</html>

>> output: Ford

----------

# Exceptions

## Parsing Dates
object object date (tanggal) tidak diijinkan didalam JSON. Jika kita perlu memasukkan sebuah date (tanggal), kita harus menulisnya sebagai sebuah string. Kita juga bisa mengubahnya kembali sebagai sebuah object date nantinya.

- contoh mengubah sebuah string menjadi sebuah date:

const text = '{"name":"John", "birth":"1986-12-14", "city":"New York"}';
const obj = JSON.parse(text);
obj.birth = new Date(obj.birth);

document.getElementById("demo").innerHTML = obj.name + ", " + obj.birth; 

>> output: John, Sun Dec 14 1986 07:00:00 GMT+0700 (Western Indonesia Time)


atau, kita bisa menggunakan parameter kedua dari function JSON.parse(), yang disebut 'reviver'.
paramter reviver itu adalah sebuah function yang mengecek tiap properti, sebelum mengembalikan value nya.

- contoh mengubah sebuah string menjadi sebuah date, menggunakan function reviver:

const text = '{"name":"John", "birth":"1986-12-14", "city":"New York"}';
const obj = JSON.parse(text, function (key, value) {
  if (key == "birth") {
    return new Date(value);
  } else {
    return value;
  }
});

document.getElementById("demo").innerHTML = obj.name + ", " + obj.birth; 

>> output: John, Sun Dec 14 1986 07:00:00 GMT+0700 (Western Indonesia Time)


## Parsing Functions

function tidak diijinkan didalam JSON.
jika kita butuh memasukkan sebuah function, maka perlu ditulis sebagai sebuah string.
kita bisa mengubahnya kembali sebagai sebuah function nantinya.

- contoh mengubah sebuah string menjadi sebuah function:

const text = '{"name":"John", "age":"function () {return 30;}", "city":"New York"}';
const obj = JSON.parse(text);
obj.age = eval("(" + obj.age + ")");

document.getElementById("demo").innerHTML = obj.name + ", " + obj.age(); 

>> output: John, 30

NOTE: kita diharuskan menghindari penggunaan function didalam JSON, karena function nya akan kehilangan scope mereka, dan kita akan diharuskan untuk menggunakan eval() untuk mengubahnya kembali menjadi function.

--------------------------------------------------

* JSON.stringify()

penggunaan paling umum dari JSON adalah untuk bertukar data ke atau dari sebuah web server.
ketika mengirim data ke sebuah web server, data tersebut harus dalam bentuk sebuah string.
mengubah sebuah object javascript menjadi sebuah string dengan JSON.stringify().

----------

# Stringify a JavaScript Object

- bayangkan kita punya sebuah object ini di javascript:

const obj = {name: "John", age: 30, city: "New York"};

- gunakan function javascript JSON.stringify untuk mengubahnya menjadi sebuah string.

const myJSON = JSON.stringify(obj); 

hasilnya akan menjadi sebuah string yang mengikuti notasi JSON.

- variabel myJSON sekarang adalah sebuah string, dan siap untuk dikirim ke sebuah server.

- berikut contoh kode lengkapnya:

<!DOCTYPE html>
<html>
<body>

<h2>Create a JSON string from a JavaScript object.</h2>
<p id="demo"></p>

<script>
const obj = {name: "John", age: 30, city: "New York"};
const myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;
</script>

</body>
</html>

>> output: {"name":"John","age":30,"city":"New York"}

----------

# Stringify a JavaScript Array

penggunaan function JSON.stringify juga memungkinkan kita untuk mengubah sebuah array javascript.

- bayangkan kita punya sebuah array seperti ini:

const arr = ["John", "Peter", "Sally", "Jane"];

- gunakan function JSON.stringify() untuk mengubah array diatas menjadi sebuah string, seperti berikut:

const myJSON = JSON.stringify(arr); 

hasilnya akan menjadi sebuah string yang mengikuti notasi JSON.

- variabel myJSON sekarang menjadi sebuah string, dan siap untuk dikirim ke sebuah server.

- berikut adalah kode lengkapnya:

<!DOCTYPE html>
<html>
<body>

<h2>Create a JSON string from a JavaScript array.</h2>
<p id="demo"></p>

<script>
const arr = ["John", "Peter", "Sally", "Jane"];
const myJSON = JSON.stringify(arr);
document.getElementById("demo").innerHTML = myJSON;
</script>

</body>
</html>

>> output: ["John","Peter","Sally","Jane"]

----------

# Storing Data
ketika menyimpan data, data harus dalam sebuah bentuk format yang khusus, dan terlepas dari dimana kita memilih untuk menyimpan datanya tersebut, 'teks' selalu merupakan salah satu format yang legal. JSON membuatnya mungkin untuk menyimpan object javascript sebagai text.

- contoh menyimpan data didalam local storage:

// Storing data:
const myObj = {name: "John", age: 31, city: "New York"};
const myJSON = JSON.stringify(myObj);
localStorage.setItem("testJSON", myJSON);

// Retrieving data:
let text = localStorage.getItem("testJSON");
let obj = JSON.parse(text);
document.getElementById("demo").innerHTML = obj.name; 

>> output: John

----------

# Exceptions

## Stringify Dates
di JSON, object date tidak diijinkan. function JSON.stringify() akan mengubah date apapun menjadi string.

- contoh:

const obj = {name: "John", today: new Date(), city : "New York"};
const myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;

kita bisa mengubah string kembali menjadi sebuah object date di penerima.


## Stringify Functions
di JSON, function tidak diijinkan sebagai value dari suatu object. function JSON.stringify() akan me-remove function apapun dari sebuah object javascript, baik key dan value nya. Ini bisa dihilangkan jika kita mengubah function nya menjadi string sebelum menjalankan function JSON.stringify(). berikut contohnya:

const obj = {name: "John", age: function () {return 30;}, city: "New York"};
obj.age = obj.age.toString();
const myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;

>> output: {"name":"John","age":"function () {return 30;}","city":"New York"}

NOTE: jika kita mengirimkan function menggunakan JSON, function tersebut akan kehilangan scope mereka, dan penerima nya akan harus menggunakan eval() untuk mengubahnya kembali menjadi function.

--------------------------------------------------

* JSON Object Literals
dibawah ini adalah sebuah string JSON:

'{"name":"John", "age":30, "car":null}'

didalam string JSON terdapat sebuah JSON object literal:

{"name":"John", "age":30, "car":null}

JSON object literals dikelilingi oleh tanda kurung kurawal {}.
JSON object literals berisi pasangan key value.
keys dan values tadi dipisahkan oleh tanda titik dua :
keys wajib dalam bentuk string, dan values wajib menjadi sebuah tipe data JSON yang valid, tipe datanya antara lain:
  - string
  - number
  - object
  - array
  - boolean
  - null
tiap tiap pasangan key dan value dipisahkan oleh sebuah koma.

Ini adalah kesalahan umum untuk menyebut sebuah JSON object literal sebagai 'sebuah object JSON'.
JSON tidak bisa menjadi sebuah object. JSON adalah sebuah format dalam bentuk string.
Data nya hanya JSON ketika data tersebut dalam format sebuah string. Ketika datanya diubah menjadi sebuah variable javascript, datanya menjadi sebuah object javascript.

----------

# Javascript Objects 
kita bisa membuat sebuah object javascript dari sebuah JSON object literal:

myObj = {"name":"John", "age":30, "car":null};

normalnya, kita membuat sebuah object javascript dengan cara parsing sebuah JSON string, seperti berikut:

myJSON = '{"name":"John", "age":30, "car":null}';
myObj = JSON.parse(myJSON);

----------

# Accessing Object Values
kita bisa mengakses suatu value dari object menggunakan notasi dot (.), seperti berikut:

const myJSON = '{"name":"John", "age":30, "car":null}';
const myObj = JSON.parse(myJSON);
x = myObj.name;

kita juga bisa mengakses value dari object menggunakan tanda kurung siku [], seperti berikut:

const myJSON = '{"name":"John", "age":30, "car":null}';
const myObj = JSON.parse(myJSON);
x = myObj["name"];

----------

# Looping an Object
kita bisa melakukan perulangan melalui properti properti object dengan sebuah perulangan 'for-in', seperti berikut:

<!DOCTYPE html>
<html>
<body>

<h2>Looping Object Properties</h2>
<p id="demo"></p>

<script>
const myJSON = '{"name":"John", "age":30, "car":null}';
const myObj = JSON.parse(myJSON);

let text = "";
for (const x in myObj) {
  text += x + ", ";
}
document.getElementById("demo").innerHTML = text;
</script>

</body>
</html>

>> output: name, age, car,


dalam sebuah perulangan for-in, gunakan notasi tanda kurung siku [] untuk mengakses value dari properti properti nya, seperti berikut:

<!DOCTYPE html>
<html>
<body>

<h2>Looping JavaScript Object Values</h2>
<p id="demo"></p>

<script>
const myJSON = '{"name":"John", "age":30, "car":null}';
const myObj = JSON.parse(myJSON);

let text = "";
for (const x in myObj) {
  text += myObj[x] + ", ";
}
document.getElementById("demo").innerHTML = text;
</script>

</body>
</html>

>> output: John, 30, null,

--------------------------------------------------

* JSON Array Literals

dibawah ini adalah sebuah JSON string:

'["Ford", "BMW", "Fiat"]'

didalam JSON string tersebut terdapat sebuah JSON array literal:

["Ford", "BMW", "Fiat"]

array didalam JSON hampir sama dengan array di javascript.
pada JSON, values pada array wajib bertipe data string, number, object, array, boolean atau null.
pada JavaScript, values pada array bisa menjadi tipe data apa saja berdasarkan pada kalimat diatas, ditambah javascript expression apapun yang valid, termasuk functions, dates dan undefined.

----------

# JavaScript Arrays

kita bisa membuat javascript array dari sebuah array literal seperti dibawah ini:

myArray = ["Ford", "BMW", "Fiat"];

kita bisa membuat sebuah javascript array dengan melakukan parsing sebuah JSON string, seperti dibawah ini:

myJSON = '["Ford", "BMW", "Fiat"]';
myArray = JSON.parse(myJSON);

----------

# Accessing Array Values

kita bisa mengakses value pada array dengan index, seperti berikut:

myArray[0];

----------

# Arrays in Objects

object bisa beriisikan array, dan untuk mengakses value nya bisa dengan index, seperti berikut:

{
"name":"John",
"age":30,
"cars":["Ford", "BMW", "Fiat"]
}

myObj.cars[0];

----------

# Looping Through an Array

kita bisa mengakses value pada array menggunakan perulangan for..in, berikut contohnya:

const myJSON = '{"name":"John", "age":30, "cars":["Ford", "BMW", "Fiat"]}';
const myObj = JSON.parse(myJSON);

let text = "";
for (let i in myObj.cars) {
  text += myObj.cars[i] + ", ";
}

document.getElementById("demo").innerHTML = text;

>> output: Ford, BMW, Fiat,

kita juga bisa menggunakan perulangan for, seperti berikut:

for (let i = 0; i < myObj.cars.length; i++) {
  x += myObj.cars[i];
} 

--------------------------------------------------

* JSON Server



--------------------------------------------------

*** Sisa materi, bisa dipelajari lagi di website codepolitan belajar materi javascript dasar.