* Node.js Tutorial *

Node.js adalah sebuah lingkungan server yang bersifat open-source. 
Node.js mengijinkan kita untuk menjalankan JavaScript diserver.
-----------------------------------------------

* Node.js Introduction

# What is Node.js?
- Node.js adalah sebuah lingkungan server yang bersifat open-source.
- Node.js itu gratis.
- Node.js bisa berjalan diberbagai macam platform seperti windows, linux, unix, mac os, dan lainnya.
- Node.js menggunakan JavaScript di server nya.

-----------

# Why Node.js?
Node.js menggunakan pemrograman asynchronous.

sebuah tugas yang umum untuk sebuah web server bisa untuk membuat sebuah file diserver dan mengembalikan isi filenya ke client.

berikut ini adalah bagaimana PHP atau ASP menangani sebuah permintaan file:
- mengirim tugasnya ke system file komputer.
- menunggu ketika system file membuka dan membaca filenya.
- mengembalikan isi filenya ke client.
- bersiap untuk menangani permintaan selanjutnya.

berikut ini adalah bagaimana Node.js menangani sebuah permintaan file:
- mengirim tugasnya ke system file komputer.
- bersiap untuk menangani permintaan selanjutnya.
- ketika system file sudah membuka dan membaca filenya, server mengembalikan isi filenya ke client.

Node.js mengeliminasi proses menunggunya, dan meneruskannya dengan permintaan selanjutnya.
Node.js berjalan dengan thread tunggal, tanpa blokiran, pemrograman asynchronous, yang mana sangat efisien penggunaan memorynya.

-----------

# What can Node.js do?
- Node.js bisa menghasilkan isi halaman yang dinamik.
- Node.js bisa membuat, membuka, membaca, menulis, menghapus, dan menutup file file diserver.
- Node.js bisa mengumpulkan data dari form.
- Node.js bisa menambah, menghapus, dan mengubah data di database kita.

-----------

# What is a Node.js File?
- file file Node.js berisi tugas tugas yang akan dieksekusi di event event khusus.
- sebuah event khas antara lain seseorang mencoba untuk mengakses sebuah port diserver.
- file file Node.js wajib dimulai diserver sebelum memiliki efek apapun.
- file file Node.js memiliki ekstensi .js

-----------------------------------------------

* Node.js Get Started

# Getting Started
Setelah kita selesai mendownload dan menginstall Node.js dikomputer kita, mari coba untuk menampilkan 'Hello World' disebuah browser web.

- buatlah sebuah file Node.js bernama 'myfirst.js' dan tambahkan kode dibawah ini:

var http = require('http');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.end('Hello World!');
}).listen(8080); 

simpanlah file tersebut dikomputer kita, di C:\Users\Your Name\myfirst.js
kode diatas memberitahukan komputer untuk menulis 'Hello World!' jika seseorang (contohnya sebuah browser web) mencoba mengakses komputer kita di port 8080. untuk lebih lanjutnya akan dijelaskan nanti.

-----------

# Command Line Interface
Node.js harus dimulai didalam sebuah program Command Line Interface dikomputer kita. untuk platform windows bisa menggunakan Command Prompt. lalu pergi ke browser yang berisi file myfirst.js tadi.

-----------

# Initiate the Node.js File
file yang baru saja dibuat tadi harus dimulai oleh Node.js sebelum ada aksi apapun yang mengambil alihnya.
bukalah Command Prompt dan ketikkan 'node myfirst.js' lalu tekan enter.
sekarang, komputer kita bekerja sebagai sebuah server.
jika seseorang mencoba untuk mengakses komputer kita di port 8080, mereka akan mendapatkan pesan 'Hello World!'.
terakhir, buka browser kita, dan ketikkan alamat berikut http://localhost:8080.

-----------------------------------------------

* Node.js Modules

# What is a Module in Node.js?
pertimbangkan Module Module itu sama dengan perpustakaan JavaScript.
sebuah kumpulan function function yang ingin kita masukkan kedalam aplikasi kita.

-----------

# Built-in Modules
Node.js memiliki sebuah kumpulan Module Module bawaan yang bisa kita gunakan tanpa perlu adanya installasi.
dibawah ini adalah sebuah daftar module module bawaan Node.js versi 6.10.3:

Module 	            Description
assert	            Menyediakan serangkaian tes pernyataan
buffer	            Untuk menangani data biner
child_process	    Untuk menjalankan sebuah proses child
cluster	            Untuk membagi satu proses Node menjadi beberapa proses
crypto	            Untuk menangani fungsi kriptografi OpenSSL
dgram	            Menyediakan implementasi soket datagram UDP
dns	                Untuk melakukan pencarian DNS dan fungsi resolusi nama
domain	            Tidak digunakan lagi. Untuk menangani kesalahan yang tidak tertangani
events	            Untuk menangani event event
fs	                Untuk menangani sistem file
http	            Untuk membuat Node.js bertindak sebagai server HTTP
https	            Untuk membuat Node.js bertindak sebagai server HTTPS
net	                Untuk membuat server dan klien
os	                Memberikan informasi tentang sistem operasi
path	            Untuk menangani jalur file (alamat suatu file)
punycode	        Tidak digunakan lagi. Skema pengkodean karakter
querystring	        Untuk menangani string query URL
readline	        Untuk menangani aliran yang dapat dibaca satu baris pada satu waktu
stream	            Untuk menangani data streaming
string_decoder	    Untuk memecahkan kode objek buffer menjadi string
timers	            Untuk menjalankan suatu fungsi setelah beberapa milidetik tertentu
tls	                Untuk mengimplementasikan protokol TLS dan SSL
tty	                Menyediakan kelas yang digunakan oleh terminal teks
url	                Untuk mengurai string URL
util	            Untuk mengakses fungsi utilitas
v8	                Untuk mengakses informasi tentang V8 (mesin JavaScript)
vm	                Untuk mengkompilasi kode JavaScript di mesin virtual
zlib	            Untuk mengompresi atau mendekompresi file

-----------

# Include Modules
untuk memasukkan sebuah module, gunakan function require() dengan nama dari modulenya, contohnya:

var http = require('http'); 

sekarang aplikasi kita punya akses ke module HTTP, dan bisa membuat sebuah server, berikut contoh kodenya:

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.end('Hello World!');
}).listen(8080); 

-----------

# Create your Own Module
kita bisa membuat module kita sendiri, dan secara mudah memasukkannya kedalam aplikasi kita.
contoh dibawah ini membuat sebuah module yang mengembalikan sebuah objek tanggal dan waktu terkini:

exports.myDateTime = function () {
  return Date();
};

gunakan keyword 'exports' untuk membuat properti dan method tersedia diluar file module.
simpan kode diatas disebuah file dengan nama "myfirstmodule.js"

-----------

# Include your Own Module
sekarang kita bisa memasukkan dan menggunakan module diatas didalam file file Node.js manapun.
- contoh penggunaan module "myfirstmodule" didalam sebuah file Node.js:

var http = require('http');
var dt = require('./myfirstmodule');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write("The date and time are currently: " + dt.myDateTime());
  res.end();
}).listen(8080); 

perhatikan bahwa kita menggunakan ./ untuk menemukan lokasi modulenya, yang berarti bahwa module tersebut berada dilokasi yang sama dengan file Node.js nya.
simpan kode diatas itu didalam sebuah file "demo_module.js" dan jalankan filenya dengan perintah berikut:

>> node demo_module.js 

selanjutnya kita bisa melihat hasilnya tersebut lewat url http://localhost:8080

-----------------------------------------------

* Node.js HTTP Module

# The Built-in HTTP Module
Node.js memiliki sebuah module bawaan bernama HTTP, yang mengijinkan Node.js untuk mentransfer data melewati HTTP.
untuk memasukkan module HTTP, gunakan method require, berikut contohnya:

var http = require('http'); 

-----------

# Node.js as a Web Server
module HTTP bisa membuat sebuah server HTTP yang mendengarkan (listen) port port server dan memberikan sebuah response balik ke client.
gunakan method createServer() untuk membuat sebuah server HTTP, berikut contohnya:

var http = require('http');

//create a server object:
http.createServer(function (req, res) {
  res.write('Hello World!'); //write a response to the client
  res.end(); //end the response
}).listen(8080); //the server object listens on port 8080 

function yang dimasukkan kedalam method http.createServer(), akan dieksekusi ketika seseorang mencoba mengakses komputernya diport 8080.

simpan kode diatas kedalam sebuah file bernama "demo_http.js", dan mulai jalankan filenya tersebut dengan perintah berikut:

>> node demo_http.js 

lalu buka diweb browser localhost dengan port 8080 >> http://localhost:8080

-----------

# Add an HTTP Header
jika response dari server HTTP seharusnya ditampilkan sebagai sebuah HTML, kita seharusnya memasukkan sebuah header HTTP dengan isi content type yang tepat, berikut contohnya:

var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write('Hello World!');
  res.end();
}).listen(8080); 

argument pertama dari method res.writeHead() adalah kode status, 200 berarti semuanya OK, lalu argument kedua adalah sebuah object berisikan response header.

-----------

# Read the QUery String
function yang dimasukkan ke dalam method http.createServer() memiliki sebuah argument req yang merepresentasikan permintaan (request) dari client, sebagai sebuah object (http.IncomingMessage object)

object ini memiliki sebuah properti bernama "url" yang menyimpan sebagian dari url yang muncul setelah nama domainnya, berikut contohnya:

var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write(req.url);
  res.end();
}).listen(8080); 

simpan kode diatas didalam sebuah file bernama "demo_http_url.js" dan mulai jalankan filenya dengan perintah berikut:

>> node demo_http_url.js 

jika kita sudah mengikuti semua langkah langkah diatas dikomputer kita, kita seharusnya bisa melihat 2 hasil yang berbeda ketika membuka 2 alamat localhost dibawah ini:

http://localhost:8080/summer

>> output: /summer

http://localhost:8080/winter

>> output: /winter

-----------

# Split the Query String
terdapat module module bawaan untuk secara mudah membagi string query menjadi bagian bagian yang mudah untuk dibaca, seperti module URL.

- contoh membagi string query menjadi bagian bagian yang mudah untuk dibaca:

var http = require('http');
var url = require('url');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  
  /*Use the url module to turn the querystring into an object:*/
  var q = url.parse(req.url, true).query;
  
  /*Return the year and month from the query object:*/
  var txt = q.year + " " + q.month;
  res.end(txt);
}).listen(8080);

simpan kode diatas kedalam sebuah file bernama "demo_querystring.js" dan mulai jalankan filenya dengan perintah berikut:

>> node demo_querystring.js 

untuk alamat url-nya, gunakan yang dibawah ini:

http://localhost:8080/?year=2017&month=July

>> output: 2017 July

-----------------------------------------------

* Node.js File System Module


-----------------------------------------------
-----------

