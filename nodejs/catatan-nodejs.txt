* Node.js Tutorial *

Node.js adalah sebuah lingkungan server yang bersifat open-source. 
Node.js mengijinkan kita untuk menjalankan JavaScript diserver.
-----------------------------------------------

* Node.js Introduction

# What is Node.js?
- Node.js adalah sebuah lingkungan server yang bersifat open-source.
- Node.js itu gratis.
- Node.js bisa berjalan diberbagai macam platform seperti windows, linux, unix, mac os, dan lainnya.
- Node.js menggunakan JavaScript di server nya.

-----------

# Why Node.js?
Node.js menggunakan pemrograman asynchronous.

sebuah tugas yang umum untuk sebuah web server bisa untuk membuat sebuah file diserver dan mengembalikan isi filenya ke client.

berikut ini adalah bagaimana PHP atau ASP menangani sebuah permintaan file:
- mengirim tugasnya ke system file komputer.
- menunggu ketika system file membuka dan membaca filenya.
- mengembalikan isi filenya ke client.
- bersiap untuk menangani permintaan selanjutnya.

berikut ini adalah bagaimana Node.js menangani sebuah permintaan file:
- mengirim tugasnya ke system file komputer.
- bersiap untuk menangani permintaan selanjutnya.
- ketika system file sudah membuka dan membaca filenya, server mengembalikan isi filenya ke client.

Node.js mengeliminasi proses menunggunya, dan meneruskannya dengan permintaan selanjutnya.
Node.js berjalan dengan thread tunggal, tanpa blokiran, pemrograman asynchronous, yang mana sangat efisien penggunaan memorynya.

-----------

# What can Node.js do?
- Node.js bisa menghasilkan isi halaman yang dinamik.
- Node.js bisa membuat, membuka, membaca, menulis, menghapus, dan menutup file file diserver.
- Node.js bisa mengumpulkan data dari form.
- Node.js bisa menambah, menghapus, dan mengubah data di database kita.

-----------

# What is a Node.js File?
- file file Node.js berisi tugas tugas yang akan dieksekusi di event event khusus.
- sebuah event khas antara lain seseorang mencoba untuk mengakses sebuah port diserver.
- file file Node.js wajib dimulai diserver sebelum memiliki efek apapun.
- file file Node.js memiliki ekstensi .js

-----------------------------------------------

* Node.js Get Started

# Getting Started
Setelah kita selesai mendownload dan menginstall Node.js dikomputer kita, mari coba untuk menampilkan 'Hello World' disebuah browser web.

- buatlah sebuah file Node.js bernama 'myfirst.js' dan tambahkan kode dibawah ini:

var http = require('http');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.end('Hello World!');
}).listen(8080); 

simpanlah file tersebut dikomputer kita, di C:\Users\Your Name\myfirst.js
kode diatas memberitahukan komputer untuk menulis 'Hello World!' jika seseorang (contohnya sebuah browser web) mencoba mengakses komputer kita di port 8080. untuk lebih lanjutnya akan dijelaskan nanti.

-----------

# Command Line Interface
Node.js harus dimulai didalam sebuah program Command Line Interface dikomputer kita. untuk platform windows bisa menggunakan Command Prompt. lalu pergi ke browser yang berisi file myfirst.js tadi.

-----------

# Initiate the Node.js File
file yang baru saja dibuat tadi harus dimulai oleh Node.js sebelum ada aksi apapun yang mengambil alihnya.
bukalah Command Prompt dan ketikkan 'node myfirst.js' lalu tekan enter.
sekarang, komputer kita bekerja sebagai sebuah server.
jika seseorang mencoba untuk mengakses komputer kita di port 8080, mereka akan mendapatkan pesan 'Hello World!'.
terakhir, buka browser kita, dan ketikkan alamat berikut http://localhost:8080.

-----------------------------------------------

* Node.js Modules

# What is a Module in Node.js?
pertimbangkan Module Module itu sama dengan perpustakaan JavaScript.
sebuah kumpulan function function yang ingin kita masukkan kedalam aplikasi kita.

-----------

# Built-in Modules
Node.js memiliki sebuah kumpulan Module Module bawaan yang bisa kita gunakan tanpa perlu adanya installasi.
dibawah ini adalah sebuah daftar module module bawaan Node.js versi 6.10.3:

Module 	            Description
assert	            Menyediakan serangkaian tes pernyataan
buffer	            Untuk menangani data biner
child_process	    Untuk menjalankan sebuah proses child
cluster	            Untuk membagi satu proses Node menjadi beberapa proses
crypto	            Untuk menangani fungsi kriptografi OpenSSL
dgram	            Menyediakan implementasi soket datagram UDP
dns	                Untuk melakukan pencarian DNS dan fungsi resolusi nama
domain	            Tidak digunakan lagi. Untuk menangani kesalahan yang tidak tertangani
events	            Untuk menangani event event
fs	                Untuk menangani sistem file
http	            Untuk membuat Node.js bertindak sebagai server HTTP
https	            Untuk membuat Node.js bertindak sebagai server HTTPS
net	                Untuk membuat server dan klien
os	                Memberikan informasi tentang sistem operasi
path	            Untuk menangani jalur file (alamat suatu file)
punycode	        Tidak digunakan lagi. Skema pengkodean karakter
querystring	        Untuk menangani string query URL
readline	        Untuk menangani aliran yang dapat dibaca satu baris pada satu waktu
stream	            Untuk menangani data streaming
string_decoder	    Untuk memecahkan kode objek buffer menjadi string
timers	            Untuk menjalankan suatu fungsi setelah beberapa milidetik tertentu
tls	                Untuk mengimplementasikan protokol TLS dan SSL
tty	                Menyediakan kelas yang digunakan oleh terminal teks
url	                Untuk mengurai string URL
util	            Untuk mengakses fungsi utilitas
v8	                Untuk mengakses informasi tentang V8 (mesin JavaScript)
vm	                Untuk mengkompilasi kode JavaScript di mesin virtual
zlib	            Untuk mengompresi atau mendekompresi file

-----------

# Include Modules
untuk memasukkan sebuah module, gunakan function require() dengan nama dari modulenya, contohnya:

var http = require('http'); 

sekarang aplikasi kita punya akses ke module HTTP, dan bisa membuat sebuah server, berikut contoh kodenya:

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.end('Hello World!');
}).listen(8080); 

-----------

# Create your Own Module
kita bisa membuat module kita sendiri, dan secara mudah memasukkannya kedalam aplikasi kita.
contoh dibawah ini membuat sebuah module yang mengembalikan sebuah objek tanggal dan waktu terkini:

exports.myDateTime = function () {
  return Date();
};

gunakan keyword 'exports' untuk membuat properti dan method tersedia diluar file module.
simpan kode diatas disebuah file dengan nama "myfirstmodule.js"

-----------

# Include your Own Module
sekarang kita bisa memasukkan dan menggunakan module diatas didalam file file Node.js manapun.
- contoh penggunaan module "myfirstmodule" didalam sebuah file Node.js:

var http = require('http');
var dt = require('./myfirstmodule');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write("The date and time are currently: " + dt.myDateTime());
  res.end();
}).listen(8080); 

perhatikan bahwa kita menggunakan ./ untuk menemukan lokasi modulenya, yang berarti bahwa module tersebut berada dilokasi yang sama dengan file Node.js nya.
simpan kode diatas itu didalam sebuah file "demo_module.js" dan jalankan filenya dengan perintah berikut:

>> node demo_module.js 

selanjutnya kita bisa melihat hasilnya tersebut lewat url http://localhost:8080

-----------------------------------------------

* Node.js HTTP Module

# The Built-in HTTP Module
Node.js memiliki sebuah module bawaan bernama HTTP, yang mengijinkan Node.js untuk mentransfer data melewati HTTP.
untuk memasukkan module HTTP, gunakan method require, berikut contohnya:

var http = require('http'); 

-----------

# Node.js as a Web Server
module HTTP bisa membuat sebuah server HTTP yang mendengarkan (listen) port port server dan memberikan sebuah response balik ke client.
gunakan method createServer() untuk membuat sebuah server HTTP, berikut contohnya:

var http = require('http');

//create a server object:
http.createServer(function (req, res) {
  res.write('Hello World!'); //write a response to the client
  res.end(); //end the response
}).listen(8080); //the server object listens on port 8080 

function yang dimasukkan kedalam method http.createServer(), akan dieksekusi ketika seseorang mencoba mengakses komputernya diport 8080.

simpan kode diatas kedalam sebuah file bernama "demo_http.js", dan mulai jalankan filenya tersebut dengan perintah berikut:

>> node demo_http.js 

lalu buka diweb browser localhost dengan port 8080 >> http://localhost:8080

-----------

# Add an HTTP Header
jika response dari server HTTP seharusnya ditampilkan sebagai sebuah HTML, kita seharusnya memasukkan sebuah header HTTP dengan isi content type yang tepat, berikut contohnya:

var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write('Hello World!');
  res.end();
}).listen(8080); 

argument pertama dari method res.writeHead() adalah kode status, 200 berarti semuanya OK, lalu argument kedua adalah sebuah object berisikan response header.

-----------

# Read the QUery String
function yang dimasukkan ke dalam method http.createServer() memiliki sebuah argument req yang merepresentasikan permintaan (request) dari client, sebagai sebuah object (http.IncomingMessage object)

object ini memiliki sebuah properti bernama "url" yang menyimpan sebagian dari url yang muncul setelah nama domainnya, berikut contohnya:

var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write(req.url);
  res.end();
}).listen(8080); 

simpan kode diatas didalam sebuah file bernama "demo_http_url.js" dan mulai jalankan filenya dengan perintah berikut:

>> node demo_http_url.js 

jika kita sudah mengikuti semua langkah langkah diatas dikomputer kita, kita seharusnya bisa melihat 2 hasil yang berbeda ketika membuka 2 alamat localhost dibawah ini:

http://localhost:8080/summer

>> output: /summer

http://localhost:8080/winter

>> output: /winter

-----------

# Split the Query String
terdapat module module bawaan untuk secara mudah membagi string query menjadi bagian bagian yang mudah untuk dibaca, seperti module URL.

- contoh membagi string query menjadi bagian bagian yang mudah untuk dibaca:

var http = require('http');
var url = require('url');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  
  // menggunakan module url untuk mengubah querystring menjadi sebuah object
  var q = url.parse(req.url, true).query;
  
  // mengembalikkan tahun dan bulan dari object query yang dimasukkan lewat alamat url-nya
  var txt = q.year + " " + q.month;
  res.end(txt);
}).listen(8080);

simpan kode diatas kedalam sebuah file bernama "demo_querystring.js" dan mulai jalankan filenya dengan perintah berikut:

>> node demo_querystring.js 

untuk alamat url-nya, gunakan yang dibawah ini:

http://localhost:8080/?year=2017&month=July

>> output: 2017 July

-----------------------------------------------

* Node.js File System Module

# Node.js as a File Server
Module file system Node.js mengijinkan kita untuk bekerja dengan file system dikomputer kita sendiri.
untuk memasukkan module file system, gunakan method require(), seperti contoh dibawah ini:

var fs = require('fs'); 

penggunaan umum untuk module file system antara lain:
- membaca file
- membuat file
- mengupdate file
- menghapus file
- mengganti nama file

-----------

## Read Files
method fs.readFile() digunakan untuk membaca file file yang ada dikomputer kita.
kita asumsikan kita memiliki sebuah file HTML yang disimpan dilokasi yang sama dengan file Node.js, berikut contoh file HTML nya:

demofile1.html

<html>
<body>
<h1>My Header</h1>
<p>My paragraph.</p>
</body>
</html> 

lalu buat sebuah file Node.js yang akan membaca file HTML diatas, dan mengembalikan isinya, berikut isi file Node.js nya:


var http = require('http');
var fs = require('fs');
http.createServer(function (req, res) {
  //Open a file on the server and return its content:
  fs.readFile('demofile1.html', function(err, data) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    return res.end();
  });
}).listen(8080);

lalu simpan kode diatas kedalam file yang bernama 'demo_readfile.js', lalu jalankan kodenya dengan perintah berikut:

>> node demo_readfile.js

terakhir, akses dengan url berikut: http://localhost:8080

-----------

## Create Files
Module file system memiliki method method untuk membuat file file baru, berikut method methodnya:
- fs.appendFile()
- fs.open()
- fs.writeFile()

- method fs.appendFile() menambahkan konten tertentu ke sebuah file. jika filenya tidak ada, maka filenya akan dibuatkan, berikut contoh membuat sebuah file baru menggunakan method appendFile():

var fs = require('fs');

fs.appendFile('mynewfile1.txt', 'Hello content!', function (err) {
  if (err) throw err;
  console.log('Saved!');
}); 


- method fs.open() mengambil sebuah 'flag' sebagai argument keduanya, jika flagnya ini bernilai 'w' untuk menulis / 'writing', maka file tertentu dibuka untuk ditulis. jika filenya tidak ada, maka sebuah file kosong dibuat. berikut contoh membuat sebuah file baru yang kosong menggunakan method open():

var fs = require('fs');

fs.open('mynewfile2.txt', 'w', function (err, file) {
  if (err) throw err;
  console.log('Saved!');
}); 


- method fs.writeFile() mengganti file tertentu dan isinya jika ada. jika filenya tidak ada, maka akan dibuatkan sebuah file baru, berisikan content tertentu. berikut contoh membuat sebuah file baru menggunakan method writeFile():

var fs = require('fs');

fs.writeFile('mynewfile3.txt', 'Hello content!', function (err) {
  if (err) throw err;
  console.log('Saved!');
}); 

-----------

## Update Files
module file system memiliki method method untuk mengupdate file file, diantaranya:

- fs.appendFile()
- fs.writeFile()

- method fs.appendFile() menambahkan isi tertentu diakhir dari file yang ditentukan. contoh menambahkan kalimat 'This is my text.' ke akhir dari file mynewfile.txt:

var fs = require('fs');

fs.appendFile('mynewfile.txt', ' This is my text.', function (err) {
  if (err) throw err;
  console.log('Updated!');
}); 


- method fs.writeFile() mengganti file tertentu dan isi filenya. contoh mengganti isi dari file mynewfile3.txt:

var fs = require('fs');

fs.writeFile('mynewfile3.txt', 'This is my text', function (err) {
  if (err) throw err;
  console.log('Replaced!');
}); 

-----------

## Delete Files
untuk menghapus sebuah file dengan module file system, gunakan method fs.unlink().
method fs.unlink() ini akan menghapus file yang ditentukan:

- contoh menghapus file mynewfile2.txt:

var fs = require('fs');

fs.unlink('mynewfile2.txt', function (err) {
  if (err) throw err;
  console.log('File deleted!');
}); 

-----------

## Rename Files
untuk mengganti nama sebuah file dengan module file system, gunakan method fs.rename().
method fs.rename() akan mengganti nama dari sebuah file yang ditentukan.

- contoh mengganti name file 'mynewfile1.txt' menjadi 'myrenamedfile.txt':

var fs = require('fs');

fs.rename('mynewfile1.txt', 'myrenamedfile.txt', function (err) {
  if (err) throw err;
  console.log('File Renamed!');
}); 

-----------------------------------------------

* Node.js URL Module

# The Built-in URL Module
module URL membagi sebuah alamat website menjadi beberapa bagian yang dapat dibaca.
untuk menambahkan module URL, gunakan method require():

var url = require('url'); 


mengurai sebuah alamat website dengan method url.parse(), dan hasilnya akan mengembalikan sebuah object URL dengan tiap bagian dari alamatnya sebagai properti. contoh dibawah ini membagi sebuah alamat website menjadi beberapa bagian yang dapat dibaca:

var url = require('url');
var adr = 'http://localhost:8080/default.htm?year=2017&month=february';

//Parse the address:
var q = url.parse(adr, true);

/*The parse method returns an object containing url properties*/
console.log(q.host); //returns 'localhost:8080'
console.log(q.pathname); //returns '/default.htm'
console.log(q.search); //returns '?year=2017&month=february'

/*The query property returns an object with all the querystring parameters as properties:*/
var qdata = q.query; //returns an object: { year: 2017, month: 'february' }
console.log(qdata.month); //returns 'february'

-----------

# Node.js File Server
sekarang kita tau bagaimana untuk menguraikan query string, dan kita sudah mempelajari bagaimana membuat Node.js bertingkah laku sebagai sebuah file server. sekarang mari kita kombinasikan keduanya, dan menampilkan file yang diminta oleh client.

sekarang kita buat dua buah file HTML dan menyimpan keduanya didalam folder yang sama dengan file Node.js nya.

summer.html

<!DOCTYPE html>
<html>
<body>
<h1>Summer</h1>
<p>I love the sun!</p>
</body>
</html> 


winter.html

<!DOCTYPE html>
<html>
<body>
<h1>Winter</h1>
<p>I love the snow!</p>
</body>
</html> 


lanjut membuat sebuah file Node.js yang akan membuka file yang diminta dan mengembalikan isinya ke client. jika ada yang salah maka akan ditampilkan error 404, berikut kodenya:

demo_fileserver.js

var http = require('http');
var url = require('url');
var fs = require('fs');

http.createServer(function (req, res) {
  var q = url.parse(req.url, true);
  var filename = "." + q.pathname;
  fs.readFile(filename, function(err, data) {
    if (err) {
      res.writeHead(404, {'Content-Type': 'text/html'});
      return res.end("404 Not Found");
    } 
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    return res.end();
  });
}).listen(8080); 


ingat untuk memulai filenya dengan perintah berikut:

>> node demo_fileserver.js 


selanjutnya ketika dibuka di web browser dengan dua alamat website dibawah ini, maka isinya akan ditampilkan seperti berikut:

http://localhost:8080/summer.html
output>>

Summer

I love the sun!


http://localhost:8080/winter.html
output>>

Winter

I love the snow!

-----------------------------------------------

* Node.js NPM

# What is NPM?
NPM adalah sebuah package manager untuk package package Node.js, atau module module yang kita suka. www.npmjs.com berisikan ribuan package package gratis untuk didownload dan digunakan. program npm sudah terinstall dikomputer kita ketika kita melakukan installasi Node.js.

-----------

# What is a Package?
sebuah package pada Node.js berisikan semua file file yang kita butuhkan untuk sebuah module. module module tersebut adalah perpustakaan JavaScript yang bisa kita masukkan kedalam project kita.

-----------

# Download a Package
mengunduh sebuah package itu sangatlah mudah, caranya dengan membuka cmd dan memberitahukan NPM untuk mengunduh package yang kita mau. berikut adalah contoh bagaimana mengunduh sebuah package yang disebut "upper-case":

>> npm install upper-case

sekarang kita telah selesai mengunduh dan menginstall package pertama kita.
NPM membuat sebuah folder bernama "node_modules", dimana package package yang sudah diunduh akan disimpan. semua package yang kita install dimasa depan nantinya akan disimpan didalam folder tersebut.

sekarang project kita akan memiliki struktur folder seperti berikut:

C:\Users\My Name\node_modules\upper-case

-----------

# Using a Package
setelah package yang kita butuhkan selesai diinstall, maka package tersebut sudah bisa digunakan. termasuk package "upper-case" bisa kita masukkan kedalam module manapun, berikut contoh penggunaannya:

var uc = require('upper-case'); 


- contoh, buatlah sebuah file Node.js yang akan mengubah output "Hello World!" menjadi huruf kapital semua:

var http = require('http');
var uc = require('upper-case');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write(uc.upperCase("Hello World!"));
  res.end();
}).listen(8080); 

simpan kode diatas didalam sebuah file bernama "demo_uppercase.js" dan jalankan kodenya dengan perintah berikut:

>> node demo_uppercase.js

hasilnya dapat dilihat dialamat berikut >> http://localhost:8080

-----------------------------------------------

* Node.js Events

# Events in Node.js
setiap aksi yang dilakukan pada komputer adalah sebuah event. seperti ketika sebuah koneksi dibuat atau sebuah file dibuka.
object object didalam Node.js bisa menjalankan event event, seperti object readStream menjalankan event ketika membuka dan menutup sebuah file, berikut contohnya:

var fs = require('fs');

var readStream = fs.createReadStream('./demofile.txt');

/*Write to the console when the file is opened:*/
readStream.on('open', function () {
  console.log('The file is open');
});

-----------

# Events Module
Node.js memiliki sebuah module bawaan yang disebut "Events", dimana kita bisa membuat, menjalankan, dan mendengarkan (listen) event event milik kita sendiri.

untuk memasukkan module event bawaan gunakan method 'require()'. lalu tambahannya, semua properti dan method dari event event tersebut adalah sebuah contoh dari object "EventEmitter". agar bisa mengakses properti dan method ini, buatlah sebuah object EventEmitter seperti contoh dibawah:

var events = require('events');
var eventEmitter = new events.EventEmitter(); 

-----------

# The EventEmitter Object
kita bisa menugaskan event handlers ke event milik kita sendiri dengan object eventEmitter.
contoh dibawah ini, kita membuat sebuah function yang akan dieksekusi ketika sebuah event "scream" dijalankan. untuk menjalankan sebuah event, gunakan method "emit()".

var events = require('events');
var eventEmitter = new events.EventEmitter();

//Create an event handler:
var myEventHandler = function () {
  console.log('I hear a scream!');
}

//Assign the event handler to an event:
eventEmitter.on('scream', myEventHandler);

//Fire the 'scream' event:
eventEmitter.emit('scream');

output>> I hear a scream!

-----------------------------------------------

* Node.js Upload Files

# The Formidable Module
terdapat module yang sangat bagus untuk pekerjaan yang berhubungan dengan mengupload file file, yaitu "Formidable". module Formidable tersebut bisa didownload dan diinstall menggunakan NPM, berikut contohnya:

>> npm install formidable

setelah selesai mendownload module Formidable tersebut, kita bisa memasukkannya kedalam aplikasi / project kita, berikut contohnya:

var formidable = require('formidable');

-----------

# Upload Files
sekarang kita sudah siap untuk membuat sebuah halaman website didalam Node.js yang mengijinkan user untuk mengupload file file mereka ke komputer kita.

- step 1: Create an Upload Form
buat sebuah file Node.js yang menuliskan sebuah form HTML, dengan sebuah input untuk melakukan Upload. Kode dibawah ini akan membuat sebuah form HTML:

var http = require('http');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
  res.write('<input type="file" name="filetoupload"><br>');
  res.write('<input type="submit">');
  res.write('</form>');
  return res.end();
}).listen(8080); 


- step 2: Parse the Uploaded File
masukkan module Formidable agar bisa mengurai file yang telah diupload setelah file tersebut mencapai server. ketika file telah diupload dan diuraikan, file tersebut akan ditempatkan disebuah folder sementara didalam komputer kita. contoh dibawah ini, file nya akan diupload, dan ditempatkan didalam sebuah folder sementara:

var http = require('http');
var formidable = require('formidable');

http.createServer(function (req, res) {
  if (req.url == '/fileupload') {
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
      res.write('File uploaded');
      res.end();
    });
  } else {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
    res.write('<input type="file" name="filetoupload"><br>');
    res.write('<input type="submit">');
    res.write('</form>');
    return res.end();
  }
}).listen(8080); 


- step 3: Save the File
ketika sebuah file sudah berhasil diupload ke server, file tersebut ditempatkan difolder sementara. jalur ke folder sementara ini bisa ditemukan didalam object "files", yang dijadikan sebagai argument ketiga didalam method parse() dari sebuah callback function. untuk memindahkan filenya ke folder pilihan kita, gunakan module file system, dan ganti nama filenya. contoh dibawah ini adalah contoh memasukkan module file system dan memindahkan filenya ke folder terkini:

var http = require('http');
var formidable = require('formidable');
var fs = require('fs');

http.createServer(function (req, res) {
  if (req.url == '/fileupload') {
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
      var oldpath = files.filetoupload.filepath;
      var newpath = 'D:/belajar-kelasfullstack/nodejs/example/part8-upload-files' + files.filetoupload.originalFilename;
      fs.rename(oldpath, newpath, function (err) {
        if (err) throw err;
        res.write('File uploaded and moved!');
        res.end();
      });
 });
  } else {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
    res.write('<input type="file" name="filetoupload"><br>');
    res.write('<input type="submit">');
    res.write('</form>');
    return res.end();
  }
}).listen(8080); 

-----------------------------------------------

* Node.js Send an Email

# The Nodemailer Module
module Nodemailer memberikan kemudahan untuk mengirim email dari komputer kita.
module Nodemailer ini bisa kita download dan install dengan npm, berikut caranya:

>> npm install nodemailer

setelah didownload, kita sudah bisa memasukkan module tersebut kedalam aplikasi manapun:

var nodemailer = require('nodemailer'); 

-----------

# Send an Email

sekarang kita sudah siap untuk mengirim email dari server.
gunakan username dan password dari provider email yang dipilih untuk mengirim sebuah email. pada Tutorial kali ini, akan diperlihatkan bagaimana menggunakan akun gmail untuk mengirim sebuah email:

var nodemailer = require('nodemailer');

var transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'youremail@gmail.com',
    pass: 'yourpassword'
  }
});

var mailOptions = {
  from: 'youremail@gmail.com',
  to: 'myfriend@yahoo.com',
  subject: 'Sending Email using Node.js',
  text: 'That was easy!'
};

transporter.sendMail(mailOptions, function(error, info){
  if (error) {
    console.log(error);
  } else {
    console.log('Email sent: ' + info.response);
  }
}); 

dan selesai! sekarang server kita sudah bisa mengirim email.

-----------

# Multiple Receivers
untuk mengirim sebuah email ke lebih dari satu penerima, tambahkan email penerima ke properti "to" dari object mailOptions, dipisahkan dengan koma, berikut contohnya:

var mailOptions = {
  from: 'youremail@gmail.com',
  to: 'myfriend@yahoo.com, myotherfriend@yahoo.com',
  subject: 'Sending Email using Node.js',
  text: 'That was easy!'
} 

-----------

# Send HTML
untuk mengirim text dengan format HTML didalam email, gunakan properti "HTML" bukan properti "text", berikut contoh penggunaannya:

var mailOptions = {
  from: 'youremail@gmail.com',
  to: 'myfriend@yahoo.com',
  subject: 'Sending Email using Node.js',
  html: '<h1>Welcome</h1><p>That was easy!</p>'
} 

-----------------------------------------------

* Node.js MongoDB
Node.js bisa digunakan didalam aplikasi database.
salah satu database NoSQL yang populer adalah MongoDB.

# Install MongoDB Driver
mari coba MongoDB dengan Node.js
untuk mendownload dan menginstall MongoDB driver, buka cmd dan jalankan perintah berikut:

>> npm install mongodb

untuk download versi desktop dan yang gratis bisa lewat alamat website berikut: https://www.mongodb.com

setelah selesai mendownload dan menginstall MongoDB nya lewat cmd, kita bisa menggunakan module nya dengan Node.js untuk memanipulasi MongoDB database:

var mongo = require('mongodb');

-----------------------------------------------

* Node.js MongoDB Create Database
# Creating a Database
untuk membuat sebuah database didalam MongoDB, mulai dengan membuat sebuah object MongoClient, lalu tetapkan sebuah koneksi URL dengan ip address yang benar dan nama dari database yang mau dibuat.

MongoDB akan membuat database jika database tersebut belum ada, dan membuat koneksi yang terhubung dengan database tersebut.

- contoh membuat sebuah database bernama "mydb":

var MongoClient = require('mongodb').MongoClient;
//Create a database named "mydb":
var url = "mongodb://localhost:27017/mydb";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  console.log("Database created!");
  db.close();
});

simpan kode diatas didalam sebuah file bernama "demo_create_mongo_db.js" dan jalankan filenya dengan perintah berikut:

>> node demo_create_mongo_db.js

>> output:
Database created!


NOTE: pada MongoDB, sebuah database belum dibuat sampai database tersebut mendapatkan isinya. MongoDB menunggu sampai kita telah membuat sebuah collection (table), dengan sedikitnya 1 buah dokumen (record) sebelum akhirnya membuat database nya (dan collection nya).

-----------------------------------------------

* Node.js MongoDB Create Collection

-----------
-----------------------------------------------
