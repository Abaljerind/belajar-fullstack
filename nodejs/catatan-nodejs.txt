* Node.js Tutorial *

Node.js adalah sebuah lingkungan server yang bersifat open-source. 
Node.js mengijinkan kita untuk menjalankan JavaScript diserver.
-----------------------------------------------

* Node.js Introduction

# What is Node.js?
- Node.js adalah sebuah lingkungan server yang bersifat open-source.
- Node.js itu gratis.
- Node.js bisa berjalan diberbagai macam platform seperti windows, linux, unix, mac os, dan lainnya.
- Node.js menggunakan JavaScript di server nya.

-----------

# Why Node.js?
Node.js menggunakan pemrograman asynchronous.

sebuah tugas yang umum untuk sebuah web server bisa untuk membuat sebuah file diserver dan mengembalikan isi filenya ke client.

berikut ini adalah bagaimana PHP atau ASP menangani sebuah permintaan file:
- mengirim tugasnya ke system file komputer.
- menunggu ketika system file membuka dan membaca filenya.
- mengembalikan isi filenya ke client.
- bersiap untuk menangani permintaan selanjutnya.

berikut ini adalah bagaimana Node.js menangani sebuah permintaan file:
- mengirim tugasnya ke system file komputer.
- bersiap untuk menangani permintaan selanjutnya.
- ketika system file sudah membuka dan membaca filenya, server mengembalikan isi filenya ke client.

Node.js mengeliminasi proses menunggunya, dan meneruskannya dengan permintaan selanjutnya.
Node.js berjalan dengan thread tunggal, tanpa blokiran, pemrograman asynchronous, yang mana sangat efisien penggunaan memorynya.

-----------

# What can Node.js do?
- Node.js bisa menghasilkan isi halaman yang dinamik.
- Node.js bisa membuat, membuka, membaca, menulis, menghapus, dan menutup file file diserver.
- Node.js bisa mengumpulkan data dari form.
- Node.js bisa menambah, menghapus, dan mengubah data di database kita.

-----------

# What is a Node.js File?
- file file Node.js berisi tugas tugas yang akan dieksekusi di event event khusus.
- sebuah event khas antara lain seseorang mencoba untuk mengakses sebuah port diserver.
- file file Node.js wajib dimulai diserver sebelum memiliki efek apapun.
- file file Node.js memiliki ekstensi .js

-----------------------------------------------

* Node.js Get Started

# Getting Started
Setelah kita selesai mendownload dan menginstall Node.js dikomputer kita, mari coba untuk menampilkan 'Hello World' disebuah browser web.

- buatlah sebuah file Node.js bernama 'myfirst.js' dan tambahkan kode dibawah ini:

var http = require('http');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.end('Hello World!');
}).listen(8080); 

simpanlah file tersebut dikomputer kita, di C:\Users\Your Name\myfirst.js
kode diatas memberitahukan komputer untuk menulis 'Hello World!' jika seseorang (contohnya sebuah browser web) mencoba mengakses komputer kita di port 8080. untuk lebih lanjutnya akan dijelaskan nanti.

-----------

# Command Line Interface
Node.js harus dimulai didalam sebuah program Command Line Interface dikomputer kita. untuk platform windows bisa menggunakan Command Prompt. lalu pergi ke browser yang berisi file myfirst.js tadi.

-----------

# Initiate the Node.js File
file yang baru saja dibuat tadi harus dimulai oleh Node.js sebelum ada aksi apapun yang mengambil alihnya.
bukalah Command Prompt dan ketikkan 'node myfirst.js' lalu tekan enter.
sekarang, komputer kita bekerja sebagai sebuah server.
jika seseorang mencoba untuk mengakses komputer kita di port 8080, mereka akan mendapatkan pesan 'Hello World!'.
terakhir, buka browser kita, dan ketikkan alamat berikut http://localhost:8080.

-----------------------------------------------

* Node.js Modules

# What is a Module in Node.js?
pertimbangkan Module Module itu sama dengan perpustakaan JavaScript.
sebuah kumpulan function function yang ingin kita masukkan kedalam aplikasi kita.

-----------

# Built-in Modules
Node.js memiliki sebuah kumpulan Module Module bawaan yang bisa kita gunakan tanpa perlu adanya installasi.
dibawah ini adalah sebuah daftar module module bawaan Node.js versi 6.10.3:

Module 	            Description
assert	            Menyediakan serangkaian tes pernyataan
buffer	            Untuk menangani data biner
child_process	    Untuk menjalankan sebuah proses child
cluster	            Untuk membagi satu proses Node menjadi beberapa proses
crypto	            Untuk menangani fungsi kriptografi OpenSSL
dgram	            Menyediakan implementasi soket datagram UDP
dns	                Untuk melakukan pencarian DNS dan fungsi resolusi nama
domain	            Tidak digunakan lagi. Untuk menangani kesalahan yang tidak tertangani
events	            Untuk menangani event event
fs	                Untuk menangani sistem file
http	            Untuk membuat Node.js bertindak sebagai server HTTP
https	            Untuk membuat Node.js bertindak sebagai server HTTPS
net	                Untuk membuat server dan klien
os	                Memberikan informasi tentang sistem operasi
path	            Untuk menangani jalur file (alamat suatu file)
punycode	        Tidak digunakan lagi. Skema pengkodean karakter
querystring	        Untuk menangani string query URL
readline	        Untuk menangani aliran yang dapat dibaca satu baris pada satu waktu
stream	            Untuk menangani data streaming
string_decoder	    Untuk memecahkan kode objek buffer menjadi string
timers	            Untuk menjalankan suatu fungsi setelah beberapa milidetik tertentu
tls	                Untuk mengimplementasikan protokol TLS dan SSL
tty	                Menyediakan kelas yang digunakan oleh terminal teks
url	                Untuk mengurai string URL
util	            Untuk mengakses fungsi utilitas
v8	                Untuk mengakses informasi tentang V8 (mesin JavaScript)
vm	                Untuk mengkompilasi kode JavaScript di mesin virtual
zlib	            Untuk mengompresi atau mendekompresi file

-----------

# Include Modules
untuk memasukkan sebuah module, gunakan function require() dengan nama dari modulenya, contohnya:

var http = require('http'); 

sekarang aplikasi kita punya akses ke module HTTP, dan bisa membuat sebuah server, berikut contoh kodenya:

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.end('Hello World!');
}).listen(8080); 

-----------

# Create your Own Module
kita bisa membuat module kita sendiri, dan secara mudah memasukkannya kedalam aplikasi kita.
contoh dibawah ini membuat sebuah module yang mengembalikan sebuah objek tanggal dan waktu terkini:

exports.myDateTime = function () {
  return Date();
};

gunakan keyword 'exports' untuk membuat properti dan method tersedia diluar file module.
simpan kode diatas disebuah file dengan nama "myfirstmodule.js"

-----------

# Include your Own Module
sekarang kita bisa memasukkan dan menggunakan module diatas didalam file file Node.js manapun.
- contoh penggunaan module "myfirstmodule" didalam sebuah file Node.js:

var http = require('http');
var dt = require('./myfirstmodule');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write("The date and time are currently: " + dt.myDateTime());
  res.end();
}).listen(8080); 

perhatikan bahwa kita menggunakan ./ untuk menemukan lokasi modulenya, yang berarti bahwa module tersebut berada dilokasi yang sama dengan file Node.js nya.
simpan kode diatas itu didalam sebuah file "demo_module.js" dan jalankan filenya dengan perintah berikut:

>> node demo_module.js 

selanjutnya kita bisa melihat hasilnya tersebut lewat url http://localhost:8080

-----------------------------------------------

* Node.js HTTP Module

# The Built-in HTTP Module
Node.js memiliki sebuah module bawaan bernama HTTP, yang mengijinkan Node.js untuk mentransfer data melewati HTTP.
untuk memasukkan module HTTP, gunakan method require, berikut contohnya:

var http = require('http'); 

-----------

# Node.js as a Web Server
module HTTP bisa membuat sebuah server HTTP yang mendengarkan (listen) port port server dan memberikan sebuah response balik ke client.
gunakan method createServer() untuk membuat sebuah server HTTP, berikut contohnya:

var http = require('http');

//create a server object:
http.createServer(function (req, res) {
  res.write('Hello World!'); //write a response to the client
  res.end(); //end the response
}).listen(8080); //the server object listens on port 8080 

function yang dimasukkan kedalam method http.createServer(), akan dieksekusi ketika seseorang mencoba mengakses komputernya diport 8080.

simpan kode diatas kedalam sebuah file bernama "demo_http.js", dan mulai jalankan filenya tersebut dengan perintah berikut:

>> node demo_http.js 

lalu buka diweb browser localhost dengan port 8080 >> http://localhost:8080

-----------

# Add an HTTP Header
jika response dari server HTTP seharusnya ditampilkan sebagai sebuah HTML, kita seharusnya memasukkan sebuah header HTTP dengan isi content type yang tepat, berikut contohnya:

var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write('Hello World!');
  res.end();
}).listen(8080); 

argument pertama dari method res.writeHead() adalah kode status, 200 berarti semuanya OK, lalu argument kedua adalah sebuah object berisikan response header.

-----------

# Read the QUery String
function yang dimasukkan ke dalam method http.createServer() memiliki sebuah argument req yang merepresentasikan permintaan (request) dari client, sebagai sebuah object (http.IncomingMessage object)

object ini memiliki sebuah properti bernama "url" yang menyimpan sebagian dari url yang muncul setelah nama domainnya, berikut contohnya:

var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write(req.url);
  res.end();
}).listen(8080); 

simpan kode diatas didalam sebuah file bernama "demo_http_url.js" dan mulai jalankan filenya dengan perintah berikut:

>> node demo_http_url.js 

jika kita sudah mengikuti semua langkah langkah diatas dikomputer kita, kita seharusnya bisa melihat 2 hasil yang berbeda ketika membuka 2 alamat localhost dibawah ini:

http://localhost:8080/summer

>> output: /summer

http://localhost:8080/winter

>> output: /winter

-----------

# Split the Query String
terdapat module module bawaan untuk secara mudah membagi string query menjadi bagian bagian yang mudah untuk dibaca, seperti module URL.

- contoh membagi string query menjadi bagian bagian yang mudah untuk dibaca:

var http = require('http');
var url = require('url');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  
  // menggunakan module url untuk mengubah querystring menjadi sebuah object
  var q = url.parse(req.url, true).query;
  
  // mengembalikkan tahun dan bulan dari object query yang dimasukkan lewat alamat url-nya
  var txt = q.year + " " + q.month;
  res.end(txt);
}).listen(8080);

simpan kode diatas kedalam sebuah file bernama "demo_querystring.js" dan mulai jalankan filenya dengan perintah berikut:

>> node demo_querystring.js 

untuk alamat url-nya, gunakan yang dibawah ini:

http://localhost:8080/?year=2017&month=July

>> output: 2017 July

-----------------------------------------------

* Node.js File System Module

# Node.js as a File Server
Module file system Node.js mengijinkan kita untuk bekerja dengan file system dikomputer kita sendiri.
untuk memasukkan module file system, gunakan method require(), seperti contoh dibawah ini:

var fs = require('fs'); 

penggunaan umum untuk module file system antara lain:
- membaca file
- membuat file
- mengupdate file
- menghapus file
- mengganti nama file

-----------

## Read Files
method fs.readFile() digunakan untuk membaca file file yang ada dikomputer kita.
kita asumsikan kita memiliki sebuah file HTML yang disimpan dilokasi yang sama dengan file Node.js, berikut contoh file HTML nya:

demofile1.html

<html>
<body>
<h1>My Header</h1>
<p>My paragraph.</p>
</body>
</html> 

lalu buat sebuah file Node.js yang akan membaca file HTML diatas, dan mengembalikan isinya, berikut isi file Node.js nya:


var http = require('http');
var fs = require('fs');
http.createServer(function (req, res) {
  //Open a file on the server and return its content:
  fs.readFile('demofile1.html', function(err, data) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    return res.end();
  });
}).listen(8080);

lalu simpan kode diatas kedalam file yang bernama 'demo_readfile.js', lalu jalankan kodenya dengan perintah berikut:

>> node demo_readfile.js

terakhir, akses dengan url berikut: http://localhost:8080

-----------

## Create Files
Module file system memiliki method method untuk membuat file file baru, berikut method methodnya:
- fs.appendFile()
- fs.open()
- fs.writeFile()

- method fs.appendFile() menambahkan konten tertentu ke sebuah file. jika filenya tidak ada, maka filenya akan dibuatkan, berikut contoh membuat sebuah file baru menggunakan method appendFile():

var fs = require('fs');

fs.appendFile('mynewfile1.txt', 'Hello content!', function (err) {
  if (err) throw err;
  console.log('Saved!');
}); 


- method fs.open() mengambil sebuah 'flag' sebagai argument keduanya, jika flagnya ini bernilai 'w' untuk menulis / 'writing', maka file tertentu dibuka untuk ditulis. jika filenya tidak ada, maka sebuah file kosong dibuat. berikut contoh membuat sebuah file baru yang kosong menggunakan method open():

var fs = require('fs');

fs.open('mynewfile2.txt', 'w', function (err, file) {
  if (err) throw err;
  console.log('Saved!');
}); 


- method fs.writeFile() mengganti file tertentu dan isinya jika ada. jika filenya tidak ada, maka akan dibuatkan sebuah file baru, berisikan content tertentu. berikut contoh membuat sebuah file baru menggunakan method writeFile():

var fs = require('fs');

fs.writeFile('mynewfile3.txt', 'Hello content!', function (err) {
  if (err) throw err;
  console.log('Saved!');
}); 

-----------

## Update Files
module file system memiliki method method untuk mengupdate file file, diantaranya:

- fs.appendFile()
- fs.writeFile()

- method fs.appendFile() menambahkan isi tertentu diakhir dari file yang ditentukan. contoh menambahkan kalimat 'This is my text.' ke akhir dari file mynewfile.txt:

var fs = require('fs');

fs.appendFile('mynewfile.txt', ' This is my text.', function (err) {
  if (err) throw err;
  console.log('Updated!');
}); 


- method fs.writeFile() mengganti file tertentu dan isi filenya. contoh mengganti isi dari file mynewfile3.txt:

var fs = require('fs');

fs.writeFile('mynewfile3.txt', 'This is my text', function (err) {
  if (err) throw err;
  console.log('Replaced!');
}); 

-----------

## Delete Files
untuk menghapus sebuah file dengan module file system, gunakan method fs.unlink().
method fs.unlink() ini akan menghapus file yang ditentukan:

- contoh menghapus file mynewfile2.txt:

var fs = require('fs');

fs.unlink('mynewfile2.txt', function (err) {
  if (err) throw err;
  console.log('File deleted!');
}); 

-----------

## Rename Files
untuk mengganti nama sebuah file dengan module file system, gunakan method fs.rename().
method fs.rename() akan mengganti nama dari sebuah file yang ditentukan.

- contoh mengganti name file 'mynewfile1.txt' menjadi 'myrenamedfile.txt':

var fs = require('fs');

fs.rename('mynewfile1.txt', 'myrenamedfile.txt', function (err) {
  if (err) throw err;
  console.log('File Renamed!');
}); 

-----------------------------------------------

* Node.js URL Module

# The Built-in URL Module
module URL membagi sebuah alamat website menjadi beberapa bagian yang dapat dibaca.
untuk menambahkan module URL, gunakan method require():

var url = require('url'); 


mengurai sebuah alamat website dengan method url.parse(), dan hasilnya akan mengembalikan sebuah object URL dengan tiap bagian dari alamatnya sebagai properti. contoh dibawah ini membagi sebuah alamat website menjadi beberapa bagian yang dapat dibaca:

var url = require('url');
var adr = 'http://localhost:8080/default.htm?year=2017&month=february';

//Parse the address:
var q = url.parse(adr, true);

/*The parse method returns an object containing url properties*/
console.log(q.host); //returns 'localhost:8080'
console.log(q.pathname); //returns '/default.htm'
console.log(q.search); //returns '?year=2017&month=february'

/*The query property returns an object with all the querystring parameters as properties:*/
var qdata = q.query; //returns an object: { year: 2017, month: 'february' }
console.log(qdata.month); //returns 'february'

-----------

# Node.js File Server
sekarang kita tau bagaimana untuk menguraikan query string, dan kita sudah mempelajari bagaimana membuat Node.js bertingkah laku sebagai sebuah file server. sekarang mari kita kombinasikan keduanya, dan menampilkan file yang diminta oleh client.

sekarang kita buat dua buah file HTML dan menyimpan keduanya didalam folder yang sama dengan file Node.js nya.

summer.html

<!DOCTYPE html>
<html>
<body>
<h1>Summer</h1>
<p>I love the sun!</p>
</body>
</html> 


winter.html

<!DOCTYPE html>
<html>
<body>
<h1>Winter</h1>
<p>I love the snow!</p>
</body>
</html> 


lanjut membuat sebuah file Node.js yang akan membuka file yang diminta dan mengembalikan isinya ke client. jika ada yang salah maka akan ditampilkan error 404, berikut kodenya:

demo_fileserver.js

var http = require('http');
var url = require('url');
var fs = require('fs');

http.createServer(function (req, res) {
  var q = url.parse(req.url, true);
  var filename = "." + q.pathname;
  fs.readFile(filename, function(err, data) {
    if (err) {
      res.writeHead(404, {'Content-Type': 'text/html'});
      return res.end("404 Not Found");
    } 
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    return res.end();
  });
}).listen(8080); 


ingat untuk memulai filenya dengan perintah berikut:

>> node demo_fileserver.js 


selanjutnya ketika dibuka di web browser dengan dua alamat website dibawah ini, maka isinya akan ditampilkan seperti berikut:

http://localhost:8080/summer.html
output>>

Summer

I love the sun!


http://localhost:8080/winter.html
output>>

Winter

I love the snow!

-----------------------------------------------

* Node.js NPM

# What is NPM?
NPM adalah sebuah package manager untuk package package Node.js, atau module module yang kita suka. www.npmjs.com berisikan ribuan package package gratis untuk didownload dan digunakan. program npm sudah terinstall dikomputer kita ketika kita melakukan installasi Node.js.

-----------

# What is a Package?
sebuah package pada Node.js berisikan semua file file yang kita butuhkan untuk sebuah module. module module tersebut adalah perpustakaan JavaScript yang bisa kita masukkan kedalam project kita.

-----------

# Download a Package
mengunduh sebuah package itu sangatlah mudah, caranya dengan membuka cmd dan memberitahukan NPM untuk mengunduh package yang kita mau. berikut adalah contoh bagaimana mengunduh sebuah package yang disebut "upper-case":

>> npm install upper-case

sekarang kita telah selesai mengunduh dan menginstall package pertama kita.
NPM membuat sebuah folder bernama "node_modules", dimana package package yang sudah diunduh akan disimpan. semua package yang kita install dimasa depan nantinya akan disimpan didalam folder tersebut.

sekarang project kita akan memiliki struktur folder seperti berikut:

C:\Users\My Name\node_modules\upper-case

-----------

# Using a Package
setelah package yang kita butuhkan selesai diinstall, maka package tersebut sudah bisa digunakan. termasuk package "upper-case" bisa kita masukkan kedalam module manapun, berikut contoh penggunaannya:

var uc = require('upper-case'); 


- contoh, buatlah sebuah file Node.js yang akan mengubah output "Hello World!" menjadi huruf kapital semua:

var http = require('http');
var uc = require('upper-case');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write(uc.upperCase("Hello World!"));
  res.end();
}).listen(8080); 

simpan kode diatas didalam sebuah file bernama "demo_uppercase.js" dan jalankan kodenya dengan perintah berikut:

>> node demo_uppercase.js

hasilnya dapat dilihat dialamat berikut >> http://localhost:8080

-----------------------------------------------

* Node.js Events

# Events in Node.js
setiap aksi yang dilakukan pada komputer adalah sebuah event. seperti ketika sebuah koneksi dibuat atau sebuah file dibuka.
object object didalam Node.js bisa menjalankan event event, seperti object readStream menjalankan event ketika membuka dan menutup sebuah file, berikut contohnya:

var fs = require('fs');

var readStream = fs.createReadStream('./demofile.txt');

/*Write to the console when the file is opened:*/
readStream.on('open', function () {
  console.log('The file is open');
});

-----------

# Events Module
Node.js memiliki sebuah module bawaan yang disebut "Events", dimana kita bisa membuat, menjalankan, dan mendengarkan (listen) event event milik kita sendiri.

untuk memasukkan module event bawaan gunakan method 'require()'. lalu tambahannya, semua properti dan method dari event event tersebut adalah sebuah contoh dari object "EventEmitter". agar bisa mengakses properti dan method ini, buatlah sebuah object EventEmitter seperti contoh dibawah:

var events = require('events');
var eventEmitter = new events.EventEmitter(); 

-----------

# The EventEmitter Object
kita bisa menugaskan event handlers ke event milik kita sendiri dengan object eventEmitter.
contoh dibawah ini, kita membuat sebuah function yang akan dieksekusi ketika sebuah event "scream" dijalankan. untuk menjalankan sebuah event, gunakan method "emit()".

var events = require('events');
var eventEmitter = new events.EventEmitter();

//Create an event handler:
var myEventHandler = function () {
  console.log('I hear a scream!');
}

//Assign the event handler to an event:
eventEmitter.on('scream', myEventHandler);

//Fire the 'scream' event:
eventEmitter.emit('scream');

output>> I hear a scream!

-----------------------------------------------

* Node.js Upload Files

# The Formidable Module
terdapat module yang sangat bagus untuk pekerjaan yang berhubungan dengan mengupload file file, yaitu "Formidable". module Formidable tersebut bisa didownload dan diinstall menggunakan NPM, berikut contohnya:

>> npm install formidable

setelah selesai mendownload module Formidable tersebut, kita bisa memasukkannya kedalam aplikasi / project kita, berikut contohnya:

var formidable = require('formidable');

-----------

# Upload Files
sekarang kita sudah siap untuk membuat sebuah halaman website didalam Node.js yang mengijinkan user untuk mengupload file file mereka ke komputer kita.

- step 1: Create an Upload Form
buat sebuah file Node.js yang menuliskan sebuah form HTML, dengan sebuah input untuk melakukan Upload. Kode dibawah ini akan membuat sebuah form HTML:

var http = require('http');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
  res.write('<input type="file" name="filetoupload"><br>');
  res.write('<input type="submit">');
  res.write('</form>');
  return res.end();
}).listen(8080); 


- step 2: Parse the Uploaded File
masukkan module Formidable agar bisa mengurai file yang telah diupload setelah file tersebut mencapai server. ketika file telah diupload dan diuraikan, file tersebut akan ditempatkan disebuah folder sementara didalam komputer kita. contoh dibawah ini, file nya akan diupload, dan ditempatkan didalam sebuah folder sementara:

var http = require('http');
var formidable = require('formidable');

http.createServer(function (req, res) {
  if (req.url == '/fileupload') {
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
      res.write('File uploaded');
      res.end();
    });
  } else {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
    res.write('<input type="file" name="filetoupload"><br>');
    res.write('<input type="submit">');
    res.write('</form>');
    return res.end();
  }
}).listen(8080); 


- step 3: Save the File
ketika sebuah file sudah berhasil diupload ke server, file tersebut ditempatkan difolder sementara. jalur ke folder sementara ini bisa ditemukan didalam object "files", yang dijadikan sebagai argument ketiga didalam method parse() dari sebuah callback function. untuk memindahkan filenya ke folder pilihan kita, gunakan module file system, dan ganti nama filenya. contoh dibawah ini adalah contoh memasukkan module file system dan memindahkan filenya ke folder terkini:

var http = require('http');
var formidable = require('formidable');
var fs = require('fs');

http.createServer(function (req, res) {
  if (req.url == '/fileupload') {
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
      var oldpath = files.filetoupload.filepath;
      var newpath = 'D:/belajar-kelasfullstack/nodejs/example/part8-upload-files' + files.filetoupload.originalFilename;
      fs.rename(oldpath, newpath, function (err) {
        if (err) throw err;
        res.write('File uploaded and moved!');
        res.end();
      });
 });
  } else {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
    res.write('<input type="file" name="filetoupload"><br>');
    res.write('<input type="submit">');
    res.write('</form>');
    return res.end();
  }
}).listen(8080); 

-----------------------------------------------

* Node.js Send an Email

# The Nodemailer Module
module Nodemailer memberikan kemudahan untuk mengirim email dari komputer kita.
module Nodemailer ini bisa kita download dan install dengan npm, berikut caranya:

>> npm install nodemailer

setelah didownload, kita sudah bisa memasukkan module tersebut kedalam aplikasi manapun:

var nodemailer = require('nodemailer'); 

-----------

# Send an Email

sekarang kita sudah siap untuk mengirim email dari server.
gunakan username dan password dari provider email yang dipilih untuk mengirim sebuah email. pada Tutorial kali ini, akan diperlihatkan bagaimana menggunakan akun gmail untuk mengirim sebuah email:

var nodemailer = require('nodemailer');

var transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'youremail@gmail.com',
    pass: 'yourpassword'
  }
});

var mailOptions = {
  from: 'youremail@gmail.com',
  to: 'myfriend@yahoo.com',
  subject: 'Sending Email using Node.js',
  text: 'That was easy!'
};

transporter.sendMail(mailOptions, function(error, info){
  if (error) {
    console.log(error);
  } else {
    console.log('Email sent: ' + info.response);
  }
}); 

dan selesai! sekarang server kita sudah bisa mengirim email.

-----------

# Multiple Receivers
untuk mengirim sebuah email ke lebih dari satu penerima, tambahkan email penerima ke properti "to" dari object mailOptions, dipisahkan dengan koma, berikut contohnya:

var mailOptions = {
  from: 'youremail@gmail.com',
  to: 'myfriend@yahoo.com, myotherfriend@yahoo.com',
  subject: 'Sending Email using Node.js',
  text: 'That was easy!'
} 

-----------

# Send HTML
untuk mengirim text dengan format HTML didalam email, gunakan properti "HTML" bukan properti "text", berikut contoh penggunaannya:

var mailOptions = {
  from: 'youremail@gmail.com',
  to: 'myfriend@yahoo.com',
  subject: 'Sending Email using Node.js',
  html: '<h1>Welcome</h1><p>That was easy!</p>'
} 

-----------------------------------------------

* Node.js MongoDB
Node.js bisa digunakan didalam aplikasi database.
salah satu database NoSQL yang populer adalah MongoDB.

# Install MongoDB Driver
mari coba MongoDB dengan Node.js
untuk mendownload dan menginstall MongoDB driver, buka cmd dan jalankan perintah berikut:

>> npm install mongodb

untuk download versi desktop dan yang gratis bisa lewat alamat website berikut: https://www.mongodb.com

setelah selesai mendownload dan menginstall MongoDB nya lewat cmd, kita bisa menggunakan module nya dengan Node.js untuk memanipulasi MongoDB database:

var mongo = require('mongodb');

-----------------------------------------------

* Node.js MongoDB Create Database
# Creating a Database
untuk membuat sebuah database didalam MongoDB, mulai dengan membuat sebuah object MongoClient, lalu tetapkan sebuah koneksi URL dengan ip address yang benar dan nama dari database yang mau dibuat.

MongoDB akan membuat database jika database tersebut belum ada, dan membuat koneksi yang terhubung dengan database tersebut.

- contoh membuat sebuah database bernama "mydb":

var MongoClient = require('mongodb').MongoClient;
//Create a database named "mydb":
var url = "mongodb://localhost:27017/mydb";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  console.log("Database created!");
  db.close();
});

simpan kode diatas didalam sebuah file bernama "demo_create_mongo_db.js" dan jalankan filenya dengan perintah berikut:

>> node demo_create_mongo_db.js

>> output:
Database created!


NOTE: pada MongoDB, sebuah database belum dibuat sampai database tersebut mendapatkan isinya. MongoDB menunggu sampai kita telah membuat sebuah collection (table), dengan sedikitnya 1 buah dokumen (record) sebelum akhirnya membuat database nya (dan collection nya).

-----------------------------------------------

* Node.js MongoDB Create Collection

NOTE: sebuah collection didalam MongoDB sama dengan sebuah table didalam MySQL.

# Creating a Collection
untuk membuat sebuah collection didalam mongodb, gunakan method createCollection().
- contoh membuat sebuah collection bernama 'customers':

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  //Create a collection name "customers":
  dbo.createCollection("customers", function(err, res) {
    if (err) throw err;
    console.log("Collection created!");
    db.close();
  });
});

simpan kode diatas didalam file bernama "demo_mongodb_createcollection.js" dan jalankan kodenya dengan perintah berikut:

>> node demo_mongodb_createcollection.js 

>> output:
Collection created!

NOTE: pada MongoDB, sebuah collection tidak akan dibuat sampai collection tersebut mendapatkan isinya. MongoDB akan menunggu sampai kita memasukkan sebuah dokumen sebelum benar benar membuat collection nya.

-----------------------------------------------

* Node.js MongoDB Insert

# Insert into Collection
untuk memasukkan sebuah record, atau dokumen kalau untuk MongoDB, kedalam sebuah collection, kita gunakan method insertOne().
sebuah dokumen pada MongoDB sama dengan sebuah record pada MySQL.

parameter pertama dari method insertOne() adalah sebuah object yang berisikan "name(s)" dan "value(s)" dari tiap tiap kolom didalam dokumen yang ingin kita masukkan.

method insertOne() juga mengambil sebuah callback function dimana kita bisa menerapkan error apapun yang muncul, atau hasil dari proses insertnya. 

- contoh dibawah memasukkan sebuah dokumen didalam collection "customers":

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var myobj = { name: "Company Inc", address: "Highway 37" };
  dbo.collection("customers").insertOne(myobj, function(err, res) {
    if (err) throw err;
    console.log("1 document inserted");
    db.close();
  });
}); 

simpan kode diatas kedalam file bernama "demo_mongodb_insert.js" dan jalankan filenya dengan perintah berikut:
>> node demo_mongodb_insert.js 

>> output: 1 document inserted

NOTE: jika kita mencoba memasukkan dokumen dokumen kedalam sebuah collection yang belum dibuat, maka MongoDB akan membuat collection-nya secara otomatis.

-----------

# Insert Multiple Documents
untuk memasukkan beberapa document sekaligus kedalam sebuah collection pada MongoDB, kita gunakan method insertMany().

parameter pertama dari method insertMany() adalah sebuah array yang berisi object, berisikan data yang ingin kita masukkan ke collection.

method insertMany() juga mengambil sebuah callback function dimana kita bisa menerapkan error apapun yang muncul, atau hasil dari proses insertnya.

- contoh dibawah adalah contoh memasukkan beberapa dokumen sekaligus didalam collection "customers":

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var myobj = [
    { name: 'John', address: 'Highway 71'},
    { name: 'Peter', address: 'Lowstreet 4'},
    { name: 'Amy', address: 'Apple st 652'},
    { name: 'Hannah', address: 'Mountain 21'},
    { name: 'Michael', address: 'Valley 345'},
    { name: 'Sandy', address: 'Ocean blvd 2'},
    { name: 'Betty', address: 'Green Grass 1'},
    { name: 'Richard', address: 'Sky st 331'},
    { name: 'Susan', address: 'One way 98'},
    { name: 'Vicky', address: 'Yellow Garden 2'},
    { name: 'Ben', address: 'Park Lane 38'},
    { name: 'William', address: 'Central st 954'},
    { name: 'Chuck', address: 'Main Road 989'},
    { name: 'Viola', address: 'Sideway 1633'}
  ];
  dbo.collection("customers").insertMany(myobj, function(err, res) {
    if (err) throw err;
    console.log("Number of documents inserted: " + res.insertedCount);
    db.close();
  });
}); 

simpan kode diatas dengan nama "demo_mongodb_insert_multiple.js" dan jalankan filenya dengan perintah berikut:

>> node demo_mongodb_insert_multiple.js 

>> output: Number of documents inserted: 14

-----------

# The Result Object
ketika menjalankan method insertMany(), sebuah hasil object dikembalikan.
hasil object tersebut berisi informasi tentang bagaimana proses insert berefek pada database.
object yang dikembalikan dari contoh diatas pada file "demo_mongodb_insert_multiple.js" terlihat seperti berikut:

{
  result: { ok: 1, n: 14 },
  ops: [
    { name: 'John', address: 'Highway 71', _id: 58fdbf5c0ef8a50b4cdd9a84 },
    { name: 'Peter', address: 'Lowstreet 4', _id: 58fdbf5c0ef8a50b4cdd9a85 },
    { name: 'Amy', address: 'Apple st 652', _id: 58fdbf5c0ef8a50b4cdd9a86 },
    { name: 'Hannah', address: 'Mountain 21', _id: 58fdbf5c0ef8a50b4cdd9a87 },
    { name: 'Michael', address: 'Valley 345', _id: 58fdbf5c0ef8a50b4cdd9a88 },
    { name: 'Sandy', address: 'Ocean blvd 2', _id: 58fdbf5c0ef8a50b4cdd9a89 },
    { name: 'Betty', address: 'Green Grass 1', _id: 58fdbf5c0ef8a50b4cdd9a8a },
    { name: 'Richard', address: 'Sky st 331', _id: 58fdbf5c0ef8a50b4cdd9a8b },
    { name: 'Susan', address: 'One way 98', _id: 58fdbf5c0ef8a50b4cdd9a8c },
    { name: 'Vicky', address: 'Yellow Garden 2', _id: 58fdbf5c0ef8a50b4cdd9a8d },
    { name: 'Ben', address: 'Park Lane 38', _id: 58fdbf5c0ef8a50b4cdd9a8e },
    { name: 'William', address: 'Central st 954', _id: 58fdbf5c0ef8a50b4cdd9a8f },
    { name: 'Chuck', address: 'Main Road 989', _id: 58fdbf5c0ef8a50b4cdd9a90 },
    { name: 'Viola', address: 'Sideway 1633', _id: 58fdbf5c0ef8a50b4cdd9a91 } ],
  insertedCount: 14,
  insertedIds: [
    58fdbf5c0ef8a50b4cdd9a84,
    58fdbf5c0ef8a50b4cdd9a85,
    58fdbf5c0ef8a50b4cdd9a86,
    58fdbf5c0ef8a50b4cdd9a87,
    58fdbf5c0ef8a50b4cdd9a88,
    58fdbf5c0ef8a50b4cdd9a89,
    58fdbf5c0ef8a50b4cdd9a8a,
    58fdbf5c0ef8a50b4cdd9a8b,
    58fdbf5c0ef8a50b4cdd9a8c,
    58fdbf5c0ef8a50b4cdd9a8d,
    58fdbf5c0ef8a50b4cdd9a8e,
    58fdbf5c0ef8a50b4cdd9a8f
    58fdbf5c0ef8a50b4cdd9a90,
    58fdbf5c0ef8a50b4cdd9a91 ]
} 

values dari propertinya bisa ditampilkan seperti dibawah ini, contoh mengembalikan jumlah dokumen yang sudah dimasukkan:

>> console.log(res.insertedCount)

>> output: 14

-----------

# The _id Field
jika kita tidak membuat sebuah field untuk _id, maka MongoDB menambah satu field _id untuk kita dan menugaskan sebuah id unik untuk tiap dokumen. pada contoh diatas tadi, tidak ada field _id yang dibuat, dan bisa dilihat dari hasil berupa object nya, MongoDB menugaskan sebuah id unik untuk tiap dokumen. jika kita yang membuat field _id, value nya wajib unik untuk tiap tiap dokumennya. 

- contoh dibawah kita akan memasukkan 3 buah record kedalam table "products", dengan membuat field _id nya:

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/mydb";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  //Insert 3 documents, with specified id values:
  var myobj = [
    { _id: 154, name: 'Chocolate Heaven'},
    { _id: 155, name: 'Tasty Lemon'},
    { _id: 156, name: 'Vanilla Dream'}
  ];
  dbo.collection("products").insertMany(myobj, function(err, res) {
    if (err) throw err;
    //Return the result object:
    console.log(res);
    db.close();
  });
});

simpan kode diatas didalam file bernama "demo_mongodb_insert_id.js" dan jalankan filenya dengan perintah berikut:

>> node demo_mongodb_insert_id.js 

>> output:

{
  result: { ok: 1, n: 3 },
  ops: [
    { _id: 154, name: 'Chocolate Heaven },
    { _id: 155, name: 'Tasty Lemon },
    { _id: 156, name: 'Vanilla Dream } ],
  insertedCount: 3,
  insertedIds: [
    154,
    155,
    156 ]
}

-----------------------------------------------

* Node.js MongoDB Find
pada MongoDB kita menggunakan method find() dan fineOne() untuk menemukan data didalam sebuah collection. sama seperti perintah SELECT yang digunakan untuk menemukan data didalam sebuah table pada sebuah database MySQL.

# Find One
untuk menampilkan data dari sebuah collection pada MongoDB, kita bisa menggunakan method findOne(). method tersebut akan mengembalikan data pertama didalam sebuah selection. parameter pertama dari method findOne() adalah sebuah object query. pada contoh kali ini kita menggunakan object query yang kosong, yang mana menampilkan semua dokumen didalam sebuah collection (tetapi mengembalikan hanya dokumen yang pertamanya saja.)

- menemukan dokumen pertama didalam collection customers:

Result Size: 753 x 576

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  //Find the first document in the customers collection:
  dbo.collection("customers").findOne({}, function(err, result) {
    if (err) throw err;
    console.log(result.name);
    db.close();
  });
});

simpan kode diatas didalam sebuah file bernama "demo_mongodb_findone.js" dan jalankan filenya dengan perintah berikut:
>> node demo_mongodb_findone.js 

>> output: Company Inc.

-----------

# Find All
untuk menampilkan data dari sebuah table didalam MongoDB, kita juga bisa menggunakan method find(). method find() ini mengembalikan semua data yang diminta lewat selection. parameter pertama dari method find() adalah sebuah object query. pada contoh kali ini kita masih akan menggunakan sebuah object query yang kosong, yang mana menampilkan semua dokumen didalam collection. jika tidak ada penggunaan parameter sama sekali pada method find() maka akan mengembalikan hasil yang sama dengan perintah SELECT * pada MySQL.

- contoh menemukan semua dokumen didalam collection customers:

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  //Find all documents in the customers collection:
  dbo.collection("customers").find({}).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});

simpan kode diatas didalam sebuah file bernama "demo_mongodb_find.js" dan jalankan filenya dengan perintah berikut:

>> node demo_mongodb_find.js 

>> output:
[
  { _id: 58fdbf5c0ef8a50b4cdd9a84 , name: 'John', address: 'Highway 71'},
  { _id: 58fdbf5c0ef8a50b4cdd9a85 , name: 'Peter', address: 'Lowstreet 4'},
  { _id: 58fdbf5c0ef8a50b4cdd9a86 , name: 'Amy', address: 'Apple st 652'},
  { _id: 58fdbf5c0ef8a50b4cdd9a87 , name: 'Hannah', address: 'Mountain 21'},
  { _id: 58fdbf5c0ef8a50b4cdd9a88 , name: 'Michael', address: 'Valley 345'},
  { _id: 58fdbf5c0ef8a50b4cdd9a89 , name: 'Sandy', address: 'Ocean blvd 2'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8a , name: 'Betty', address: 'Green Grass 1'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8b , name: 'Richard', address: 'Sky st 331'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8c , name: 'Susan', address: 'One way 98'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8d , name: 'Vicky', address: 'Yellow Garden 2'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8e , name: 'Ben', address: 'Park Lane 38'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8f , name: 'William', address: 'Central st 954'},
  { _id: 58fdbf5c0ef8a50b4cdd9a90 , name: 'Chuck', address: 'Main Road 989'},
  { _id: 58fdbf5c0ef8a50b4cdd9a91 , name: 'Viola', address: 'Sideway 1633'}
]

-----------

# Find Some
parameter kedua dari method find() adalah object "projection" yang mendeskripsikan yang mana field field untuk dimasukkan kedalam hasil / output. parameter ini bersifat opsional, dan jika ditambahkan maka semua field akan dimasukkan kedalam output.

- contoh mengembalikan field name dan address dari semua dokumen didalam collection customers:

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  //Exclude the _id field from the result:
  dbo.collection("customers").find({}, { projection: { _id: 0, name: 1, address: 1 } }).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});

simpan kode diatas didalam file bernama "demo_mongodb_find_fields.js" dan jalankan filenya dengan perintah berikut:

>> node demo_mongodb_find_fields.js 

>> output:
[
  { name: 'John', address: 'Highway 71'},
  { name: 'Peter', address: 'Lowstreet 4'},
  { name: 'Amy', address: 'Apple st 652'},
  { name: 'Hannah', address: 'Mountain 21'},
  { name: 'Michael', address: 'Valley 345'},
  { name: 'Sandy', address: 'Ocean blvd 2'},
  { name: 'Betty', address: 'Green Grass 1'},
  { name: 'Richard', address: 'Sky st 331'},
  { name: 'Susan', address: 'One way 98'},
  { name: 'Vicky', address: 'Yellow Garden 2'},
  { name: 'Ben', address: 'Park Lane 38'},
  { name: 'William', address: 'Central st 954'},
  { name: 'Chuck', address: 'Main Road 989'},
  { name: 'Viola', address: 'Sideway 1633'}
]

NOTE: kita tidak diperbolehkan untuk menspesifikasikan value 0 dan 1 didalam object yang sama (kecuali jika salah satu dari field nya adalah field _id). jika kita menspesifikasikan sebuah field dengan value 0, maka field yang lain mendapatkan value 1 dan akan menjadi seperti berikut:

- contoh mengecualikan "address" dari hasil output:

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/mydb";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  //Exclude "address" field in the result:
  db.collection("customers").find({}, { projection: { address: 0 } }).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});

>> output:
[
{ _id: 594a51721daccb087032309e, name: 'John' },
{ _id: 594a51721daccb087032309f, name: 'Peter' },
{ _id: 594a51721daccb08703230a0, name: 'Amy' },
{ _id: 594a51721daccb08703230a1, name: 'Hannah' },
{ _id: 594a51721daccb08703230a2, name: 'Michael' },
{ _id: 594a51721daccb08703230a3, name: 'Sandy' },
{ _id: 594a51721daccb08703230a4, name: 'Betty' },
{ _id: 594a51721daccb08703230a5, name: 'Richard' },
{ _id: 594a51721daccb08703230a6, name: 'Susan' },
{ _id: 594a51721daccb08703230a7, name: 'Vicky' },
{ _id: 594a51721daccb08703230a8, name: 'Ben' },
{ _id: 594a51721daccb08703230a9, name: 'William' },
{ _id: 594a51721daccb08703230aa, name: 'Chuck' },
{ _id: 594a51721daccb08703230ab, name: 'Viola' }
]

karna address dikecualikan maka field _id dan name akan ditampilkan seperti diatas.


untuk mengecualikan field _id, kita wajib mengatur value nya menjadi 0 seperti contoh dibawah ini
- contoh, yang akan menampilkan hanya field "name" saja:

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/mydb";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  //Return only the "name" field in the result:
  db.collection("customers").find({}, { projection: { _id: 0, name: 1 } }).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});

>> output:
[
{ name: 'John' },
{ name: 'Peter' },
{ name: 'Amy' },
{ name: 'Hannah' },
{ name: 'Michael' },
{ name: 'Sandy' },
{ name: 'Betty' },
{ name: 'Richard' },
{ name: 'Susan' },
{ name: 'Vicky' },
{ name: 'Ben' },
{ name: 'William' },
{ name: 'Chuck' },
{ name: 'Viola' }
] 


- contoh dibawah akan memberikan hasil yang sama dengan contoh pertama diatas tadi, yaitu mengembalikan semua field kecual field _id:

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/mydb";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  //Exclude the _id field from the result:
  db.collection("customers").find({}, { projection: { _id: 0 } }).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});

output:
[
{ name: 'John', address: 'Highway 71'},
{ name: 'Peter', address: 'Lowstreet 4'},
{ name: 'Amy', address: 'Apple st 652'},
{ name: 'Hannah', address: 'Mountain 21'},
{ name: 'Michael', address: 'Valley 345'},
{ name: 'Sandy', address: 'Ocean blvd 2'},
{ name: 'Betty', address: 'Green Grass 1'},
{ name: 'Richard', address: 'Sky st 331'},
{ name: 'Susan', address: 'One way 98'},
{ name: 'Vicky', address: 'Yellow Garden 2'},
{ name: 'Ben', address: 'Park Lane 38'},
{ name: 'William', address: 'Central st 954'},
{ name: 'Chuck', address: 'Main Road 989'},
{ name: 'Viola', address: 'Sideway 1633'}
] 


- contoh dibawah ini akan mendapatkan pesan error karna kita menspesifikasikan kedua value 0 dan 1 didalam object yang sama (kecuali jika salah satu field nya adalah field _id):

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  dbo.collection("customers").find({}, { projection: { name: 1, address: 0 } }).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
}); 

-----------

# The Result Object
seperti yang bisa dilihat dari hasil contoh diatas, hasilnya bisa diubah menjadi sebuah array berisikan tiap dokumen sebagai sebuah object. untuk mengembalikan contohnya address dari dokumen keempat, cukup dengan merujuk pada array keempat dari properti object address:

console.log(result[3].address);

>> output: Mountain 21

-----------------------------------------------

* Node.js MongoDB Query

# Filter the Result
ketika menemukan dokumen dokumen didalam sebuah collection, kita bisa memfilter hasilnya menggunakan sebuah object query. argument pertama dari method find() adalah sebuah object query, dan digunakan untuk membatasi pencarian.

- contoh menemukan dokumen dengan address "Park Lane 38":

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  /*Return only the documents with the address "Park Lane 38":*/
  var query = { address: "Park Lane 38" };
  dbo.collection("customers").find(query).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});

simpan kodenya didalam sebuah file bernama "demo_mongodb_query.js" dan jalankan filenya dengan perintah berikut:

>> node demo_mongodb_query.js 

>> output: 
[
  { _id: 58fdbf5c0ef8a50b4cdd9a8e , name: 'Ben', address: 'Park Lane 38' }
]

-----------

# Filter with Regular Expressions
kita bisa menulis Regular Expressions untuk menemukan secara benar apa yang dicari. Regular Expressions hanya bisa digunakan untuk melakukan query string. untuk menemukan dokumen yang address nya dimulai dari huruf S, gunakan Regular Expressions /^S/.

- contoh dibawah ini adalah contoh menemukan dokumen yang alamatnya dimulai dari huruf S:

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  /*Return only the documents where the address starts with an "S":*/
  var query = { address: /^S/ };
  dbo.collection("customers").find(query).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});

simpan kode diatas didalam file bernama "demo_mongodb_query_s.js" dan jalankan filenya dengan perintah berikut:

>> node demo_mongodb_query_s.js 

>> output: 
[
  { _id: 58fdbf5c0ef8a50b4cdd9a8b , name: 'Richard', address: 'Sky st 331' },
  { _id: 58fdbf5c0ef8a50b4cdd9a91 , name: 'Viola', address: 'Sideway 1633' }
]

-----------------------------------------------

* Node.js MongoDB Sort

# Sort the Result
gunakan method sort() untuk mengurutkan hasil secara ascending atau descending. method sort() ini mengambil 1 buah parameter, sebuah objek yang menentukan urutan pengurutannya.

- contoh mengurutkan hasil secara alfabet menggunakan nama:

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  //Sort the result by name:
  var sort = { name: 1 };
  dbo.collection("customers").find().sort(sort).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});

simpan kode diatas didalam sebuah file bernama "demo_sort.js" dan jalankan filenya dengan perintah berikut:

>> node demo_sort.js 

>> output:
[
  { _id: 58fdbf5c0ef8a50b4cdd9a86, name: 'Amy', address: 'Apple st 652'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8e, name: 'Ben', address: 'Park Lane 38'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8a, name: 'Betty', address: 'Green Grass 1'},
  { _id: 58fdbf5c0ef8a50b4cdd9a90, name: 'Chuck', address: 'Main Road 989'},
  { _id: 58fdbf5c0ef8a50b4cdd9a87, name: 'Hannah', address: 'Mountain 21'},
  { _id: 58fdbf5c0ef8a50b4cdd9a84, name: 'John', address: 'Highway 71'},
  { _id: 58fdbf5c0ef8a50b4cdd9a88, name: 'Michael', address: 'Valley 345'},
  { _id: 58fdbf5c0ef8a50b4cdd9a85, name: 'Peter', address: 'Lowstreet 4'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8b, name: 'Richard', address: 'Sky st 331'},
  { _id: 58fdbf5c0ef8a50b4cdd9a89, name: 'Sandy', address: 'Ocean blvd 2'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8c, name: 'Susan', address: 'One way 98'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8d, name: 'Vicky', address: 'Yellow Garden 2'},
  { _id: 58fdbf5c0ef8a50b4cdd9a91, name: 'Viola', address: 'Sideway 1633'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8f, name: 'William', address: 'Central st 954'}
]

-----------

# Sort Descending
gunakan value -1 didalam object sort untuk mengurutkan secara descending.

{ name: 1 } // ascending
{ name: -1 } //descending

- contoh mengurutkan hasil secara descending menggunakan nama:

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  //Sort the result descending by name:
  var sort = { name: -1 };
  dbo.collection("customers").find().sort(sort).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
    db.close();
  });
});

simpan kode diatas kedalam file bernama "demo_sort_desc.js" dan jalankan filenya dengan perintah berikut:

>> node demo_sort_desc.js 

>> output:
[
  { _id: 58fdbf5c0ef8a50b4cdd9a8f, name: 'William', address: 'Central st 954'},
  { _id: 58fdbf5c0ef8a50b4cdd9a91, name: 'Viola', address: 'Sideway 1633'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8d, name: 'Vicky', address: 'Yellow Garden 2'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8c, name: 'Susan', address: 'One way 98'},
  { _id: 58fdbf5c0ef8a50b4cdd9a89, name: 'Sandy', address: 'Ocean blvd 2'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8b, name: 'Richard', address: 'Sky st 331'},
  { _id: 58fdbf5c0ef8a50b4cdd9a85, name: 'Peter', address: 'Lowstreet 4'},
  { _id: 58fdbf5c0ef8a50b4cdd9a88, name: 'Michael', address: 'Valley 345'},
  { _id: 58fdbf5c0ef8a50b4cdd9a84, name: 'John', address: 'Highway 71'},
  { _id: 58fdbf5c0ef8a50b4cdd9a87, name: 'Hannah', address: 'Mountain 21'},
  { _id: 58fdbf5c0ef8a50b4cdd9a90, name: 'Chuck', address: 'Main Road 989'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8a, name: 'Betty', address: 'Green Grass 1'},
  { _id: 58fdbf5c0ef8a50b4cdd9a8e, name: 'Ben', address: 'Park Lane 38'},
  { _id: 58fdbf5c0ef8a50b4cdd9a86, name: 'Amy', address: 'Apple st 652'}
]

-----------------------------------------------

* Node.js MongoDB Delete

# Delete Document
untuk menghapus sebuah record atau dokumen pada MongoDB, kita bisa menggunakan method deleteOne(). parameter pertama dari method deleteOne() adalah sebuah object query yang menentukan dokumen mana yang akan dihapus. jika query nya menemukan lebih dari 1 dokumen maka hanya dokumen yang pertama yang akan dihapus.

- contoh menghapus dokumen dengan address "Mountain 21":

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  /*Delete the first customers with the address "Mountain 21":*/
  var myquery = { address: 'Mountain 21' };
  dbo.collection("customers").deleteOne(myquery, function(err, obj) {
    if (err) throw err;
    console.log("1 document deleted");
    db.close();
  });
});

simpan kode diatas kedalam file bernama "demo_delete.js" dan jalankan filenya dengan perintah berikut:

>> node demo_delete.js 

>> output: 1 document deleted

-----------

# Delete Many
untuk menghapus lebih dari 1 dokumen, gunakan method deleteMany(). parameter pertama dari method deleteMany() adalah sebuah object query yang menentukan dokumen mana yang akan didelete.

- contoh menghapus semua dokumen yang address nya dimulai dari huruf "O":

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  /*Delete all customers where the address starts with an "O":*/
  var myquery = { address: /^O/ };
  dbo.collection("customers").deleteMany(myquery, function(err, obj) {
    if (err) throw err;
    console.log(obj.result.n + " document(s) deleted");
    db.close();
  });
});

simpan kode diatas dengan nama "demo_delete_many.js" dan jalankan filenya dengan perintah berikut:

>> node demo_delete_many.js 

>> output: 2 document(s) deleted

-----------

# The Result Object
method deleteMany() mengembalikan sebuah object yang berisi informasi tentang bagaimana eksekusi kodenya berefek pada database. kebanyakan informasinya tidak penting untuk dipahami, tetapi 1 object didalam object disebut "result" yang memberitahu kita jika eksekusinya berjalan lancar (OK), dan berapa banyak dokumen yang terkena efeknya.

hasil object nya terlihat seperti dibawah ini:
{ n: 2, ok: 1 }

kita bisa gunakan object ini untuk mengembalikan jumlah dokumen yang dihapus.

- contoh mengembalikan jumlah dokumen yang dihapus:

console.log(obj.result.n);

-----------------------------------------------

* Node.js MongoDB Drop

# Drop Collection
kita bisa menghapus sebuah table, atau collection menggunakan method drop().

method drop() mengambil sebuah callback function berisi object error dan hasil parameter yang mengembalikan nilai true jika collection berhasil dihapuskan, sebaliknya akan mengembalikan nilai false.

- contoh menghapus table customers:

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  //Delete the "customers" collection:
  dbo.collection("customers").drop(function(err, delOK) {
    if (err) throw err;
    if (delOK) console.log("Collection deleted");
    db.close();
  });
});

simpan kode diatas kedalam file bernama "demo_drop.js" dan jalankan filenya dengan perintah berikut:

>> node demo_drop.js 

>> output: Collection deleted

-----------

# db.dropCollection
kita juga bisa menggunakan method dropCollection() untuk menghapus sebuah table / collection.
method dropCollection() ini mengambil 2 buah parameter, yaitu nama dari collection nya dan sebuah callback function.

- contoh menghapus collection customers menggunakan method dropCollection():

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  //Delete the "customers" collection:
  dbo.dropCollection("customers", function(err, delOK) {
    if (err) throw err;
    if (delOK) console.log("Collection deleted");
    db.close();
  });
});

simpan kode diatas kedalam file bernama "demo_dropcollection.js" dan jalankan filenya dengan perintah berikut:

>> node demo_dropcollection.js

>> output: Collection deleted

-----------------------------------------------

* Node.js MongoDB Update
kita bisa mengupdate sebuah record / dokumen menggunakan method updateOne().
parameter pertama dari method updateOne() ini adalah sebuah object query yang menentukan mana dokumen untuk diupdate. jika query nya menemukan data yang ingin diupdate lebih dari 1 maka yang akan diupdate hanyalah data pertamanya saja. parameter kedua adalah sebuah object yang menentukan nilai baru dari dokumennya.

- contoh mengupdate dokumen dengan address "Valley 345" ke nama "Mickey" dan address "Canyon 123":

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://127.0.0.1:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var myquery = { address: "Valley 345" };
  var newvalues = { $set: {name: "Mickey", address: "Canyon 123" } };
  dbo.collection("customers").updateOne(myquery, newvalues, function(err, res) {
    if (err) throw err;
    console.log("1 document updated");
    db.close();
  });
}); 

simpan kode diatas kedalam file bernama "demo_update_one.js" dan jalankan filenya dengan perintah berikut:

>> node demo_update_one.js 

>> output: 1 document updated

-----------

# Update only Specific Fields
ketika menggunakan operator "$set", yang akan diupdate hanya field field tertentu saja.

- contoh mengupdate address dari "Valley 345" menjadi "Canyon 123":

...
  var myquery = { address: "Valley 345" };
  var newvalues = { $set: { address: "Canyon 123" } };
  dbo.collection("customers").updateOne(myquery, newvalues, function(err, res) {
...

-----------

# Update Many Documents
untuk mengupdate semua dokumen yang sesuai dengan kriteria yang telah ditentukan, gunakan method updateMany().

- contoh mengupdate semua dokumen yang namanya dimulai dari huruf "S":

var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://127.0.0.1:27017/";

MongoClient.connect(url, function(err, db) {
  if (err) throw err;
  var dbo = db.db("mydb");
  var myquery = { address: /^S/ };
  var newvalues = {$set: {name: "Minnie"} };
  dbo.collection("customers").updateMany(myquery, newvalues, function(err, res) {
    if (err) throw err;
    console.log(res.result.nModified + " document(s) updated");
    db.close();
  });
}); 

simpan kode diatas kedalam file bernama "demo_update_many.js" dan jalankan filenya dengan perintah berikut:

>> node demo_update_many.js 

>> output: 2 document(s) updated

-----------

# The Result Object
method updateOne() dan updateMany() mengembalikan sebuah object yang berisi informasi tentang bagaimana eksekusinya berdampak / berefek pada database.

kebanyakan informasinya tidak penting, tapi 1 object didalam object disebut "result" yang memberitahukan kita jika eksekusinya berjalan sukses (OK), dan berapa banyak dokumen yang terkena dampaknya / efeknya.

hasil objectnya terlihat seperti dibawah ini:
{ n: 1, nModified: 2, ok: 1 }

kita bisa menggunakan object ini untuk mengembalikan jumlah dari dokumen yang terupdate, berikut contohnya:

console.log(res.result.nModified);

-----------------------------------------------

* Node.js MongoDB Limit


-----------
-----------------------------------------------
