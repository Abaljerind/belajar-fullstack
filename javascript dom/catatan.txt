* Pengertian DOM

DOM, document object model => sebuah representasi dari struktur dokumen HTML atau XML dalam bentuk tree oleh javascript. Dom memungkinkan kita untuk mengubah struktur dan isi dari dokumen tersebut melalui kode javascript. DOM memiliki struktur hirarki, dimana setiap elemen dokumen merupakan child node dari elemen lain / root node.

Jadi penggunaan DOM ini untuk mengubah isi dari file HTML baik dengan file javascript / dengan console di browser, tanpa perlu mengubah isi file HTML yg ada di dalam file HTML tersebut.

-----------------------------------------------------------------------

* Contoh perintah perintah DOM

document.all => untuk melihat semua elemen html yg ada di dalam file document html nya.

document.all[nomor index] => kita bisa melihat berdasarkan index ke berapa dari file document tersebut.

document.all[nomor index].innerText => untuk melihat text yang ada di dalam document berdasarkan index yang diinginkan.

document.all[nomor index].innerHTML => untuk melihat tag tag html apa saja yang ada di dalam document berdasarkan inde yang diinginkan.

document.all[nomor index].innerText = "<nilai baru yang ingin ditambahkan di tag html dengan index tersebut>"

-----------------------------------------------------------------------

* Selecting dengan DOM

1. getElementById, menggunakan id yang kita berikan pada sebuah tag HTML.

contoh:
document.getElementById('banner')

2. getElementsByTagName, menggunakan nama dari tag HTML yang kita berikan, biasanya kita gunakan untuk mencari / mengubah sekumpulan tag HTML yang memiliki tag name yang sama.

Contoh:
document.getElementsByTagName('img')
output>> HTMLCollection(4) .....

maka outputnya akan menghasilkan data berupa HTMLCollection(sejumlah tag nya)


3. getElementsByClassName, sama seperti getELementById tetapi getElementsByClassName hanya akan menggunakan nama dari class yang kita berikan, terlepas dari tag nya itu sendiri, misal ada tag img dan tag p yang memiliki class dengan nama yang sama, maka keduanya akan terkena efek dari getElementsByClassName tersebut. Oleh karena itu, kita harus berhati hati dalam memberikan nama pada class di file HTML.

-----------------------------------------------------------------------

* Query selector, swiss army knife milik dom untuk menyeleksi elemen. karna bisa digunakan untuk mencari elemen berdasarkan tag name, id dan juga class nya serta bisa digunakan untuk mencari seluruh elemen bahkan dengan type atau atribut yang ada di dalamnya agar lebih spesifik. tetapi hanya bisa menampilkan 1 buah elemen saja.

contoh:
// cari elemen h1 pertama
document.querySelector('h1');

// cari elemen pertama dengan id bernilai 'red'
document.querySelector('#red');

// cari elemen pertama dengan class bernilai 'big'
document.querySelector('.big');

// menampilkan input dengan type checkbox
document.querySelector('input[type="checkbox"]');

// menampilkan atribut div dengan language english 
document.querySelector('div[lang="en"]');


* Query Selector All, sama dengan querySelector biasa, yang berbeda querySelectorAll ini bisa mengambil / mengubah data secara keseluruhan dari elemen elemen yang sama berdasarkan tag name, id dan juga class nya serta bisa digunakan untuk mencari seluruh elemen bahkan dengan type atau atribut yang ada di dalamnya agar lebih spesifik. output dari querySelectorAll ini berupa NodeList(n);

contoh:
// cari semua elemen p
document.querySelectorAll('p');

// menampilkan seluruh elemen a yang ada di dalam elemen p pada paragraf pertama saja
document.querySelectorAll('p a');

-----------------------------------------------------------------------

* Properties dan Methods yang penting diketahui

1. classList, digunakan untuk menambahkan / menghapus class yang ada pada suatu tag html. Biasanya classList digunakan untuk memberikan style dengan selector class. Sebenarnya classList ini sama dengan properti setAttribute, yang membedakan adalah kita bisa langsung menambahkan / menghapus class tanpa perlu bersusah payah dengan setAttribute. Selain menambahkan / menghapus juga ada fungsi lain dari classList ini seperti replace, contains, entries dan lain lain.

contoh:
const h1 = document.querySelector('h1');

h1.classList;

h1.classList.add('text-white');

h1.classList.remove('text-white');

h1.classList.contains('bg-info');
output>> true jika ada class bg-info, false jika tidak ada


2. getAttribute(), digunakan untuk mengambil data atribut yang ada pada suatu tag html.
contoh:
const banner = document.querySelector('#banner');
banner.getAttribute('id');
banner.getAttribute('src');
banner.getAttribute('class');


3. setAttribute(), digunakan untuk menambahkan atribut baru pada suatu tag html, berikut contoh penggunaan nya.
contoh:
const banner = document.querySelector('#banner');
banner.setAttribute('class', 'isian-class');

keterangan:
bagian 'class' bisa juga digunakan untuk id atau atribut lain yg ada di dalam tag html, lalu untuk 'isian-class' adalah value yang dimiliki oleh class / atribut lainnya.


4. appendChild(), digunakan untuk menambahkan tag html baik di dalam tag body ataupun di dalam tag lainnya, misal seperti tag ul / ol, tag p, yang intinya kita bisa menambahkan tag html baru atau bahkan text dan lain lain di dalam tag html lain atau elemen lainnya.

contoh:
const newImage = document.createElement('img');

// menambahkan source gambar nya
newImage.src = 'https://d1vbn70lmn1nqe.cloudfront.net/prod/wp-content/uploads/2021/10/28064854/12.-Tips-Merawat-Anak-Kucing-Munchkin.jpg';

// untuk melihat isi dari tag img apakah sudah ada src nya
newImage;

// menambahkan newImage ke dalam document di dalam tag body.
document.body.appendChild(newImage);

// menambahkan class pada newImage
newImage.classList.add('square');

// untuk melihat lagi isi dari tag img apakah sudah ada src nya
newImage;


5. append(), mirip dengan innerText dimana kita misalnya menambahkan text pada suatu paragraf dengan tag b yang akan menghasilkan text biasa tanpa di render / di ubah menjadi efek bold / efek apapun yang kita inginkan.

contoh:
const paragraf = document.querySelector('p');
paragraf.append( '<b> Cats </b>');


    ### insertAdjacentElement() ###
digunakan untuk menambahkan elemen baru diposisi tertentu, tidak seperti append dan appendChild. ada 4 lokasi yang bisa digunakan yaitu:

    a. 'beforebegin': sebelum elemen target.
    b. 'afterbegin': di dalam elemen target, tapi sebelum child pertama elemen target.
    c. 'beforeend': di dalam elemen target, tapi setelah child terakhir elemen target.
    d. 'afterend': setelah elemen target.

contoh:
// membuat elemen h3
const h3 = document.createElement('h3');

// menambahkan text dengan append
h3.append('ini adalah web mengenai kucing');

// mengecek isi h3
h3;

// membuat tag h1 menjadi const agar lebih mudah sebagai elemen target
const h1 = document.querySelector('h1')

// menambahkan elemen h3 setelah h1 dengan afterend
h1.insertAdjacentElement('afterend', h3)



6. prepend()
7. removeChild(), adalah metode untuk menghapus suatu elemen tag html. Cara menghapusnya cukup kompleks karena kita harus mengakses parentElement nya dulu lalu kita baru bisa menambahkan metode removeChild tersebut.

contoh:
const firstLi = document.querySelector('li');

// cek parentElement dari firstLi
firstLi.parentElement;

// baru kita bisa hapus elemen firstLi dengan removeChild
firstLi.parentElement.removeChild(firstLi);

NOTE: removeChild bisa digunakan dari browser versi lama sampai yang terbaru.


8. remove(), metode baru untuk menghapus suatu elemen tag html. Cara menghapusnya lebih mudah karena kita hanya perlu menambahkan method remove() tanpa perlu mengisi parameter nya.

contoh:
const img = document.querySelector('img');

// hapus const img dengan remove
img.remove();

NOTE: remove() bisa digunakan dari browser versi terbaru, bisa cek di website mdn / website lainnya.



9. createElement(), digunakan untuk membuat elemen tag html baru.

contoh:
const newImage = document.createElement('img');


10. innerText, akan menampilkan text yang kita masukkan ke dalam file html secara jelas, maksudnya text yang ditampilkan hanya text biasa saja seperti text pada buku pelajaran / text pada suatu paragraf. kita bisa juga menambahkan / mengganti text baru tetapi tidak dapat menambahkan style nya.

contoh 1:
'The cat (Felis catus) is a domestic species of small carnivorous mammal.[1][2] It is the only domesticated species in the family Felidae and is commonly referred to as the domestic cat or house cat to distinguish it from the wild members of the family.'

contoh 2:
para.innerText = 'ini kita <b>ubah</b> paragrafnya';
output>> ini kita <b>ubah</b> paragrafnya


11. textContent, akan menampilkan text yang kita ketikkan di dalam text editor / di dalam file html nya, jadi kalau ada tab atau baris baru, akan ditampilkan juga dengan tambahan berupa \t untuk tab, dan \n untuk baris baru sesuai yang ada di dalam file html nya. kita bisa juga menambahkan / mengganti text baru tetapi tidak dapat menambahkan style nya.

contoh 1:
'\n      The cat (Felis catus) is a\n      domestic\n      species of small\n      carnivorous\n      mammal.[1][2]\n      It is the only domesticated species in the family\n      Felidae and is commonly referred to as the domestic cat or house cat to distinguish it from the wild members of the\n      family.'

contoh 2:
para.textContent = 'ini kita <b>ubah</b> paragrafnya';
output>> ini kita <b>ubah</b> paragrafnya


12. innerHTML, akan menampilkan text berdasarkan text di dalam text editor / file html nya dengan elemen elemen beserta class dan id serta atribut lainnya yang dimiliki, ditambah akan menampilkan juga style css yang diberikan pada text nya.
Dengan innerHTML, kita dapat menambahkan / mengganti text baru bahkan dengan style seperti tag b atau lain lain.

contoh 1:
'\n      The <b>cat</b> (<i><b>Felis catus</b></i>) is a\n      <a href="/wiki/Domestication_of_the_cat" title="Domestication of the cat" style="color: rgb(0, 108, 134); text-decoration-color: magenta; text-decoration-style: wavy;">domestic</a>\n      <a href="/wiki/Species" title="Species" style="color: rgb(0, 108, 134); text-decoration-color: magenta; text-decoration-style: wavy;">species</a> of small\n      <a href="/wiki/Carnivorous" class="mw-redirect" title="Carnivorous" style="color: rgb(0, 108, 134); text-decoration-color: magenta; text-decoration-style: wavy;">carnivorous</a>\n      <a href="/wiki/Mammal" title="Mammal" style="color: rgb(0, 108, 134); text-decoration-color: magenta; text-decoration-style: wavy;">mammal</a>.<sup id="cite_ref-Linnaeus1758_1-1" class="reference"><a href="#cite_note-Linnaeus1758-1" style="color: rgb(0, 108, 134); text-decoration-color: magenta; text-decoration-style: wavy;">[1]</a></sup><sup id="cite_ref-MSW3fc_2-1" class="reference"><a href="#cite_note-MSW3fc-2" style="color: rgb(0, 108, 134); text-decoration-color: magenta; text-decoration-style: wavy;">[2]</a></sup>\n      It is the only domesticated species in the family\n      <a href="/wiki/Felidae" title="Felidae" style="color: rgb(0, 108, 134); text-decoration-color: magenta; text-decoration-style: wavy;">Felidae</a> and is commonly referred to as the <b>domestic cat</b> or <b>house cat</b> to distinguish it from the wild members of the\n      family.<sup id="cite_ref-Clutton-Brock1999_4-0" class="reference"><a href="#cite_note-Clutton-Brock1999-4" style="color: rgb(0, 108, 134); text-decoration-color: magenta; text-decoration-style: wavy;">

contoh 2:
para.innerHTML = 'ini kita <b>ubah</b> paragrafnya';
output>> ini kita ubah paragrafnya


13. value
14. parentElement, digunakan untuk mengetahui elemen pembungkus suatu tag html. properti parentElement ini bisa digunakan berulang kali.

contoh:
const textBold = document.querySelector('b');

// untuk melihat pembungkus tag b (textBold)
textBold.parentElement

// untuk melihat pembungkus tag yang membungkus tag b (textBold)
textBold.parentElement.parentElement

sampai dengan posisi teratas yaitu tag html nya yang menjadi pembungkus keseluruhan tag tag html.


15. children, digunakan untuk mengetahui elemen yang ada di dalam suatu tag html. properti children ini juga bisa digunakan berulang kali.

contoh:
const textBold = document.querySelector('b');

const paragraf = textBold.parentElement;

paragraf;
output>> menampilkan tag pembungkus dari tag html b (textBold).

paragraf.children;
output>> menampilkan HTMLCollection yang berisikan tag tag yang ada di dalam tag p (paragraf) dengan index nya, sehingga kita bisa mengakses child dari elemen tag tersebut. 

paragraf.children[6];
paragraf.children[6].children;



16. nextSibling, digunakan untuk melihat data yang dituliskan sesudah suatu elemen seperti class, id, tag html dll. Dalam hal ini data yang ditampilkan akan dilihat berdasarkan source code nya. contoh:

const squareImages = document.querySelector('.square');

squareImages.nextSibling;
output: #text
jika di klik segitiga nya, kita bisa lihat bagian data: akan menampilkan text berupa '\n\t\t\t\t' yang berasal dari source code nya, bukan elemen html nya.

untuk melihat elemen setelah suatu tag html kita gunakan:
squareImages.nextElementSibling;


17. previousSibling, digunakan untuk melihat data yang dituliskan sebelum suatu elemen seperti class, id, tag html dll. Dalam hal ini data yang ditampilkan akan dilihat berdasarkan source code nya. contoh:

const squareImages = document.querySelector('.square');

squareImages.previousSibling;
output: #text
jika di klik segitiga nya, kita bisa lihat bagian data: akan menampilkan text berupa '\n\n\t\t\t' yang berasal dari source code nya, bukan elemen html nya.

untuk melihat elemen sebelum suatu tag html kita gunakan:
squareImages.previousElementSibling;


18. style, digunakan untuk memberikan style css dengan javascript. tapi hanya sebatas style nya saja, untuk pseudo-code nya tidak bisa lewat javascript. Contoh penggunaan:

const heading = document.querySelector('h1');
heading.style

maka outputnya akan menampilkan properti css apa saja yang bisa digunakan lewat javascript dalam bentuk object dengan nama CSSStyleDeclaration.

contoh lain:
heading.style.color = 'salmon', maka akan mengubah warna h1 menjadi salmon.

-----------------------------------------------------------------------