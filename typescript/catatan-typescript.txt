* TypeScript Tutorial *

--------------------------------------------------------------

* TypeScript Introduction
typescript adalah javascript dengan tambahan sintaks untuk tipe data.

# What is TypeScript?
typescript adalah sebuah sintaktik superset dari javascript yang menambahkan 'static typing'.
ini secara dasarnya berarti bahwa TypeScript menambahkan sintaks diatas javascript, untuk mengijinkan developer untuk menambahkan tipe data.

-------------

# Why should I use TypeScript?
javascript adalah bahasa pemrograman yang longgar aturan tipe nya. Ini bisa sulit untuk dimengerti tipe data apa yang sedang dikirimkan pada javascript. di javascript, parameter parameter function dan variable variable tidak memiliki informasi apapun. Jadi para developer perlu melihat dokumentasi atau menebak berdasarkan implementasinya. TypeScript mengijinkan untuk menspesifikasikan tipe data yang sedang dikirimkan didalam kode, dan memiliki kemampuan untuk melapor error error ketika tipe datanya tidak cocok. contohnya, TypeScript akan melaporkan sebuah error ketika memberikan sebuah string kedalam sebuah function yang mengharapkan sebuah number, sedangkan javascript tidak akan melaporkan error tersebut.

-------------

# How do I use TypeScript?
cara yang umum untuk menggunakan TypeScript adalah dengan menggunakan compiler resmi TypeScript, yang mengubah kode TypeScript menjadi JavaScript. Bisa dengan visual studio code atau dengan compiler setup di local project kita.

--------------------------------------------------------------

* TypeScript Getting Started

TypeScript Compiler
TypeScript diubah menjadi javascript menggunakan sebuah compiler. Ini berarti kode TypeScript berjalan dimanapun kode javascript berjalan.

-------------

# Installing the Compiler
typescript memiliki compiler resmi yang mana bisa diinstall lewat npm.

berikut caranya:
- didalam project npm kita, jalankan perintah berikut untuk menginstall compilernya:
npm install typescript --save-dev

yang akan memberikan output mirip dengan dibawah ini:
added 1 package, and audited 2 packages in 2s
found 0 vulnerabilities 

- compiler nya diinstall didalam folder 'node_modules' dan bisa dijalankan dengan 'npx tsc', seperti berikut:
npx tsc 

yang akan memberikan output mirip dengan dibawah ini:
Version 4.5.5
tsc: The TypeScript Compiler - Version 4.5.5 

yang diikuti oleh daftar dari seluruh perintah perintah umumnya.

-------------

# Configuring the compiler
secara default compiler TypeScript akan mencetak sebuah pesan bantuan (help) ketika berjalan didalam sebuah project kosong.
compilernya bisa dikonfigurasi menggunakan sebuah file bernama 'tsconfig.json'.

- kita bisa membuat TypeScript membuatkan file 'tsconfig.json' nya dengan pengaturan rekomendasi dengan perintah berikut:

npx tsc --init 

yang akan memberikan output mirip dengan dibawah ini:

Created a new tsconfig.json with:
TS
  target: es2016
  module: commonjs
  strict: true
  esModuleInterop: true
  skipLibCheck: true
  forceConsistentCasingInFileNames: true

You can learn more at https://aka.ms/tsconfig.json

- dibawah ini adalah contoh dari banyaknya hal yang bisa kita tambahkan ke file tsconfig.json nya:

{
  "include": ["src"],
  "compilerOptions": {
    "outDir": "./build"
  }
}

kita bisa membuka file nya disebuah editor untuk menambahkan pilihan opsi diatas. ini akan mengatur compiler TypeScript untuk mengubah file file TypeScript yang berada di folder /src dari project kita, menjadi file file javascript didalam folder /build.

ini adalah salah satu cara untuk secara cepat menggunakan TypeScript, ada banyak pilihan opsi yang tersedia seperti:
- membuat 'create-react-app template'.
- sebuah 'node starter project'.
- sebuah 'webpack plugin'.

--------------------------------------------------------------

* TypeScript Simple Types
TypeScript mendukung beberapa tipe data primitif sederhana yang kita tau.

terdapat 3 tipe data primitif di javascript dan TypeScript, antara lain:
- boolean.
- number - seluruh angka dan yang tipe nya float.
- string.

ada 2 lagi yang tidak biasanya digunakan diversi terbaru dari javascript dan TypeScript yaitu:
- bigint - seluruh angka dan yang tipe nya float, ditambah diijinkan adanya nilai untuk negatif dan positif yang lebih besar dari tipe data number.
- symbol - digunakan untuk membuat sebuah unique identifier (unique id) secara global.

-------------

# Type Assignment 
ketika membuat sebuah variable, ada 2 cara utama TypeScript menugaskan sebuah tipe data:
- explicit
- implicit

dikedua contoh dibawah ini, firstName ditulis dalam tipe data string.

## Explicit, menuliskan secara langsung tipe datanya:

let firstName: string = "Dylan";

cara explicit ini lebih mudah dibaca dan lebih terlihat tujuannya.


## Implicit, akan membuat TypeScript menebak tipe datanya, berdasarkan nilai yang diberikan:

let firstName = "Dylan";

cara menebak yang dilakukan oleh TypeScript ini disebut 'infer' (menebak).
cara ini lebih pendek, cepat untuk diketik, dan sering digunakan ketika melakukan pengembangan (developing) dan testing.

-------------

# Error in type Assignment
TypeScript akan menampilkan error jika tipe datanya tidak cocok.

- contoh:
let firstName: string = "Dylan"; // type string
firstName = 33; // attempts to re-assign the value to a different type 

tipe implicit akan membuat variable firstName nya sulit dikenali sebagai sebuah string, tetapi keduanya akan menampilkan error:

- contoh:
let firstName = "Dylan"; // inferred to type string
firstName = 33; // attempts to re-assign the value to a different type 

sedangkan javascript tidak akan menampilkan adanya error untuk tipe data yang tidak cocok seperti contoh diatas.

-------------

# Unable to Infer
TypeScript mungkin tidak akan selalu bisa menebak dengan tepat tipe data apa dari suatu variable. dalam beberapa kasus, TypeScript akan mengatur tipe datanya ke tipe data manapun yang menonaktifkan pemeriksaan tipe data.

- contoh:
// Implicit any as JSON.parse doesn't know what type of data it returns so it can be "any" thing...
const json = JSON.parse("55");
// Most expect json to be an object, but it can be a string or a number like this example
console.log(typeof json);

>> output: number

perilaku diatas bisa dinonaktifkan dengan mengaktifkan 'noImplicitAny' sebagai sebuah opsi pilihan di sebuah project TypeScript di file 'tsconfig.json'. file itu adalah sebuah file konfigurasi JSON untuk mengkostumisasi bagaimana beberapa TypeScript berperilaku.

NOTE: kita mungkin akan melihat tipe data primitif yang ditulis secara kapital seperti 'Boolean'.

boolean != Boolean
untuk tutorial ini, hanya untuk mengetahui cara menggunakan value yang lower-case (boolean dan sebagainya), untuk yang upper-case (Boolean) untuk keadaan yang sangat spesifik.

--------------------------------------------------------------

* TypeScript Special Types



-------------
--------------------------------------------------------------